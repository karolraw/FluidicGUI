{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\DropletGenerator\\\\ResponseSurfaceGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport defaultProperties from '../../data/defaultProperties.json';\n\n// Utility function to deep clone an object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst deepClone = obj => JSON.parse(JSON.stringify(obj));\n\n// Helper function to get parameter range and description from defaultProperties\nconst getParameterRange = (nodeType, paramName) => {\n  var _parameter$min, _parameter$max;\n  const nodeConfig = defaultProperties[nodeType];\n  if (!(nodeConfig !== null && nodeConfig !== void 0 && nodeConfig.parameters)) return {\n    min: 0,\n    max: 100,\n    description: ''\n  };\n  const parameter = nodeConfig.parameters.find(p => p.name === paramName);\n  if (!parameter) return {\n    min: 0,\n    max: 100,\n    description: ''\n  };\n  return {\n    min: (_parameter$min = parameter.min) !== null && _parameter$min !== void 0 ? _parameter$min : 0,\n    max: (_parameter$max = parameter.max) !== null && _parameter$max !== void 0 ? _parameter$max : 100,\n    description: parameter.description || ''\n  };\n};\n\n// Generate a Box-Behnken design for response surface methodology\nconst generateBoxBehnkenDesign = (factors, levels) => {\n  // For simplicity, using a straightforward approach with -1, 0, 1 levels\n  if (factors.length < 2) return []; // Need at least 2 factors\n\n  const centerPoint = factors.map(() => 0);\n  let design = [centerPoint]; // Center point\n\n  // Generate combinations with one factor at center (0) and others at extremes (-1, 1)\n  for (let i = 0; i < factors.length; i++) {\n    for (let j = i + 1; j < factors.length; j++) {\n      // Keep all factors at center (0) except i and j\n      // Generate the 4 combinations for these two factors: (-1,-1), (-1,1), (1,-1), (1,1)\n      const combinations = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n      for (const [level_i, level_j] of combinations) {\n        const point = [...centerPoint];\n        point[i] = level_i;\n        point[j] = level_j;\n        design.push(point);\n      }\n    }\n  }\n\n  // Add replicate center points (typically 3-5)\n  for (let i = 0; i < 3; i++) {\n    design.push([...centerPoint]);\n  }\n  return design;\n};\n\n// Map design levels (-1, 0, 1) to actual parameter values\nconst mapDesignToValues = (design, parameterConfigs) => {\n  return design.map(point => {\n    const mappedPoint = {};\n    parameterConfigs.forEach((config, index) => {\n      const level = point[index];\n      const {\n        min,\n        max\n      } = config;\n      const midpoint = (max + min) / 2;\n\n      // Map -1 -> min, 0 -> midpoint, 1 -> max\n      const value = level === -1 ? min : level === 1 ? max : midpoint;\n      mappedPoint[config.id] = value;\n    });\n    return mappedPoint;\n  });\n};\n\n// Add new function to check if parameter is a pump ratio\nconst isPumpRatio = (nodeType, paramName) => {\n  return nodeType === 'pump' && (paramName === 'Ratio' || paramName === 'ratio');\n};\n\n// Normalize pump ratios to ensure they sum to 1, using the selected strategy\nconst normalizePumpRatios = (design, parameterConfigs, strategy = 'distribute', balancingPumpId = null) => {\n  // Group pump ratio parameters\n  const pumpRatioParams = parameterConfigs.filter(param => isPumpRatio(param.nodeType, param.name));\n  if (pumpRatioParams.length <= 1) {\n    return design; // No need to normalize if there's 0 or 1 pump ratio\n  }\n\n  // For each experimental run, normalize the pump ratios\n  return design.map(run => {\n    const newRun = {\n      ...run\n    };\n    const pumpRatioIds = pumpRatioParams.map(p => p.id);\n\n    // Calculate sum of pump ratios for this run\n    let sum = 0;\n    pumpRatioIds.forEach(id => {\n      sum += newRun[id] || 0;\n    });\n\n    // Skip normalization if sum is 0\n    if (sum === 0) return newRun;\n    if (strategy === 'single' && balancingPumpId) {\n      var _pumpRatioParams$find;\n      // Strategy 1: Use a single pump to balance\n      const balancingPumpParamId = (_pumpRatioParams$find = pumpRatioParams.find(p => p.nodeId === balancingPumpId)) === null || _pumpRatioParams$find === void 0 ? void 0 : _pumpRatioParams$find.id;\n      if (balancingPumpParamId) {\n        // Save original values and calculate what needs to be adjusted\n        const originalValues = {};\n        let nonBalancingSum = 0;\n        pumpRatioIds.forEach(id => {\n          originalValues[id] = newRun[id] || 0;\n          // Skip balancing pump when calculating the sum of others\n          if (id !== balancingPumpParamId) {\n            nonBalancingSum += originalValues[id];\n          }\n        });\n\n        // Normalize non-balancing pumps to their proportion of 1 (max)\n        pumpRatioIds.forEach(id => {\n          if (id === balancingPumpParamId) {\n            // Calculate what's left for the balancing pump\n            newRun[id] = Math.max(0, 1 - nonBalancingSum);\n          } else {\n            // Keep non-balancing pumps at their original values\n            newRun[id] = originalValues[id];\n          }\n        });\n      }\n    } else {\n      // Strategy 2: Distribute proportionally (default)\n      pumpRatioIds.forEach(id => {\n        newRun[id] = (newRun[id] || 0) / sum;\n      });\n    }\n    return newRun;\n  });\n};\nconst ResponseSurfaceGenerator = ({\n  nodes,\n  selectedCarrierPumps,\n  onNext\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [availableParameters, setAvailableParameters] = useState([]);\n  const [selectedParameters, setSelectedParameters] = useState([]);\n  const [numLevels, setNumLevels] = useState(3);\n  const [dropletDesign, setDropletDesign] = useState([]);\n  const [generatedDroplets, setGeneratedDroplets] = useState([]);\n  const [currentPumpRatioSum, setCurrentPumpRatioSum] = useState(0);\n\n  // Add states for pump ratio normalization strategy\n  const [pumpRatioStrategy, setPumpRatioStrategy] = useState('distribute');\n  const [balancingPumpId, setBalancingPumpId] = useState(null);\n  const [availablePumps, setAvailablePumps] = useState([]);\n  const [hasPumpRatios, setHasPumpRatios] = useState(false);\n\n  // Extract parameters from nodes\n  useEffect(() => {\n    const nodesWithParameters = nodes.filter(node => !selectedCarrierPumps.includes(node.id)).filter(node => node.data.type !== 'thermostat' || node.data.end !== 'true').filter(node => node.data.parameters && node.data.parameters.length > 0);\n    const params = nodesWithParameters.flatMap(node => (node.data.parameters || []).map(param => ({\n      nodeId: node.id,\n      nodeName: node.data.label,\n      nodeType: node.data.type,\n      name: param.name,\n      label: param.label || param.name,\n      default: param.default || 0,\n      min: param.min || 0,\n      max: param.max || 100,\n      id: `${node.id}-${param.name}`,\n      selected: false\n    })));\n    setAvailableParameters(params);\n  }, [nodes, selectedCarrierPumps]);\n\n  // Calculate sum of pump ratios whenever selected parameters change\n  useEffect(() => {\n    // Find all selected pump ratio parameters\n    const selectedPumpRatios = availableParameters.filter(param => selectedParameters.includes(param.id) && isPumpRatio(param.nodeType, param.name));\n\n    // Calculate their max sum (using max values)\n    const sum = selectedPumpRatios.reduce((acc, param) => acc + param.max, 0);\n    setCurrentPumpRatioSum(sum);\n\n    // Update hasPumpRatios flag\n    setHasPumpRatios(selectedPumpRatios.length > 1);\n\n    // Update available pumps for balancing\n    if (selectedPumpRatios.length > 1) {\n      const pumpsWithRatios = selectedPumpRatios.map(param => ({\n        id: param.nodeId,\n        label: param.nodeName\n      }));\n      setAvailablePumps(pumpsWithRatios);\n\n      // Set first pump as default balancing pump if none selected\n      if (!balancingPumpId && pumpsWithRatios.length > 0) {\n        setBalancingPumpId(pumpsWithRatios[0].id);\n      }\n    }\n  }, [selectedParameters, availableParameters, balancingPumpId]);\n\n  // Toggle parameter selection\n  const toggleParameterSelection = parameterId => {\n    setSelectedParameters(prev => {\n      if (prev.includes(parameterId)) {\n        return prev.filter(id => id !== parameterId);\n      } else {\n        return [...prev, parameterId];\n      }\n    });\n  };\n\n  // Update parameter range\n  const updateParameterRange = (parameterId, type, value) => {\n    setAvailableParameters(prev => prev.map(param => param.id === parameterId ? {\n      ...param,\n      [type]: parseFloat(value)\n    } : param));\n  };\n\n  // Handle strategy change\n  const handleStrategyChange = strategy => {\n    setPumpRatioStrategy(strategy);\n  };\n\n  // Handle balancing pump change\n  const handleBalancingPumpChange = pumpId => {\n    setBalancingPumpId(pumpId);\n  };\n\n  // Generate droplets based on RSM design\n  const generateDroplets = () => {\n    if (selectedParameters.length < 2) {\n      alert(\"Please select at least 2 parameters for Response Surface Methodology\");\n      return;\n    }\n    const selectedParamConfigs = availableParameters.filter(param => selectedParameters.includes(param.id));\n\n    // Check if pump ratios are included\n    const pumpRatioParams = selectedParamConfigs.filter(param => isPumpRatio(param.nodeType, param.name));\n\n    // Generate Box-Behnken design\n    const design = generateBoxBehnkenDesign(selectedParamConfigs, numLevels);\n    setDropletDesign(design);\n\n    // Map design to actual parameter values\n    let mappedDesign = mapDesignToValues(design, selectedParamConfigs);\n\n    // Normalize pump ratios if present, using selected strategy\n    if (pumpRatioParams.length > 1) {\n      mappedDesign = normalizePumpRatios(mappedDesign, selectedParamConfigs, pumpRatioStrategy, balancingPumpId);\n    }\n\n    // Create droplets from design\n    const droplets = mappedDesign.map((point, index) => {\n      // Create base droplet with all parameters\n      const droplet = {\n        id: Date.now() + index,\n        parameters: availableParameters.flatMap(param => ({\n          nodeId: param.nodeId,\n          nodeName: param.nodeName,\n          name: param.name,\n          default: param.default,\n          value: param.default // Default value for non-selected parameters\n        }))\n      };\n\n      // Update selected parameters with design values\n      droplet.parameters = droplet.parameters.map(param => {\n        const paramId = `${param.nodeId}-${param.name}`;\n        if (point[paramId] !== undefined) {\n          return {\n            ...param,\n            value: point[paramId]\n          };\n        }\n        return param;\n      });\n      return droplet;\n    });\n    setGeneratedDroplets(droplets);\n  };\n\n  // Proceed to the ManualDropletCreation with generated droplets\n  const handleProceed = () => {\n    if (generatedDroplets.length === 0) {\n      alert(\"Please generate droplets first\");\n      return;\n    }\n    onNext(generatedDroplets);\n  };\n  const styles = {\n    container: {\n      padding: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      ...backgroundVariants.mainBackground\n    },\n    header: {\n      marginBottom: '20px'\n    },\n    content: {\n      display: 'flex',\n      gap: '20px',\n      flex: 1\n    },\n    leftPanel: {\n      flex: 1,\n      padding: '15px',\n      borderRadius: '5px',\n      ...backgroundVariants.panelBackground\n    },\n    rightPanel: {\n      flex: 1,\n      padding: '15px',\n      borderRadius: '5px',\n      ...backgroundVariants.panelBackground,\n      overflowY: 'auto'\n    },\n    parameterList: {\n      marginBottom: '20px'\n    },\n    parameterItem: {\n      padding: '10px',\n      margin: '5px 0',\n      borderRadius: '4px',\n      backgroundColor: '#444',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '5px'\n    },\n    selected: {\n      borderLeft: '3px solid #4CAF50'\n    },\n    paramHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    rangeInputs: {\n      display: 'flex',\n      gap: '10px',\n      alignItems: 'center'\n    },\n    input: {\n      padding: '5px',\n      width: '80px',\n      backgroundColor: '#333',\n      border: '1px solid #555',\n      color: 'white',\n      borderRadius: '3px'\n    },\n    levelSelector: {\n      marginBottom: '20px',\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px'\n    },\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginTop: '20px'\n    },\n    designPreview: {\n      marginTop: '20px'\n    },\n    previewTable: {\n      width: '100%',\n      borderCollapse: 'collapse',\n      marginTop: '10px'\n    },\n    tableHead: {\n      backgroundColor: '#444',\n      textAlign: 'left'\n    },\n    tableRow: {\n      borderBottom: '1px solid #444'\n    },\n    tableCell: {\n      padding: '8px',\n      borderBottom: '1px solid #444'\n    },\n    selectedParameters: {\n      marginTop: '20px'\n    },\n    pumpRatioWarning: {\n      marginBottom: '20px',\n      padding: '10px',\n      backgroundColor: '#444',\n      borderRadius: '4px',\n      border: '1px solid #555'\n    },\n    select: {\n      padding: '5px',\n      width: '100px',\n      backgroundColor: '#333',\n      border: '1px solid #555',\n      color: 'white',\n      borderRadius: '3px'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Response Surface Methodology (Box\\u2013Behnken design)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select parameters to include in the design and set their ranges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.leftPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Parameters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select at least 2 parameters for the design\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.parameterList,\n          children: availableParameters.map(param => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              ...styles.parameterItem,\n              ...(selectedParameters.includes(param.id) ? styles.selected : {})\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.paramHeader,\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedParameters.includes(param.id),\n                  onChange: () => toggleParameterSelection(param.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 21\n                }, this), param.nodeName, \" - \", param.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this), selectedParameters.includes(param.id) && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.rangeInputs,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Min:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 467,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: styles.input,\n                  value: param.min,\n                  onChange: e => updateParameterRange(param.id, 'min', e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Max:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  style: styles.input,\n                  value: param.max,\n                  onChange: e => updateParameterRange(param.id, 'max', e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 19\n            }, this)]\n          }, param.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), selectedParameters.some(id => {\n          const param = availableParameters.find(p => p.id === id);\n          return param && isPumpRatio(param.nodeType, param.name);\n        }) && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '10px',\n            marginBottom: '15px',\n            backgroundColor: currentPumpRatioSum > 0 ? '#2c2c2c' : '#442c2c',\n            border: `1px solid ${currentPumpRatioSum > 0 ? '#555' : '#a55'}`,\n            borderRadius: '4px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Note:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this), \" Pump ratios will be automatically normalized to ensure they sum to 1.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '8px',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Current sum of max pump ratios: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: '8px',\n                fontWeight: 'bold',\n                color: currentPumpRatioSum > 0 ? '#4CAF50' : '#FF5252'\n              },\n              children: currentPumpRatioSum.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.buttonContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonVariants.primaryButton,\n            onClick: generateDroplets,\n            disabled: selectedParameters.length < 2,\n            children: \"Generate Droplets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonVariants.secondaryButton,\n            onClick: handleProceed,\n            disabled: generatedDroplets.length === 0,\n            children: \"Proceed to Droplet Editor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.rightPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Design Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Generated droplets: \", generatedDroplets.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), dropletDesign.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.designPreview,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Box-Behnken Design for selected parameters:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            style: styles.previewTable,\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              style: styles.tableHead,\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  style: styles.tableCell,\n                  children: \"Run\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 21\n                }, this), selectedParameters.map(paramId => {\n                  const param = availableParameters.find(p => p.id === paramId);\n                  return /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: styles.tableCell,\n                    children: [param.nodeName, \" - \", param.label]\n                  }, paramId, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 25\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: dropletDesign.map((point, index) => {\n                // First, get the raw values from the design\n                const rawValues = {};\n                point.forEach((level, i) => {\n                  const paramId = selectedParameters[i];\n                  const param = availableParameters.find(p => p.id === paramId);\n                  const value = level === -1 ? param.min : level === 1 ? param.max : (param.min + param.max) / 2;\n                  rawValues[paramId] = value;\n                });\n\n                // Check if we need to normalize pump ratios\n                const pumpRatioParams = selectedParameters.filter(paramId => {\n                  const param = availableParameters.find(p => p.id === paramId);\n                  return param && isPumpRatio(param.nodeType, param.name);\n                });\n\n                // Normalize if needed\n                if (pumpRatioParams.length > 1) {\n                  // Calculate sum\n                  let sum = 0;\n                  pumpRatioParams.forEach(paramId => {\n                    sum += rawValues[paramId] || 0;\n                  });\n\n                  // Normalize\n                  if (sum > 0) {\n                    pumpRatioParams.forEach(paramId => {\n                      rawValues[paramId] = (rawValues[paramId] || 0) / sum;\n                    });\n                  }\n                }\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  style: styles.tableRow,\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    style: styles.tableCell,\n                    children: index + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 594,\n                    columnNumber: 25\n                  }, this), point.map((level, i) => {\n                    const paramId = selectedParameters[i];\n                    const param = availableParameters.find(p => p.id === paramId);\n                    const isPumpRatioParam = isPumpRatio(param.nodeType, param.name);\n\n                    // Use normalized value for pump ratios\n                    const value = rawValues[paramId];\n                    const displayValue = value.toFixed(isPumpRatioParam ? 4 : 2);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      style: styles.tableCell,\n                      children: [displayValue, isPumpRatioParam ? '' : level === -1 ? ' (min)' : level === 1 ? ' (max)' : ' (mid)', isPumpRatioParam && (pumpRatioStrategy === 'single' && param.nodeId === balancingPumpId ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: '#FF9800'\n                        },\n                        children: \" (balancing)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 610,\n                        columnNumber: 35\n                      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: '#4CAF50'\n                        },\n                        children: \" (normalized)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 611,\n                        columnNumber: 35\n                      }, this))]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 605,\n                      columnNumber: 29\n                    }, this);\n                  })]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), selectedParameters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.selectedParameters,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Parameters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Adjust ranges for selected parameters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 11\n      }, this), hasPumpRatios && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.pumpRatioWarning,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Pump Ratio Normalization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Multiple pump ratios selected. Choose how to normalize:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '10px',\n            marginTop: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"ratioStrategy\",\n                value: \"distribute\",\n                checked: pumpRatioStrategy === 'distribute',\n                onChange: () => handleStrategyChange('distribute')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 21\n              }, this), \"Distribute proportionally across all pumps\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"ratioStrategy\",\n                value: \"single\",\n                checked: pumpRatioStrategy === 'single',\n                onChange: () => handleStrategyChange('single')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 21\n              }, this), \"Adjust a single pump to balance\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 17\n          }, this), pumpRatioStrategy === 'single' && availablePumps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: '20px',\n              marginTop: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select pump to adjust: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: balancingPumpId || '',\n              onChange: e => handleBalancingPumpChange(e.target.value),\n              style: styles.select,\n              children: availablePumps.map(pump => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pump.id,\n                children: pump.label\n              }, pump.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 13\n      }, this), selectedParameters.map(paramId => {\n        const param = availableParameters.find(p => p.id === paramId);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.parameterItem,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.paramHeader,\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectedParameters.includes(paramId),\n                onChange: () => toggleParameterSelection(paramId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 21\n              }, this), param.nodeName, \" - \", param.label]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 17\n          }, this), selectedParameters.includes(paramId) && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.rangeInputs,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Min:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                style: styles.input,\n                value: param.min,\n                onChange: e => updateParameterRange(paramId, 'min', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Max:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                style: styles.input,\n                value: param.max,\n                onChange: e => updateParameterRange(paramId, 'max', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 712,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 3\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 19\n          }, this)]\n        }, paramId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n};\n_s(ResponseSurfaceGenerator, \"0KZii5EbZ/Sg2csZKUWtzGrex/Q=\", false, function () {\n  return [useButtonStyles];\n});\n_c = ResponseSurfaceGenerator;\nexport default ResponseSurfaceGenerator;\nvar _c;\n$RefreshReg$(_c, \"ResponseSurfaceGenerator\");","map":{"version":3,"names":["React","useState","useEffect","useButtonStyles","backgroundVariants","defaultProperties","jsxDEV","_jsxDEV","deepClone","obj","JSON","parse","stringify","getParameterRange","nodeType","paramName","_parameter$min","_parameter$max","nodeConfig","parameters","min","max","description","parameter","find","p","name","generateBoxBehnkenDesign","factors","levels","length","centerPoint","map","design","i","j","combinations","level_i","level_j","point","push","mapDesignToValues","parameterConfigs","mappedPoint","forEach","config","index","level","midpoint","value","id","isPumpRatio","normalizePumpRatios","strategy","balancingPumpId","pumpRatioParams","filter","param","run","newRun","pumpRatioIds","sum","_pumpRatioParams$find","balancingPumpParamId","nodeId","originalValues","nonBalancingSum","Math","ResponseSurfaceGenerator","nodes","selectedCarrierPumps","onNext","_s","buttonVariants","availableParameters","setAvailableParameters","selectedParameters","setSelectedParameters","numLevels","setNumLevels","dropletDesign","setDropletDesign","generatedDroplets","setGeneratedDroplets","currentPumpRatioSum","setCurrentPumpRatioSum","pumpRatioStrategy","setPumpRatioStrategy","setBalancingPumpId","availablePumps","setAvailablePumps","hasPumpRatios","setHasPumpRatios","nodesWithParameters","node","includes","data","type","end","params","flatMap","nodeName","label","default","selected","selectedPumpRatios","reduce","acc","pumpsWithRatios","toggleParameterSelection","parameterId","prev","updateParameterRange","parseFloat","handleStrategyChange","handleBalancingPumpChange","pumpId","generateDroplets","alert","selectedParamConfigs","mappedDesign","droplets","droplet","Date","now","paramId","undefined","handleProceed","styles","container","padding","display","flexDirection","height","mainBackground","header","marginBottom","content","gap","flex","leftPanel","borderRadius","panelBackground","rightPanel","overflowY","parameterList","parameterItem","margin","backgroundColor","borderLeft","paramHeader","justifyContent","alignItems","rangeInputs","input","width","border","color","levelSelector","buttonContainer","marginTop","designPreview","previewTable","borderCollapse","tableHead","textAlign","tableRow","borderBottom","tableCell","pumpRatioWarning","select","style","children","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","e","target","some","marginLeft","fontWeight","toFixed","primaryButton","onClick","disabled","secondaryButton","rawValues","isPumpRatioParam","displayValue","pump","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/DropletGenerator/ResponseSurfaceGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\nimport defaultProperties from '../../data/defaultProperties.json';\r\n\r\n// Utility function to deep clone an object\r\nconst deepClone = (obj) => JSON.parse(JSON.stringify(obj));\r\n\r\n// Helper function to get parameter range and description from defaultProperties\r\nconst getParameterRange = (nodeType, paramName) => {\r\n  const nodeConfig = defaultProperties[nodeType];\r\n  if (!nodeConfig?.parameters) return { min: 0, max: 100, description: '' };\r\n  \r\n  const parameter = nodeConfig.parameters.find(p => p.name === paramName);\r\n  if (!parameter) return { min: 0, max: 100, description: '' };\r\n  \r\n  return {\r\n    min: parameter.min ?? 0,\r\n    max: parameter.max ?? 100,\r\n    description: parameter.description || ''\r\n  };\r\n};\r\n\r\n// Generate a Box-Behnken design for response surface methodology\r\nconst generateBoxBehnkenDesign = (factors, levels) => {\r\n  // For simplicity, using a straightforward approach with -1, 0, 1 levels\r\n  if (factors.length < 2) return []; // Need at least 2 factors\r\n\r\n  const centerPoint = factors.map(() => 0);\r\n  let design = [centerPoint]; // Center point\r\n\r\n  // Generate combinations with one factor at center (0) and others at extremes (-1, 1)\r\n  for (let i = 0; i < factors.length; i++) {\r\n    for (let j = i + 1; j < factors.length; j++) {\r\n      // Keep all factors at center (0) except i and j\r\n      // Generate the 4 combinations for these two factors: (-1,-1), (-1,1), (1,-1), (1,1)\r\n      const combinations = [\r\n        [-1, -1], [-1, 1], [1, -1], [1, 1]\r\n      ];\r\n\r\n      for (const [level_i, level_j] of combinations) {\r\n        const point = [...centerPoint];\r\n        point[i] = level_i;\r\n        point[j] = level_j;\r\n        design.push(point);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add replicate center points (typically 3-5)\r\n  for (let i = 0; i < 3; i++) {\r\n    design.push([...centerPoint]);\r\n  }\r\n\r\n  return design;\r\n};\r\n\r\n// Map design levels (-1, 0, 1) to actual parameter values\r\nconst mapDesignToValues = (design, parameterConfigs) => {\r\n  return design.map(point => {\r\n    const mappedPoint = {};\r\n    parameterConfigs.forEach((config, index) => {\r\n      const level = point[index];\r\n      const { min, max } = config;\r\n      const midpoint = (max + min) / 2;\r\n      \r\n      // Map -1 -> min, 0 -> midpoint, 1 -> max\r\n      const value = level === -1 ? min : (level === 1 ? max : midpoint);\r\n      mappedPoint[config.id] = value;\r\n    });\r\n    return mappedPoint;\r\n  });\r\n};\r\n\r\n// Add new function to check if parameter is a pump ratio\r\nconst isPumpRatio = (nodeType, paramName) => {\r\n  return nodeType === 'pump' && (paramName === 'Ratio' || paramName === 'ratio');\r\n};\r\n\r\n// Normalize pump ratios to ensure they sum to 1, using the selected strategy\r\nconst normalizePumpRatios = (design, parameterConfigs, strategy = 'distribute', balancingPumpId = null) => {\r\n  // Group pump ratio parameters\r\n  const pumpRatioParams = parameterConfigs.filter(param => \r\n    isPumpRatio(param.nodeType, param.name)\r\n  );\r\n  \r\n  if (pumpRatioParams.length <= 1) {\r\n    return design; // No need to normalize if there's 0 or 1 pump ratio\r\n  }\r\n  \r\n  // For each experimental run, normalize the pump ratios\r\n  return design.map(run => {\r\n    const newRun = { ...run };\r\n    const pumpRatioIds = pumpRatioParams.map(p => p.id);\r\n    \r\n    // Calculate sum of pump ratios for this run\r\n    let sum = 0;\r\n    pumpRatioIds.forEach(id => {\r\n      sum += newRun[id] || 0;\r\n    });\r\n    \r\n    // Skip normalization if sum is 0\r\n    if (sum === 0) return newRun;\r\n    \r\n    if (strategy === 'single' && balancingPumpId) {\r\n      // Strategy 1: Use a single pump to balance\r\n      const balancingPumpParamId = pumpRatioParams.find(p => \r\n        p.nodeId === balancingPumpId\r\n      )?.id;\r\n      \r\n      if (balancingPumpParamId) {\r\n        // Save original values and calculate what needs to be adjusted\r\n        const originalValues = {};\r\n        let nonBalancingSum = 0;\r\n        \r\n        pumpRatioIds.forEach(id => {\r\n          originalValues[id] = newRun[id] || 0;\r\n          // Skip balancing pump when calculating the sum of others\r\n          if (id !== balancingPumpParamId) {\r\n            nonBalancingSum += originalValues[id];\r\n          }\r\n        });\r\n        \r\n        // Normalize non-balancing pumps to their proportion of 1 (max)\r\n        pumpRatioIds.forEach(id => {\r\n          if (id === balancingPumpParamId) {\r\n            // Calculate what's left for the balancing pump\r\n            newRun[id] = Math.max(0, 1 - nonBalancingSum);\r\n          } else {\r\n            // Keep non-balancing pumps at their original values\r\n            newRun[id] = originalValues[id];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Strategy 2: Distribute proportionally (default)\r\n      pumpRatioIds.forEach(id => {\r\n        newRun[id] = (newRun[id] || 0) / sum;\r\n      });\r\n    }\r\n    \r\n    return newRun;\r\n  });\r\n};\r\n\r\nconst ResponseSurfaceGenerator = ({ nodes, selectedCarrierPumps, onNext }) => {\r\n  const buttonVariants = useButtonStyles();\r\n  const [availableParameters, setAvailableParameters] = useState([]);\r\n  const [selectedParameters, setSelectedParameters] = useState([]);\r\n  const [numLevels, setNumLevels] = useState(3);\r\n  const [dropletDesign, setDropletDesign] = useState([]);\r\n  const [generatedDroplets, setGeneratedDroplets] = useState([]);\r\n  const [currentPumpRatioSum, setCurrentPumpRatioSum] = useState(0);\r\n  \r\n  // Add states for pump ratio normalization strategy\r\n  const [pumpRatioStrategy, setPumpRatioStrategy] = useState('distribute');\r\n  const [balancingPumpId, setBalancingPumpId] = useState(null);\r\n  const [availablePumps, setAvailablePumps] = useState([]);\r\n  const [hasPumpRatios, setHasPumpRatios] = useState(false);\r\n\r\n  // Extract parameters from nodes\r\n  useEffect(() => {\r\n    const nodesWithParameters = nodes\r\n      .filter(node => !selectedCarrierPumps.includes(node.id))\r\n      .filter(node => node.data.type !== 'thermostat' || node.data.end !== 'true')\r\n      .filter(node => node.data.parameters && node.data.parameters.length > 0);\r\n\r\n    const params = nodesWithParameters.flatMap(node => \r\n      (node.data.parameters || []).map(param => ({\r\n        nodeId: node.id,\r\n        nodeName: node.data.label,\r\n        nodeType: node.data.type,\r\n        name: param.name,\r\n        label: param.label || param.name,\r\n        default: param.default || 0,\r\n        min: param.min || 0,\r\n        max: param.max || 100,\r\n        id: `${node.id}-${param.name}`,\r\n        selected: false\r\n      }))\r\n    );\r\n\r\n    setAvailableParameters(params);\r\n  }, [nodes, selectedCarrierPumps]);\r\n\r\n  // Calculate sum of pump ratios whenever selected parameters change\r\n  useEffect(() => {\r\n    // Find all selected pump ratio parameters\r\n    const selectedPumpRatios = availableParameters.filter(param => \r\n      selectedParameters.includes(param.id) && \r\n      isPumpRatio(param.nodeType, param.name)\r\n    );\r\n    \r\n    // Calculate their max sum (using max values)\r\n    const sum = selectedPumpRatios.reduce((acc, param) => acc + param.max, 0);\r\n    setCurrentPumpRatioSum(sum);\r\n    \r\n    // Update hasPumpRatios flag\r\n    setHasPumpRatios(selectedPumpRatios.length > 1);\r\n    \r\n    // Update available pumps for balancing\r\n    if (selectedPumpRatios.length > 1) {\r\n      const pumpsWithRatios = selectedPumpRatios.map(param => ({\r\n        id: param.nodeId,\r\n        label: param.nodeName\r\n      }));\r\n      \r\n      setAvailablePumps(pumpsWithRatios);\r\n      \r\n      // Set first pump as default balancing pump if none selected\r\n      if (!balancingPumpId && pumpsWithRatios.length > 0) {\r\n        setBalancingPumpId(pumpsWithRatios[0].id);\r\n      }\r\n    }\r\n  }, [selectedParameters, availableParameters, balancingPumpId]);\r\n\r\n  // Toggle parameter selection\r\n  const toggleParameterSelection = (parameterId) => {\r\n    setSelectedParameters(prev => {\r\n      if (prev.includes(parameterId)) {\r\n        return prev.filter(id => id !== parameterId);\r\n      } else {\r\n        return [...prev, parameterId];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Update parameter range\r\n  const updateParameterRange = (parameterId, type, value) => {\r\n    setAvailableParameters(prev => \r\n      prev.map(param => \r\n        param.id === parameterId \r\n          ? { ...param, [type]: parseFloat(value) } \r\n          : param\r\n      )\r\n    );\r\n  };\r\n\r\n  // Handle strategy change\r\n  const handleStrategyChange = (strategy) => {\r\n    setPumpRatioStrategy(strategy);\r\n  };\r\n  \r\n  // Handle balancing pump change\r\n  const handleBalancingPumpChange = (pumpId) => {\r\n    setBalancingPumpId(pumpId);\r\n  };\r\n\r\n  // Generate droplets based on RSM design\r\n  const generateDroplets = () => {\r\n    if (selectedParameters.length < 2) {\r\n      alert(\"Please select at least 2 parameters for Response Surface Methodology\");\r\n      return;\r\n    }\r\n\r\n    const selectedParamConfigs = availableParameters.filter(\r\n      param => selectedParameters.includes(param.id)\r\n    );\r\n\r\n    // Check if pump ratios are included\r\n    const pumpRatioParams = selectedParamConfigs.filter(param => \r\n      isPumpRatio(param.nodeType, param.name)\r\n    );\r\n    \r\n    // Generate Box-Behnken design\r\n    const design = generateBoxBehnkenDesign(selectedParamConfigs, numLevels);\r\n    setDropletDesign(design);\r\n\r\n    // Map design to actual parameter values\r\n    let mappedDesign = mapDesignToValues(design, selectedParamConfigs);\r\n    \r\n    // Normalize pump ratios if present, using selected strategy\r\n    if (pumpRatioParams.length > 1) {\r\n      mappedDesign = normalizePumpRatios(\r\n        mappedDesign, \r\n        selectedParamConfigs, \r\n        pumpRatioStrategy, \r\n        balancingPumpId\r\n      );\r\n    }\r\n\r\n    // Create droplets from design\r\n    const droplets = mappedDesign.map((point, index) => {\r\n      // Create base droplet with all parameters\r\n      const droplet = {\r\n        id: Date.now() + index,\r\n        parameters: availableParameters.flatMap(param => ({\r\n          nodeId: param.nodeId,\r\n          nodeName: param.nodeName,\r\n          name: param.name,\r\n          default: param.default,\r\n          value: param.default // Default value for non-selected parameters\r\n        }))\r\n      };\r\n\r\n      // Update selected parameters with design values\r\n      droplet.parameters = droplet.parameters.map(param => {\r\n        const paramId = `${param.nodeId}-${param.name}`;\r\n        if (point[paramId] !== undefined) {\r\n          return { ...param, value: point[paramId] };\r\n        }\r\n        return param;\r\n      });\r\n\r\n      return droplet;\r\n    });\r\n\r\n    setGeneratedDroplets(droplets);\r\n  };\r\n\r\n  // Proceed to the ManualDropletCreation with generated droplets\r\n  const handleProceed = () => {\r\n    if (generatedDroplets.length === 0) {\r\n      alert(\"Please generate droplets first\");\r\n      return;\r\n    }\r\n    onNext(generatedDroplets);\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      padding: '20px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n      ...backgroundVariants.mainBackground\r\n    },\r\n    header: {\r\n      marginBottom: '20px'\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      gap: '20px',\r\n      flex: 1\r\n    },\r\n    leftPanel: {\r\n      flex: 1,\r\n      padding: '15px',\r\n      borderRadius: '5px',\r\n      ...backgroundVariants.panelBackground\r\n    },\r\n    rightPanel: {\r\n      flex: 1,\r\n      padding: '15px',\r\n      borderRadius: '5px',\r\n      ...backgroundVariants.panelBackground,\r\n      overflowY: 'auto'\r\n    },\r\n    parameterList: {\r\n      marginBottom: '20px'\r\n    },\r\n    parameterItem: {\r\n      padding: '10px',\r\n      margin: '5px 0',\r\n      borderRadius: '4px',\r\n      backgroundColor: '#444',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '5px'\r\n    },\r\n    selected: {\r\n      borderLeft: '3px solid #4CAF50'\r\n    },\r\n    paramHeader: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center'\r\n    },\r\n    rangeInputs: {\r\n      display: 'flex',\r\n      gap: '10px',\r\n      alignItems: 'center'\r\n    },\r\n    input: {\r\n      padding: '5px',\r\n      width: '80px',\r\n      backgroundColor: '#333',\r\n      border: '1px solid #555',\r\n      color: 'white',\r\n      borderRadius: '3px'\r\n    },\r\n    levelSelector: {\r\n      marginBottom: '20px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '10px'\r\n    },\r\n    buttonContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      marginTop: '20px'\r\n    },\r\n    designPreview: {\r\n      marginTop: '20px'\r\n    },\r\n    previewTable: {\r\n      width: '100%',\r\n      borderCollapse: 'collapse',\r\n      marginTop: '10px'\r\n    },\r\n    tableHead: {\r\n      backgroundColor: '#444',\r\n      textAlign: 'left'\r\n    },\r\n    tableRow: {\r\n      borderBottom: '1px solid #444'\r\n    },\r\n    tableCell: {\r\n      padding: '8px',\r\n      borderBottom: '1px solid #444'\r\n    },\r\n    selectedParameters: {\r\n      marginTop: '20px'\r\n    },\r\n    pumpRatioWarning: {\r\n      marginBottom: '20px',\r\n      padding: '10px',\r\n      backgroundColor: '#444',\r\n      borderRadius: '4px',\r\n      border: '1px solid #555'\r\n    },\r\n    select: {\r\n      padding: '5px',\r\n      width: '100px',\r\n      backgroundColor: '#333',\r\n      border: '1px solid #555',\r\n      color: 'white',\r\n      borderRadius: '3px'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.header}>\r\n        <h2>Response Surface Methodology (Box–Behnken design)</h2>\r\n        <p>Select parameters to include in the design and set their ranges</p>\r\n      </div>\r\n\r\n      <div style={styles.content}>\r\n        <div style={styles.leftPanel}>\r\n          <h3>Available Parameters</h3>\r\n          <p>Select at least 2 parameters for the design</p>\r\n          \r\n          <div style={styles.parameterList}>\r\n            {availableParameters.map(param => (\r\n              <div \r\n                key={param.id}\r\n                style={{\r\n                  ...styles.parameterItem,\r\n                  ...(selectedParameters.includes(param.id) ? styles.selected : {})\r\n                }}\r\n              >\r\n                <div style={styles.paramHeader}>\r\n                  <label>\r\n                    <input \r\n                      type=\"checkbox\"\r\n                      checked={selectedParameters.includes(param.id)}\r\n                      onChange={() => toggleParameterSelection(param.id)}\r\n                    />\r\n                    {param.nodeName} - {param.label}\r\n                  </label>\r\n                </div>\r\n                \r\n                {selectedParameters.includes(param.id) && (\r\n                  <div style={styles.rangeInputs}>\r\n                    <div>\r\n                      <label>Min:</label>\r\n                      <input \r\n                        type=\"number\"\r\n                        style={styles.input}\r\n                        value={param.min}\r\n                        onChange={(e) => updateParameterRange(param.id, 'min', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label>Max:</label>\r\n                      <input \r\n                        type=\"number\"\r\n                        style={styles.input}\r\n                        value={param.max}\r\n                        onChange={(e) => updateParameterRange(param.id, 'max', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Pump ratio constraint info */}\r\n          {selectedParameters.some(id => {\r\n            const param = availableParameters.find(p => p.id === id);\r\n            return param && isPumpRatio(param.nodeType, param.name);\r\n          }) && (\r\n            <div style={{\r\n              padding: '10px',\r\n              marginBottom: '15px', \r\n              backgroundColor: currentPumpRatioSum > 0 ? '#2c2c2c' : '#442c2c',\r\n              border: `1px solid ${currentPumpRatioSum > 0 ? '#555' : '#a55'}`,\r\n              borderRadius: '4px'\r\n            }}>\r\n              <p>\r\n                <strong>Note:</strong> Pump ratios will be automatically normalized to ensure they sum to 1.\r\n              </p>\r\n              <div style={{ marginTop: '8px', display: 'flex', alignItems: 'center' }}>\r\n                <div>Current sum of max pump ratios: </div>\r\n                <div style={{ \r\n                  marginLeft: '8px',\r\n                  fontWeight: 'bold',\r\n                  color: currentPumpRatioSum > 0 ? '#4CAF50' : '#FF5252'\r\n                }}>\r\n                  {currentPumpRatioSum.toFixed(2)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div style={styles.buttonContainer}>\r\n            <button \r\n              style={buttonVariants.primaryButton}\r\n              onClick={generateDroplets}\r\n              disabled={selectedParameters.length < 2}\r\n            >\r\n              Generate Droplets\r\n            </button>\r\n            \r\n            <button \r\n              style={buttonVariants.secondaryButton}\r\n              onClick={handleProceed}\r\n              disabled={generatedDroplets.length === 0}\r\n            >\r\n              Proceed to Droplet Editor\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={styles.rightPanel}>\r\n          <h3>Design Preview</h3>\r\n          <p>Generated droplets: {generatedDroplets.length}</p>\r\n          \r\n          {dropletDesign.length > 0 && (\r\n            <div style={styles.designPreview}>\r\n              <p>Box-Behnken Design for selected parameters:</p>\r\n              \r\n              <table style={styles.previewTable}>\r\n                <thead style={styles.tableHead}>\r\n                  <tr>\r\n                    <th style={styles.tableCell}>Run</th>\r\n                    {selectedParameters.map(paramId => {\r\n                      const param = availableParameters.find(p => p.id === paramId);\r\n                      return (\r\n                        <th key={paramId} style={styles.tableCell}>\r\n                          {param.nodeName} - {param.label}\r\n                        </th>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {dropletDesign.map((point, index) => {\r\n                    // First, get the raw values from the design\r\n                    const rawValues = {};\r\n                    point.forEach((level, i) => {\r\n                      const paramId = selectedParameters[i];\r\n                      const param = availableParameters.find(p => p.id === paramId);\r\n                      const value = level === -1 ? param.min : (level === 1 ? param.max : (param.min + param.max) / 2);\r\n                      rawValues[paramId] = value;\r\n                    });\r\n\r\n                    // Check if we need to normalize pump ratios\r\n                    const pumpRatioParams = selectedParameters.filter(paramId => {\r\n                      const param = availableParameters.find(p => p.id === paramId);\r\n                      return param && isPumpRatio(param.nodeType, param.name);\r\n                    });\r\n\r\n                    // Normalize if needed\r\n                    if (pumpRatioParams.length > 1) {\r\n                      // Calculate sum\r\n                      let sum = 0;\r\n                      pumpRatioParams.forEach(paramId => {\r\n                        sum += rawValues[paramId] || 0;\r\n                      });\r\n                      \r\n                      // Normalize\r\n                      if (sum > 0) {\r\n                        pumpRatioParams.forEach(paramId => {\r\n                          rawValues[paramId] = (rawValues[paramId] || 0) / sum;\r\n                        });\r\n                      }\r\n                    }\r\n\r\n                    return (\r\n                      <tr key={index} style={styles.tableRow}>\r\n                        <td style={styles.tableCell}>{index + 1}</td>\r\n                        {point.map((level, i) => {\r\n                          const paramId = selectedParameters[i];\r\n                          const param = availableParameters.find(p => p.id === paramId);\r\n                          const isPumpRatioParam = isPumpRatio(param.nodeType, param.name);\r\n                          \r\n                          // Use normalized value for pump ratios\r\n                          const value = rawValues[paramId];\r\n                          const displayValue = value.toFixed(isPumpRatioParam ? 4 : 2);\r\n                          \r\n                          return (\r\n                            <td key={i} style={styles.tableCell}>\r\n                              {displayValue} \r\n                              {isPumpRatioParam ? '' : level === -1 ? ' (min)' : level === 1 ? ' (max)' : ' (mid)'}\r\n                              {isPumpRatioParam && (\r\n                                pumpRatioStrategy === 'single' && param.nodeId === balancingPumpId\r\n                                ? <span style={{ color: '#FF9800' }}> (balancing)</span>\r\n                                : <span style={{ color: '#4CAF50' }}> (normalized)</span>\r\n                              )}\r\n                            </td>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {selectedParameters.length > 0 && (\r\n        <div style={styles.selectedParameters}>\r\n          <h3>Selected Parameters</h3>\r\n          <p>Adjust ranges for selected parameters:</p>\r\n\r\n          {/* Display warning if multiple pump ratios are selected */}\r\n          {hasPumpRatios && (\r\n            <div style={styles.pumpRatioWarning}>\r\n              <h4>Pump Ratio Normalization</h4>\r\n              <p>Multiple pump ratios selected. Choose how to normalize:</p>\r\n              \r\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', marginTop: '10px' }}>\r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"ratioStrategy\"\r\n                      value=\"distribute\"\r\n                      checked={pumpRatioStrategy === 'distribute'}\r\n                      onChange={() => handleStrategyChange('distribute')}\r\n                    />\r\n                    Distribute proportionally across all pumps\r\n                  </label>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"ratioStrategy\"\r\n                      value=\"single\"\r\n                      checked={pumpRatioStrategy === 'single'}\r\n                      onChange={() => handleStrategyChange('single')}\r\n                    />\r\n                    Adjust a single pump to balance\r\n                  </label>\r\n                </div>\r\n                \r\n                {pumpRatioStrategy === 'single' && availablePumps.length > 0 && (\r\n                  <div style={{ marginLeft: '20px', marginTop: '5px' }}>\r\n                    <label>Select pump to adjust: </label>\r\n                    <select\r\n                      value={balancingPumpId || ''}\r\n                      onChange={(e) => handleBalancingPumpChange(e.target.value)}\r\n                      style={styles.select}\r\n                    >\r\n                      {availablePumps.map(pump => (\r\n                        <option key={pump.id} value={pump.id}>\r\n                          {pump.label}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {selectedParameters.map(paramId => {\r\n            const param = availableParameters.find(p => p.id === paramId);\r\n            return (\r\n              <div key={paramId} style={styles.parameterItem}>\r\n                <div style={styles.paramHeader}>\r\n                  <label>\r\n                    <input \r\n                      type=\"checkbox\"\r\n                      checked={selectedParameters.includes(paramId)}\r\n                      onChange={() => toggleParameterSelection(paramId)}\r\n                    />\r\n                    {param.nodeName} - {param.label}\r\n                  </label>\r\n                </div>\r\n                \r\n                {selectedParameters.includes(paramId) && (\r\n                  <div style={styles.rangeInputs}>\r\n                    <div>\r\n                      <label>Min:</label>\r\n                      <input \r\n                        type=\"number\"\r\n                        style={styles.input}\r\n                        value={param.min}\r\n                        onChange={(e) => updateParameterRange(paramId, 'min', e.target.value)}\r\n                      />\r\n                    </div>\r\n  <div>\r\n                      <label>Max:</label>\r\n                      <input \r\n                        type=\"number\"\r\n                        style={styles.input}\r\n                        value={param.max}\r\n                        onChange={(e) => updateParameterRange(paramId, 'max', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n  </div>\r\n);\r\n};\r\n\r\nexport default ResponseSurfaceGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}