{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\DropletGenerator\\\\InterpolationGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\n\n// Utility function for deep cloning objects\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst deepClone = obj => JSON.parse(JSON.stringify(obj));\n\n// Get parameter range based on node type and parameter name\nconst getParameterRange = (nodeType, paramName) => {\n  var _ranges$nodeType;\n  const ranges = {\n    pump: {\n      'Flow Rate': {\n        min: 0.1,\n        max: 10,\n        unit: 'Î¼L/s'\n      },\n      'Ratio': {\n        min: 1,\n        max: 100,\n        unit: '%'\n      }\n    },\n    thermostat: {\n      'Temperature': {\n        min: 4,\n        max: 95,\n        unit: 'Â°C'\n      }\n    },\n    detector: {\n      'Integration Time': {\n        min: 0.1,\n        max: 10,\n        unit: 's'\n      }\n    }\n  };\n  return ((_ranges$nodeType = ranges[nodeType]) === null || _ranges$nodeType === void 0 ? void 0 : _ranges$nodeType[paramName]) || {\n    min: 0,\n    max: 100,\n    unit: ''\n  };\n};\n\n// Function to generate evenly spaced values across a range\nconst generateInterpolatedValues = (min, max, steps) => {\n  if (steps <= 1) return [min];\n  const values = [];\n  const stepSize = (max - min) / (steps - 1);\n  for (let i = 0; i < steps; i++) {\n    // Round to 3 decimal places to avoid floating point issues\n    const value = Math.round((min + i * stepSize) * 1000) / 1000;\n    values.push(value);\n  }\n  return values;\n};\n\n// Add a helper function to check if parameter is a pump ratio\nconst isPumpRatio = (nodeType, paramName) => {\n  return nodeType === 'pump' && (paramName === 'Ratio' || paramName === 'ratio');\n};\nconst InterpolationGenerator = ({\n  nodes,\n  selectedCarrierPumps,\n  onNext\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  // State variables\n  const [availableParameters, setAvailableParameters] = useState([]);\n  const [selectedParameter, setSelectedParameter] = useState(null);\n  const [parameterRange, setParameterRange] = useState({\n    min: 0,\n    max: 100\n  });\n  const [steps, setSteps] = useState(5);\n  const [generatedDroplets, setGeneratedDroplets] = useState([]);\n\n  // Add state for pump ratio adjustment strategy\n  const [isPumpRatioSelected, setIsPumpRatioSelected] = useState(false);\n  const [pumpRatioStrategy, setPumpRatioStrategy] = useState('distribute'); // 'distribute' or 'single'\n  const [balancingPumpId, setBalancingPumpId] = useState(null);\n  const [availablePumps, setAvailablePumps] = useState([]);\n\n  // Initialize available parameters based on nodes\n  useEffect(() => {\n    const params = [];\n    nodes.forEach(node => {\n      // Only consider nodes with parameters\n      if (node.data && node.data.parameters && node.data.parameters.length > 0) {\n        // Skip carrier pumps for parameter selection\n        if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\n          return;\n        }\n\n        // Use the actual parameters from the node\n        node.data.parameters.forEach(param => {\n          params.push({\n            id: `${node.id}-${param.name}`,\n            nodeId: node.id,\n            nodeLabel: node.data.label || node.id,\n            nodeType: node.data.type,\n            name: param.name,\n            label: param.label || param.name,\n            default: param.default || 0,\n            min: param.min !== undefined ? param.min : 0,\n            max: param.max !== undefined ? param.max : 100,\n            unit: param.unit || ''\n          });\n        });\n      }\n    });\n    setAvailableParameters(params);\n    console.log(\"Available parameters:\", params); // Debug log\n  }, [nodes, selectedCarrierPumps]);\n\n  // Get parameters for a node type - not used anymore since we're using actual node parameters\n  const getNodeParameters = nodeType => {\n    switch (nodeType) {\n      case 'pump':\n        return ['Flow Rate', 'Ratio'];\n      case 'thermostat':\n        return ['Temperature'];\n      case 'detector':\n        return ['Integration Time'];\n      default:\n        return [];\n    }\n  };\n\n  // Select a parameter\n  const selectParameter = parameterId => {\n    const param = availableParameters.find(p => p.id === parameterId);\n    setSelectedParameter(param);\n    if (param) {\n      // Set initial range from the parameter's default range\n      setParameterRange({\n        min: param.min,\n        max: param.max\n      });\n\n      // Check if selected parameter is a pump ratio\n      const isPumpRatio = param.nodeType === 'pump' && (param.name === 'Ratio' || param.name === 'ratio');\n      setIsPumpRatioSelected(isPumpRatio);\n\n      // If it's a pump ratio, identify other available pumps for balancing\n      if (isPumpRatio) {\n        const otherPumps = nodes.filter(node => node.data.type === 'pump' && node.id !== param.nodeId && !selectedCarrierPumps.includes(node.id)).map(node => ({\n          id: node.id,\n          label: node.data.label || node.id\n        }));\n        setAvailablePumps(otherPumps);\n        if (otherPumps.length > 0) {\n          setBalancingPumpId(otherPumps[0].id);\n        }\n      }\n    }\n  };\n\n  // Update parameter range\n  const updateParameterRange = (type, value) => {\n    setParameterRange(prev => ({\n      ...prev,\n      [type]: Number(value)\n    }));\n  };\n\n  // Update number of steps\n  const updateSteps = value => {\n    const numSteps = Math.max(2, parseInt(value) || 2); // Minimum 2 steps\n    setSteps(numSteps);\n  };\n\n  // Handle strategy change\n  const handleStrategyChange = strategy => {\n    setPumpRatioStrategy(strategy);\n  };\n\n  // Handle balancing pump change\n  const handleBalancingPumpChange = pumpId => {\n    setBalancingPumpId(pumpId);\n  };\n\n  // Generate droplets with interpolated parameter values\n  const generateDroplets = () => {\n    if (!selectedParameter) {\n      alert('Please select a parameter first');\n      return;\n    }\n    const {\n      min,\n      max\n    } = parameterRange;\n    if (min >= max) {\n      alert('Minimum value must be less than maximum value');\n      return;\n    }\n\n    // Generate interpolated values for the parameter\n    const values = generateInterpolatedValues(min, max, steps);\n\n    // Create droplets with the interpolated parameter values\n    const droplets = values.map((value, index) => {\n      // Initialize a parameters array\n      const parameters = [];\n\n      // Special handling for pump ratios\n      const isPumpRatioParam = isPumpRatio(selectedParameter.nodeType, selectedParameter.name);\n      let remainingRatio = 0;\n      let otherPumpParameters = [];\n\n      // If this is a pump ratio, we need to collect all pump ratio params first\n      if (isPumpRatioParam) {\n        // Gather all pump ratio parameters\n        nodes.forEach(node => {\n          // Skip carrier pumps\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\n            return;\n          }\n\n          // Only include pump nodes with ratio parameters\n          if (node.data.type === 'pump' && node.data.parameters && node.data.parameters.length > 0) {\n            const ratioParam = node.data.parameters.find(p => p.name === 'Ratio' || p.name === 'ratio');\n            if (ratioParam) {\n              // For the selected pump, use the interpolated value\n              if (node.id === selectedParameter.nodeId) {\n                parameters.push({\n                  nodeId: node.id,\n                  nodeName: node.data.label || node.id,\n                  name: selectedParameter.name,\n                  default: selectedParameter.default,\n                  value: value\n                });\n                remainingRatio = 1 - value; // The remaining ratio to distribute\n              } else {\n                // Save other pump parameters for later adjustment\n                otherPumpParameters.push({\n                  nodeId: node.id,\n                  nodeName: node.data.label || node.id,\n                  name: ratioParam.name,\n                  default: ratioParam.default !== undefined ? ratioParam.default : 0,\n                  originalValue: ratioParam.default !== undefined ? ratioParam.default : 0\n                });\n              }\n            }\n          }\n        });\n\n        // Apply the balancing strategy\n        if (otherPumpParameters.length > 0) {\n          if (pumpRatioStrategy === 'single' && balancingPumpId) {\n            // Strategy 1: Adjust a single pump\n            otherPumpParameters = otherPumpParameters.map(param => {\n              if (param.nodeId === balancingPumpId) {\n                // This is the balancing pump, adjust its value\n                return {\n                  ...param,\n                  value: Math.max(0, remainingRatio) // Ensure non-negative\n                };\n              } else {\n                // Keep original value for other pumps\n                return {\n                  ...param,\n                  value: param.originalValue\n                };\n              }\n            });\n          } else {\n            // Strategy 2: Distribute proportionally across all other pumps\n\n            // Calculate the sum of original values\n            const originalSum = otherPumpParameters.reduce((sum, param) => sum + param.originalValue, 0);\n            if (originalSum === 0) {\n              // If all other pumps are 0, distribute equally\n              const equalShare = remainingRatio / otherPumpParameters.length;\n              otherPumpParameters = otherPumpParameters.map(param => ({\n                ...param,\n                value: equalShare\n              }));\n            } else {\n              // Distribute proportionally based on original values\n              otherPumpParameters = otherPumpParameters.map(param => ({\n                ...param,\n                value: param.originalValue / originalSum * remainingRatio\n              }));\n            }\n          }\n\n          // Add the adjusted pump ratio parameters\n          parameters.push(...otherPumpParameters);\n        }\n\n        // Add all non-ratio parameters from pump nodes\n        nodes.forEach(node => {\n          // Skip carrier pumps\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\n            return;\n          }\n          if (node.data.type === 'pump' && node.data.parameters && node.data.parameters.length > 0) {\n            node.data.parameters.forEach(param => {\n              // Skip ratio parameters as they're already handled\n              if (param.name === 'Ratio' || param.name === 'ratio') return;\n              parameters.push({\n                nodeId: node.id,\n                nodeName: node.data.label || node.id,\n                name: param.name,\n                default: param.default !== undefined ? param.default : 0,\n                value: param.default !== undefined ? param.default : 0\n              });\n            });\n          }\n        });\n\n        // Add parameters from non-pump nodes\n        nodes.forEach(node => {\n          // Skip pump nodes (already handled)\n          if (node.data.type === 'pump') return;\n\n          // Skip carrier pumps\n          if (selectedCarrierPumps.includes(node.id)) return;\n\n          // Include parameters from other nodes with their default values\n          if (node.data && node.data.parameters && node.data.parameters.length > 0) {\n            node.data.parameters.forEach(param => {\n              parameters.push({\n                nodeId: node.id,\n                nodeName: node.data.label || node.id,\n                name: param.name,\n                default: param.default !== undefined ? param.default : 0,\n                value: param.default !== undefined ? param.default : 0\n              });\n            });\n          }\n        });\n      } else {\n        // Handle non-pump-ratio parameters (original logic)\n        // Add the interpolated parameter\n        parameters.push({\n          nodeId: selectedParameter.nodeId,\n          nodeName: selectedParameter.nodeLabel,\n          name: selectedParameter.name,\n          default: selectedParameter.default,\n          value: value\n        });\n\n        // Add other node parameters with default values\n        nodes.forEach(node => {\n          // Skip carrier pumps\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\n            return;\n          }\n\n          // Skip the parameter we're interpolating\n          if (node.id === selectedParameter.nodeId) {\n            // Add other parameters from the same node (if any)\n            if (node.data && node.data.parameters && node.data.parameters.length > 0) {\n              node.data.parameters.forEach(param => {\n                // Skip the parameter we're already interpolating\n                if (param.name === selectedParameter.name) return;\n                parameters.push({\n                  nodeId: node.id,\n                  nodeName: node.data.label || node.id,\n                  name: param.name,\n                  default: param.default !== undefined ? param.default : 0,\n                  value: param.default !== undefined ? param.default : 0\n                });\n              });\n            }\n            return;\n          }\n\n          // Include parameters from other nodes with their default values\n          if (node.data && node.data.parameters && node.data.parameters.length > 0) {\n            node.data.parameters.forEach(param => {\n              parameters.push({\n                nodeId: node.id,\n                nodeName: node.data.label || node.id,\n                name: param.name,\n                default: param.default !== undefined ? param.default : 0,\n                value: param.default !== undefined ? param.default : 0\n              });\n            });\n          }\n        });\n      }\n      return {\n        id: `interpolated-${Date.now()}-${index}`,\n        parameters: parameters\n      };\n    });\n    setGeneratedDroplets(droplets);\n    console.log(\"Generated droplets:\", droplets); // Debug log\n  };\n\n  // Update the table to display correctly with the new format\n  const getParameterValue = (droplet, nodeId, paramName) => {\n    const param = droplet.parameters.find(p => p.nodeId === nodeId && p.name === paramName);\n    return param ? param.value : null;\n  };\n\n  // Handle proceeding to the next step\n  const handleProceed = () => {\n    if (generatedDroplets.length === 0) {\n      alert('Please generate droplets first');\n      return;\n    }\n    onNext(generatedDroplets);\n  };\n\n  // Styles\n  const styles = {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: '20px',\n      height: '100%',\n      width: '100%',\n      maxWidth: '100%',\n      ...backgroundVariants.mainBackground\n    },\n    header: {\n      marginBottom: '20px',\n      width: '100%'\n    },\n    content: {\n      display: 'flex',\n      gap: '20px',\n      height: 'calc(100% - 80px)',\n      width: '100%',\n      overflow: 'hidden'\n    },\n    leftPanel: {\n      flex: '0 0 25%',\n      minWidth: '300px',\n      maxWidth: '400px',\n      display: 'flex',\n      flexDirection: 'column',\n      ...backgroundVariants.panelBackground,\n      padding: '15px',\n      borderRadius: '4px',\n      overflow: 'auto'\n    },\n    rightPanel: {\n      flex: '1 1 75%',\n      maxWidth: '900px',\n      display: 'flex',\n      flexDirection: 'column',\n      ...backgroundVariants.panelBackground,\n      padding: '15px',\n      borderRadius: '4px',\n      overflow: 'auto'\n    },\n    parameterList: {\n      marginTop: '10px',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '10px',\n      width: '100%'\n    },\n    parameterItem: {\n      padding: '10px',\n      borderRadius: '4px',\n      background: 'rgba(255, 255, 255, 0.1)',\n      cursor: 'pointer',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    selected: {\n      background: 'rgba(66, 153, 225, 0.3)',\n      border: '1px solid rgba(66, 153, 225, 0.5)'\n    },\n    rangeControl: {\n      marginTop: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '10px',\n      width: '100%'\n    },\n    inputGroup: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px',\n      width: '100%'\n    },\n    input: {\n      flex: 1,\n      padding: '8px',\n      borderRadius: '4px',\n      border: 'none',\n      ...backgroundVariants.inputBackground\n    },\n    buttonGroup: {\n      display: 'flex',\n      gap: '10px',\n      marginTop: '20px',\n      width: '100%'\n    },\n    dropletSection: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      width: '100%'\n    },\n    tableContainer: {\n      flex: '1 1 auto',\n      minWidth: '300px',\n      maxWidth: '600px',\n      width: '60%'\n    },\n    nextButtonContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      paddingLeft: '20px',\n      paddingTop: '30px'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'collapse',\n      marginTop: '10px',\n      tableLayout: 'fixed'\n    },\n    tableHead: {\n      backgroundColor: '#444',\n      textAlign: 'left'\n    },\n    tableRow: {\n      borderBottom: '1px solid #444'\n    },\n    tableCell: {\n      padding: '8px 12px',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n      maxWidth: '200px',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    ratioAdjustment: {\n      marginTop: '20px',\n      padding: '20px',\n      border: '1px solid rgba(255, 255, 255, 0.1)',\n      borderRadius: '4px'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen-wide-component\",\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Parameter Interpolation Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a parameter and generate droplets with interpolated values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.leftPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Parameters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select one parameter to interpolate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.parameterList,\n          children: availableParameters.map(param => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              ...styles.parameterItem,\n              ...((selectedParameter === null || selectedParameter === void 0 ? void 0 : selectedParameter.id) === param.id ? styles.selected : {})\n            },\n            onClick: () => selectParameter(param.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: param.nodeLabel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 19\n              }, this), \" (\", param.nodeType, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: param.label || param.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Range: \", param.min, \" - \", param.max, \" \", param.unit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this)]\n          }, param.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), selectedParameter && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.rangeControl,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Parameter Range and Steps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: parameterRange.min,\n              onChange: e => updateParameterRange('min', e.target.value),\n              style: styles.input,\n              step: \"0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedParameter.unit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: parameterRange.max,\n              onChange: e => updateParameterRange('max', e.target.value),\n              style: styles.input,\n              step: \"0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedParameter.unit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Steps:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: steps,\n              onChange: e => updateSteps(e.target.value),\n              style: styles.input,\n              min: \"2\",\n              max: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.buttonGroup,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: generateDroplets,\n              style: buttonVariants.primaryButton,\n              children: \"Generate Droplets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this), selectedParameter && isPumpRatioSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.ratioAdjustment,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Pump Ratio Balancing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"When changing a pump ratio, other ratios must be adjusted to keep the sum at 1.0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '10px',\n              marginTop: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"ratioStrategy\",\n                  value: \"distribute\",\n                  checked: pumpRatioStrategy === 'distribute',\n                  onChange: () => handleStrategyChange('distribute')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 21\n                }, this), \"Distribute proportionally across all other pumps\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"ratioStrategy\",\n                  value: \"single\",\n                  checked: pumpRatioStrategy === 'single',\n                  onChange: () => handleStrategyChange('single')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 21\n                }, this), \"Adjust a single pump to balance\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this), pumpRatioStrategy === 'single' && availablePumps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: '20px',\n                marginTop: '5px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Select pump to adjust: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: balancingPumpId,\n                onChange: e => handleBalancingPumpChange(e.target.value),\n                style: styles.input,\n                children: availablePumps.map(pump => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: pump.id,\n                  children: pump.label\n                }, pump.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 667,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.rightPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Generated Droplets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this), generatedDroplets.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Generated \", generatedDroplets.length, \" droplets with interpolated values:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.dropletSection,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.tableContainer,\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                style: styles.table,\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  style: styles.tableHead,\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      style: {\n                        ...styles.tableCell,\n                        width: '30%'\n                      },\n                      children: \"Droplet #\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 691,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      style: {\n                        ...styles.tableCell,\n                        width: '70%'\n                      },\n                      children: selectedParameter.label || selectedParameter.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 692,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 690,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: generatedDroplets.map((droplet, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    style: styles.tableRow,\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      style: styles.tableCell,\n                      children: [\"Droplet \", index + 1]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 700,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      style: styles.tableCell,\n                      children: [getParameterValue(droplet, selectedParameter.nodeId, selectedParameter.name), \" \", selectedParameter.unit]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 701,\n                      columnNumber: 27\n                    }, this)]\n                  }, droplet.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.nextButtonContainer,\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleProceed,\n                style: {\n                  ...buttonVariants.primaryButton,\n                  fontSize: '16px',\n                  padding: '10px 20px'\n                },\n                children: \"Next \\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No droplets generated yet. Select a parameter, set range and steps, then click \\\"Generate Droplets\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 542,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpolationGenerator, \"I0lrBSWGfSPtrR/oo+/V1xt4iaE=\", false, function () {\n  return [useButtonStyles];\n});\n_c = InterpolationGenerator;\nexport default InterpolationGenerator;\nvar _c;\n$RefreshReg$(_c, \"InterpolationGenerator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useButtonStyles","backgroundVariants","jsxDEV","_jsxDEV","Fragment","_Fragment","deepClone","obj","JSON","parse","stringify","getParameterRange","nodeType","paramName","_ranges$nodeType","ranges","pump","min","max","unit","thermostat","detector","generateInterpolatedValues","steps","values","stepSize","i","value","Math","round","push","isPumpRatio","InterpolationGenerator","nodes","selectedCarrierPumps","onNext","_s","buttonVariants","availableParameters","setAvailableParameters","selectedParameter","setSelectedParameter","parameterRange","setParameterRange","setSteps","generatedDroplets","setGeneratedDroplets","isPumpRatioSelected","setIsPumpRatioSelected","pumpRatioStrategy","setPumpRatioStrategy","balancingPumpId","setBalancingPumpId","availablePumps","setAvailablePumps","params","forEach","node","data","parameters","length","type","includes","id","param","name","nodeId","nodeLabel","label","default","undefined","console","log","getNodeParameters","selectParameter","parameterId","find","p","otherPumps","filter","map","updateParameterRange","prev","Number","updateSteps","numSteps","parseInt","handleStrategyChange","strategy","handleBalancingPumpChange","pumpId","generateDroplets","alert","droplets","index","isPumpRatioParam","remainingRatio","otherPumpParameters","ratioParam","nodeName","originalValue","originalSum","reduce","sum","equalShare","Date","now","getParameterValue","droplet","handleProceed","styles","container","display","flexDirection","padding","height","width","maxWidth","mainBackground","header","marginBottom","content","gap","overflow","leftPanel","flex","minWidth","panelBackground","borderRadius","rightPanel","parameterList","marginTop","parameterItem","background","cursor","whiteSpace","textOverflow","selected","border","rangeControl","inputGroup","alignItems","input","inputBackground","buttonGroup","dropletSection","justifyContent","tableContainer","nextButtonContainer","paddingLeft","paddingTop","table","borderCollapse","tableLayout","tableHead","backgroundColor","textAlign","tableRow","borderBottom","tableCell","wordWrap","ratioAdjustment","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","target","step","primaryButton","checked","marginLeft","fontSize","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/DropletGenerator/InterpolationGenerator.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\n\r\n// Utility function for deep cloning objects\r\nconst deepClone = (obj) => JSON.parse(JSON.stringify(obj));\r\n\r\n// Get parameter range based on node type and parameter name\r\nconst getParameterRange = (nodeType, paramName) => {\r\n  const ranges = {\r\n    pump: {\r\n      'Flow Rate': { min: 0.1, max: 10, unit: 'Î¼L/s' },\r\n      'Ratio': { min: 1, max: 100, unit: '%' }\r\n    },\r\n    thermostat: {\r\n      'Temperature': { min: 4, max: 95, unit: 'Â°C' }\r\n    },\r\n    detector: {\r\n      'Integration Time': { min: 0.1, max: 10, unit: 's' }\r\n    }\r\n  };\r\n  \r\n  return ranges[nodeType]?.[paramName] || { min: 0, max: 100, unit: '' };\r\n};\r\n\r\n// Function to generate evenly spaced values across a range\r\nconst generateInterpolatedValues = (min, max, steps) => {\r\n  if (steps <= 1) return [min];\r\n  \r\n  const values = [];\r\n  const stepSize = (max - min) / (steps - 1);\r\n  \r\n  for (let i = 0; i < steps; i++) {\r\n    // Round to 3 decimal places to avoid floating point issues\r\n    const value = Math.round((min + i * stepSize) * 1000) / 1000;\r\n    values.push(value);\r\n  }\r\n  \r\n  return values;\r\n};\r\n\r\n// Add a helper function to check if parameter is a pump ratio\r\nconst isPumpRatio = (nodeType, paramName) => {\r\n  return nodeType === 'pump' && (paramName === 'Ratio' || paramName === 'ratio');\r\n};\r\n\r\nconst InterpolationGenerator = ({ nodes, selectedCarrierPumps, onNext }) => {\r\n  const buttonVariants = useButtonStyles();\r\n  // State variables\r\n  const [availableParameters, setAvailableParameters] = useState([]);\r\n  const [selectedParameter, setSelectedParameter] = useState(null);\r\n  const [parameterRange, setParameterRange] = useState({ min: 0, max: 100 });\r\n  const [steps, setSteps] = useState(5);\r\n  const [generatedDroplets, setGeneratedDroplets] = useState([]);\r\n  \r\n  // Add state for pump ratio adjustment strategy\r\n  const [isPumpRatioSelected, setIsPumpRatioSelected] = useState(false);\r\n  const [pumpRatioStrategy, setPumpRatioStrategy] = useState('distribute'); // 'distribute' or 'single'\r\n  const [balancingPumpId, setBalancingPumpId] = useState(null);\r\n  const [availablePumps, setAvailablePumps] = useState([]);\r\n  \r\n  // Initialize available parameters based on nodes\r\n  useEffect(() => {\r\n    const params = [];\r\n    nodes.forEach(node => {\r\n      // Only consider nodes with parameters\r\n      if (node.data && node.data.parameters && node.data.parameters.length > 0) {\r\n        // Skip carrier pumps for parameter selection\r\n        if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\r\n          return;\r\n        }\r\n        \r\n        // Use the actual parameters from the node\r\n        node.data.parameters.forEach(param => {\r\n          params.push({\r\n            id: `${node.id}-${param.name}`,\r\n            nodeId: node.id,\r\n            nodeLabel: node.data.label || node.id,\r\n            nodeType: node.data.type,\r\n            name: param.name,\r\n            label: param.label || param.name,\r\n            default: param.default || 0,\r\n            min: param.min !== undefined ? param.min : 0,\r\n            max: param.max !== undefined ? param.max : 100,\r\n            unit: param.unit || ''\r\n          });\r\n        });\r\n      }\r\n    });\r\n    \r\n    setAvailableParameters(params);\r\n    console.log(\"Available parameters:\", params); // Debug log\r\n  }, [nodes, selectedCarrierPumps]);\r\n  \r\n  // Get parameters for a node type - not used anymore since we're using actual node parameters\r\n  const getNodeParameters = (nodeType) => {\r\n    switch (nodeType) {\r\n      case 'pump':\r\n        return ['Flow Rate', 'Ratio'];\r\n      case 'thermostat':\r\n        return ['Temperature'];\r\n      case 'detector':\r\n        return ['Integration Time'];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n  \r\n  // Select a parameter\r\n  const selectParameter = (parameterId) => {\r\n    const param = availableParameters.find(p => p.id === parameterId);\r\n    setSelectedParameter(param);\r\n    \r\n    if (param) {\r\n      // Set initial range from the parameter's default range\r\n      setParameterRange({\r\n        min: param.min,\r\n        max: param.max\r\n      });\r\n      \r\n      // Check if selected parameter is a pump ratio\r\n      const isPumpRatio = param.nodeType === 'pump' && (param.name === 'Ratio' || param.name === 'ratio');\r\n      setIsPumpRatioSelected(isPumpRatio);\r\n      \r\n      // If it's a pump ratio, identify other available pumps for balancing\r\n      if (isPumpRatio) {\r\n        const otherPumps = nodes.filter(node => \r\n          node.data.type === 'pump' && \r\n          node.id !== param.nodeId &&\r\n          !selectedCarrierPumps.includes(node.id)\r\n        ).map(node => ({\r\n          id: node.id,\r\n          label: node.data.label || node.id\r\n        }));\r\n        \r\n        setAvailablePumps(otherPumps);\r\n        if (otherPumps.length > 0) {\r\n          setBalancingPumpId(otherPumps[0].id);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Update parameter range\r\n  const updateParameterRange = (type, value) => {\r\n    setParameterRange(prev => ({\r\n      ...prev,\r\n      [type]: Number(value)\r\n    }));\r\n  };\r\n  \r\n  // Update number of steps\r\n  const updateSteps = (value) => {\r\n    const numSteps = Math.max(2, parseInt(value) || 2); // Minimum 2 steps\r\n    setSteps(numSteps);\r\n  };\r\n  \r\n  // Handle strategy change\r\n  const handleStrategyChange = (strategy) => {\r\n    setPumpRatioStrategy(strategy);\r\n  };\r\n  \r\n  // Handle balancing pump change\r\n  const handleBalancingPumpChange = (pumpId) => {\r\n    setBalancingPumpId(pumpId);\r\n  };\r\n  \r\n  // Generate droplets with interpolated parameter values\r\n  const generateDroplets = () => {\r\n    if (!selectedParameter) {\r\n      alert('Please select a parameter first');\r\n      return;\r\n    }\r\n    \r\n    const { min, max } = parameterRange;\r\n    if (min >= max) {\r\n      alert('Minimum value must be less than maximum value');\r\n      return;\r\n    }\r\n    \r\n    // Generate interpolated values for the parameter\r\n    const values = generateInterpolatedValues(min, max, steps);\r\n    \r\n    // Create droplets with the interpolated parameter values\r\n    const droplets = values.map((value, index) => {\r\n      // Initialize a parameters array\r\n      const parameters = [];\r\n      \r\n      // Special handling for pump ratios\r\n      const isPumpRatioParam = isPumpRatio(selectedParameter.nodeType, selectedParameter.name);\r\n      let remainingRatio = 0;\r\n      let otherPumpParameters = [];\r\n      \r\n      // If this is a pump ratio, we need to collect all pump ratio params first\r\n      if (isPumpRatioParam) {\r\n        // Gather all pump ratio parameters\r\n        nodes.forEach(node => {\r\n          // Skip carrier pumps\r\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\r\n            return;\r\n          }\r\n          \r\n          // Only include pump nodes with ratio parameters\r\n          if (node.data.type === 'pump' && node.data.parameters && node.data.parameters.length > 0) {\r\n            const ratioParam = node.data.parameters.find(p => \r\n              p.name === 'Ratio' || p.name === 'ratio'\r\n            );\r\n            \r\n            if (ratioParam) {\r\n              // For the selected pump, use the interpolated value\r\n              if (node.id === selectedParameter.nodeId) {\r\n                parameters.push({\r\n                  nodeId: node.id,\r\n                  nodeName: node.data.label || node.id,\r\n                  name: selectedParameter.name,\r\n                  default: selectedParameter.default,\r\n                  value: value\r\n                });\r\n                \r\n                remainingRatio = 1 - value; // The remaining ratio to distribute\r\n              } else {\r\n                // Save other pump parameters for later adjustment\r\n                otherPumpParameters.push({\r\n                  nodeId: node.id,\r\n                  nodeName: node.data.label || node.id,\r\n                  name: ratioParam.name,\r\n                  default: ratioParam.default !== undefined ? ratioParam.default : 0,\r\n                  originalValue: ratioParam.default !== undefined ? ratioParam.default : 0,\r\n                });\r\n              }\r\n            }\r\n          }\r\n        });\r\n        \r\n        // Apply the balancing strategy\r\n        if (otherPumpParameters.length > 0) {\r\n          if (pumpRatioStrategy === 'single' && balancingPumpId) {\r\n            // Strategy 1: Adjust a single pump\r\n            otherPumpParameters = otherPumpParameters.map(param => {\r\n              if (param.nodeId === balancingPumpId) {\r\n                // This is the balancing pump, adjust its value\r\n                return {\r\n                  ...param,\r\n                  value: Math.max(0, remainingRatio) // Ensure non-negative\r\n                };\r\n              } else {\r\n                // Keep original value for other pumps\r\n                return {\r\n                  ...param,\r\n                  value: param.originalValue\r\n                };\r\n              }\r\n            });\r\n          } else {\r\n            // Strategy 2: Distribute proportionally across all other pumps\r\n            \r\n            // Calculate the sum of original values\r\n            const originalSum = otherPumpParameters.reduce((sum, param) => sum + param.originalValue, 0);\r\n            \r\n            if (originalSum === 0) {\r\n              // If all other pumps are 0, distribute equally\r\n              const equalShare = remainingRatio / otherPumpParameters.length;\r\n              otherPumpParameters = otherPumpParameters.map(param => ({\r\n                ...param,\r\n                value: equalShare\r\n              }));\r\n            } else {\r\n              // Distribute proportionally based on original values\r\n              otherPumpParameters = otherPumpParameters.map(param => ({\r\n                ...param,\r\n                value: (param.originalValue / originalSum) * remainingRatio\r\n              }));\r\n            }\r\n          }\r\n          \r\n          // Add the adjusted pump ratio parameters\r\n          parameters.push(...otherPumpParameters);\r\n        }\r\n        \r\n        // Add all non-ratio parameters from pump nodes\r\n        nodes.forEach(node => {\r\n          // Skip carrier pumps\r\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\r\n            return;\r\n          }\r\n          \r\n          if (node.data.type === 'pump' && node.data.parameters && node.data.parameters.length > 0) {\r\n            node.data.parameters.forEach(param => {\r\n              // Skip ratio parameters as they're already handled\r\n              if (param.name === 'Ratio' || param.name === 'ratio') return;\r\n              \r\n              parameters.push({\r\n                nodeId: node.id,\r\n                nodeName: node.data.label || node.id,\r\n                name: param.name,\r\n                default: param.default !== undefined ? param.default : 0,\r\n                value: param.default !== undefined ? param.default : 0\r\n              });\r\n            });\r\n          }\r\n        });\r\n        \r\n        // Add parameters from non-pump nodes\r\n        nodes.forEach(node => {\r\n          // Skip pump nodes (already handled)\r\n          if (node.data.type === 'pump') return;\r\n          \r\n          // Skip carrier pumps\r\n          if (selectedCarrierPumps.includes(node.id)) return;\r\n          \r\n          // Include parameters from other nodes with their default values\r\n          if (node.data && node.data.parameters && node.data.parameters.length > 0) {\r\n            node.data.parameters.forEach(param => {\r\n              parameters.push({\r\n                nodeId: node.id,\r\n                nodeName: node.data.label || node.id,\r\n                name: param.name,\r\n                default: param.default !== undefined ? param.default : 0,\r\n                value: param.default !== undefined ? param.default : 0\r\n              });\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        // Handle non-pump-ratio parameters (original logic)\r\n        // Add the interpolated parameter\r\n        parameters.push({\r\n          nodeId: selectedParameter.nodeId,\r\n          nodeName: selectedParameter.nodeLabel,\r\n          name: selectedParameter.name,\r\n          default: selectedParameter.default,\r\n          value: value\r\n        });\r\n        \r\n        // Add other node parameters with default values\r\n        nodes.forEach(node => {\r\n          // Skip carrier pumps\r\n          if (node.data.type === 'pump' && selectedCarrierPumps.includes(node.id)) {\r\n            return;\r\n          }\r\n          \r\n          // Skip the parameter we're interpolating\r\n          if (node.id === selectedParameter.nodeId) {\r\n            // Add other parameters from the same node (if any)\r\n            if (node.data && node.data.parameters && node.data.parameters.length > 0) {\r\n              node.data.parameters.forEach(param => {\r\n                // Skip the parameter we're already interpolating\r\n                if (param.name === selectedParameter.name) return;\r\n                \r\n                parameters.push({\r\n                  nodeId: node.id,\r\n                  nodeName: node.data.label || node.id,\r\n                  name: param.name,\r\n                  default: param.default !== undefined ? param.default : 0,\r\n                  value: param.default !== undefined ? param.default : 0\r\n                });\r\n              });\r\n            }\r\n            return;\r\n          }\r\n          \r\n          // Include parameters from other nodes with their default values\r\n          if (node.data && node.data.parameters && node.data.parameters.length > 0) {\r\n            node.data.parameters.forEach(param => {\r\n              parameters.push({\r\n                nodeId: node.id,\r\n                nodeName: node.data.label || node.id,\r\n                name: param.name,\r\n                default: param.default !== undefined ? param.default : 0,\r\n                value: param.default !== undefined ? param.default : 0\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      return {\r\n        id: `interpolated-${Date.now()}-${index}`,\r\n        parameters: parameters\r\n      };\r\n    });\r\n    \r\n    setGeneratedDroplets(droplets);\r\n    console.log(\"Generated droplets:\", droplets); // Debug log\r\n  };\r\n  \r\n  // Update the table to display correctly with the new format\r\n  const getParameterValue = (droplet, nodeId, paramName) => {\r\n    const param = droplet.parameters.find(p => p.nodeId === nodeId && p.name === paramName);\r\n    return param ? param.value : null;\r\n  };\r\n  \r\n  // Handle proceeding to the next step\r\n  const handleProceed = () => {\r\n    if (generatedDroplets.length === 0) {\r\n      alert('Please generate droplets first');\r\n      return;\r\n    }\r\n    \r\n    onNext(generatedDroplets);\r\n  };\r\n  \r\n  // Styles\r\n  const styles = {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      padding: '20px',\r\n      height: '100%',\r\n      width: '100%',\r\n      maxWidth: '100%',\r\n      ...backgroundVariants.mainBackground\r\n    },\r\n    header: {\r\n      marginBottom: '20px',\r\n      width: '100%'\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      gap: '20px',\r\n      height: 'calc(100% - 80px)',\r\n      width: '100%',\r\n      overflow: 'hidden'\r\n    },\r\n    leftPanel: {\r\n      flex: '0 0 25%',\r\n      minWidth: '300px',\r\n      maxWidth: '400px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      ...backgroundVariants.panelBackground,\r\n      padding: '15px',\r\n      borderRadius: '4px',\r\n      overflow: 'auto'\r\n    },\r\n    rightPanel: {\r\n      flex: '1 1 75%',\r\n      maxWidth: '900px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      ...backgroundVariants.panelBackground,\r\n      padding: '15px',\r\n      borderRadius: '4px',\r\n      overflow: 'auto'\r\n    },\r\n    parameterList: {\r\n      marginTop: '10px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '10px',\r\n      width: '100%'\r\n    },\r\n    parameterItem: {\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      background: 'rgba(255, 255, 255, 0.1)',\r\n      cursor: 'pointer',\r\n      whiteSpace: 'nowrap',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis'\r\n    },\r\n    selected: {\r\n      background: 'rgba(66, 153, 225, 0.3)',\r\n      border: '1px solid rgba(66, 153, 225, 0.5)'\r\n    },\r\n    rangeControl: {\r\n      marginTop: '20px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '10px',\r\n      width: '100%'\r\n    },\r\n    inputGroup: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '10px',\r\n      width: '100%'\r\n    },\r\n    input: {\r\n      flex: 1,\r\n      padding: '8px',\r\n      borderRadius: '4px',\r\n      border: 'none',\r\n      ...backgroundVariants.inputBackground\r\n    },\r\n    buttonGroup: {\r\n      display: 'flex',\r\n      gap: '10px',\r\n      marginTop: '20px',\r\n      width: '100%'\r\n    },\r\n    dropletSection: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'flex-start',\r\n      width: '100%'\r\n    },\r\n    tableContainer: {\r\n      flex: '1 1 auto',\r\n      minWidth: '300px',\r\n      maxWidth: '600px',\r\n      width: '60%'\r\n    },\r\n    nextButtonContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      paddingLeft: '20px',\r\n      paddingTop: '30px'\r\n    },\r\n    table: {\r\n      width: '100%',\r\n      borderCollapse: 'collapse',\r\n      marginTop: '10px',\r\n      tableLayout: 'fixed'\r\n    },\r\n    tableHead: {\r\n      backgroundColor: '#444',\r\n      textAlign: 'left'\r\n    },\r\n    tableRow: {\r\n      borderBottom: '1px solid #444'\r\n    },\r\n    tableCell: {\r\n      padding: '8px 12px',\r\n      whiteSpace: 'normal',\r\n      wordWrap: 'break-word',\r\n      maxWidth: '200px',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis'\r\n    },\r\n    ratioAdjustment: {\r\n      marginTop: '20px',\r\n      padding: '20px',\r\n      border: '1px solid rgba(255, 255, 255, 0.1)',\r\n      borderRadius: '4px'\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"screen-wide-component\" style={styles.container}>\r\n      <div style={styles.header}>\r\n        <h2>Parameter Interpolation Generator</h2>\r\n        <p>Select a parameter and generate droplets with interpolated values</p>\r\n      </div>\r\n      \r\n      <div style={styles.content}>\r\n        <div style={styles.leftPanel}>\r\n          <h3>Available Parameters</h3>\r\n          <p>Select one parameter to interpolate</p>\r\n          \r\n          <div style={styles.parameterList}>\r\n            {availableParameters.map(param => (\r\n              <div \r\n                key={param.id}\r\n                style={{\r\n                  ...styles.parameterItem,\r\n                  ...(selectedParameter?.id === param.id ? styles.selected : {})\r\n                }}\r\n                onClick={() => selectParameter(param.id)}\r\n              >\r\n                <div>\r\n                  <strong>{param.nodeLabel}</strong> ({param.nodeType})\r\n                </div>\r\n                <div>{param.label || param.name}</div>\r\n                <div>\r\n                  Range: {param.min} - {param.max} {param.unit}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {selectedParameter && (\r\n            <div style={styles.rangeControl}>\r\n              <h3>Parameter Range and Steps</h3>\r\n              \r\n              <div style={styles.inputGroup}>\r\n                <label>Min:</label>\r\n                <input \r\n                  type=\"number\"\r\n                  value={parameterRange.min}\r\n                  onChange={(e) => updateParameterRange('min', e.target.value)}\r\n                  style={styles.input}\r\n                  step=\"0.1\"\r\n                />\r\n                <span>{selectedParameter.unit}</span>\r\n              </div>\r\n              \r\n              <div style={styles.inputGroup}>\r\n                <label>Max:</label>\r\n                <input \r\n                  type=\"number\"\r\n                  value={parameterRange.max}\r\n                  onChange={(e) => updateParameterRange('max', e.target.value)}\r\n                  style={styles.input}\r\n                  step=\"0.1\"\r\n                />\r\n                <span>{selectedParameter.unit}</span>\r\n              </div>\r\n              \r\n              <div style={styles.inputGroup}>\r\n                <label>Steps:</label>\r\n                <input \r\n                  type=\"number\"\r\n                  value={steps}\r\n                  onChange={(e) => updateSteps(e.target.value)}\r\n                  style={styles.input}\r\n                  min=\"2\"\r\n                  max=\"100\"\r\n                />\r\n              </div>\r\n              \r\n              <div style={styles.buttonGroup}>\r\n                <button\r\n                  onClick={generateDroplets}\r\n                  style={buttonVariants.primaryButton}\r\n                >\r\n                  Generate Droplets\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Add UI elements for pump ratio adjustment strategy */}\r\n          {selectedParameter && isPumpRatioSelected && (\r\n            <div style={styles.ratioAdjustment}>\r\n              <h3>Pump Ratio Balancing</h3>\r\n              <p>When changing a pump ratio, other ratios must be adjusted to keep the sum at 1.0</p>\r\n              \r\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', marginTop: '10px' }}>\r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"ratioStrategy\"\r\n                      value=\"distribute\"\r\n                      checked={pumpRatioStrategy === 'distribute'}\r\n                      onChange={() => handleStrategyChange('distribute')}\r\n                    />\r\n                    Distribute proportionally across all other pumps\r\n                  </label>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"ratioStrategy\"\r\n                      value=\"single\"\r\n                      checked={pumpRatioStrategy === 'single'}\r\n                      onChange={() => handleStrategyChange('single')}\r\n                    />\r\n                    Adjust a single pump to balance\r\n                  </label>\r\n                </div>\r\n                \r\n                {pumpRatioStrategy === 'single' && availablePumps.length > 0 && (\r\n                  <div style={{ marginLeft: '20px', marginTop: '5px' }}>\r\n                    <label>Select pump to adjust: </label>\r\n                    <select\r\n                      value={balancingPumpId}\r\n                      onChange={(e) => handleBalancingPumpChange(e.target.value)}\r\n                      style={styles.input}\r\n                    >\r\n                      {availablePumps.map(pump => (\r\n                        <option key={pump.id} value={pump.id}>\r\n                          {pump.label}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div style={styles.rightPanel}>\r\n          <h3>Generated Droplets</h3>\r\n          \r\n          {generatedDroplets.length > 0 ? (\r\n            <>\r\n              <p>Generated {generatedDroplets.length} droplets with interpolated values:</p>\r\n              \r\n              <div style={styles.dropletSection}>\r\n                <div style={styles.tableContainer}>\r\n                  <table style={styles.table}>\r\n                    <thead style={styles.tableHead}>\r\n                      <tr>\r\n                        <th style={{...styles.tableCell, width: '30%'}}>Droplet #</th>\r\n                        <th style={{...styles.tableCell, width: '70%'}}>\r\n                          {selectedParameter.label || selectedParameter.name}\r\n                        </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {generatedDroplets.map((droplet, index) => (\r\n                        <tr key={droplet.id} style={styles.tableRow}>\r\n                          <td style={styles.tableCell}>Droplet {index + 1}</td>\r\n                          <td style={styles.tableCell}>\r\n                            {getParameterValue(droplet, selectedParameter.nodeId, selectedParameter.name)} {selectedParameter.unit}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div style={styles.nextButtonContainer}>\r\n                  <button\r\n                    onClick={handleProceed}\r\n                    style={{\r\n                      ...buttonVariants.primaryButton,\r\n                      fontSize: '16px',\r\n                      padding: '10px 20px'\r\n                    }}\r\n                  >\r\n                    Next â\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <p>No droplets generated yet. Select a parameter, set range and steps, then click \"Generate Droplets\".</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InterpolationGenerator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}