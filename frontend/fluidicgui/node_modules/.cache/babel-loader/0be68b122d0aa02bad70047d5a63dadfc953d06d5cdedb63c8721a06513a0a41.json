{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\USBSpectrometer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport DraggablePanel from './DraggablePanel';\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport styles from './styles/USBSpectrometerStyles';\n\n// Import subcomponents\nimport CameraComponent from './DetectorComponents/CameraComponent';\nimport GraphComponent from './DetectorComponents/GraphComponent';\nimport WaterfallComponent from './DetectorComponents/WaterfallComponent';\nimport SettingsComponent from './DetectorComponents/SettingsComponent';\n\n// Available waterfall color schemes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst waterfallColorSchemeOptions = {\n  grayscale: 'Grayscale',\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis',\n  turbo: 'Turbo'\n};\nconst USBSpectrometer = ({\n  detector,\n  readings = [],\n  onClose,\n  initialPosition = {\n    x: 150,\n    y: 100\n  },\n  detectorId,\n  detectorName,\n  isVisible,\n  position,\n  onMove,\n  onResize,\n  detectorStatus\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [detectorReadings, setDetectorReadings] = useState([]);\n\n  // Panel resizing state\n  const [panelSize, setPanelSize] = useState({\n    width: 1100,\n    height: 750\n  });\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\n  const panelRef = useRef(null);\n\n  // Add state for resize feedback\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n\n  // Subcomponent visibility toggles\n  const [showCamera, setShowCamera] = useState(true);\n  const [showGraph, setShowGraph] = useState(true);\n  const [showWaterfall, setShowWaterfall] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Data state\n  const [lineData, setLineData] = useState(null);\n\n  // Save/load settings state\n  const [saveMessage, setSaveMessage] = useState('');\n  const [cameraSettings, setCameraSettings] = useState(null);\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\n\n  // Frame accumulation state (shared between Graph and Waterfall)\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\n  const [isAccumulating, setIsAccumulating] = useState(true);\n\n  // Waterfall color scheme state\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\n\n  // References to component methods\n  const cameraRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Handle frame accumulation change\n  const handleFrameAccumCountChange = count => {\n    setFrameAccumCount(count);\n  };\n\n  // Handle accumulation mode toggle\n  const handleAccumulationToggle = isActive => {\n    setIsAccumulating(isActive);\n  };\n\n  // Handle waterfall color scheme change\n  const handleWaterfallColorSchemeChange = scheme => {\n    setWaterfallColorScheme(scheme);\n    setShowWaterfallColorMenu(false);\n  };\n\n  // Process readings when they change\n  useEffect(() => {\n    var _detector$data;\n    if (readings && readings.length > 0 && detector !== null && detector !== void 0 && (_detector$data = detector.data) !== null && _detector$data !== void 0 && _detector$data.properties) {\n      // Process readings here\n      setDetectorReadings(readings);\n    }\n  }, [readings, detector]);\n\n  // Save camera and calibration settings\n  const saveSettings = () => {\n    try {\n      var _cameraRef$current, _graphRef$current;\n      // Get camera settings\n      const camSettings = (_cameraRef$current = cameraRef.current) === null || _cameraRef$current === void 0 ? void 0 : _cameraRef$current.getSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current = graphRef.current) === null || _graphRef$current === void 0 ? void 0 : _graphRef$current.getCalibrationSettings();\n      if (!camSettings && !calSettings) {\n        console.warn('No settings to save - components may not be mounted');\n        setSaveMessage('No settings to save');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to save\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Save waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        }\n      };\n\n      // Save to localStorage\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\n\n      // Set save message for user feedback\n      setSaveMessage('Settings saved successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      setSaveMessage('Error saving settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Export settings to JSON file\n  const exportSettings = () => {\n    try {\n      var _cameraRef$current2, _graphRef$current2;\n      // Get camera settings\n      const camSettings = (_cameraRef$current2 = cameraRef.current) === null || _cameraRef$current2 === void 0 ? void 0 : _cameraRef$current2.getSettings();\n\n      // Get calibration settings from graph component\n      const calSettings = (_graphRef$current2 = graphRef.current) === null || _graphRef$current2 === void 0 ? void 0 : _graphRef$current2.getCalibrationSettings();\n      if (!camSettings && !calSettings) {\n        console.warn('No settings to export - components may not be mounted');\n        setSaveMessage('No settings to export');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Create a settings object to export\n      const settings = {\n        camera: camSettings || null,\n        calibration: calSettings || null,\n        timestamp: new Date().toISOString(),\n        detectorId: detectorId || 'default',\n        // Export waterfall settings\n        waterfall: {\n          colorScheme: waterfallColorScheme\n        }\n      };\n\n      // Create a file name with timestamp\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\n\n      // Create a Blob with the JSON data\n      const blob = new Blob([JSON.stringify(settings, null, 2)], {\n        type: 'application/json'\n      });\n\n      // Create a URL for the Blob\n      const url = URL.createObjectURL(blob);\n\n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to the document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Set save message for user feedback\n      setSaveMessage('Settings exported to file');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export settings:', error);\n      setSaveMessage('Error exporting settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Load saved camera and calibration settings\n  const loadSettings = () => {\n    try {\n      var _savedSettings$waterf;\n      // Get settings from localStorage\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\n      if (!savedSettingsStr) {\n        setSaveMessage('No saved settings found');\n        setTimeout(() => setSaveMessage(''), 3000);\n        return;\n      }\n\n      // Parse the settings\n      const savedSettings = JSON.parse(savedSettingsStr);\n\n      // Apply camera settings if available\n      if (savedSettings.camera && cameraRef.current) {\n        try {\n          cameraRef.current.applySettings(savedSettings.camera);\n        } catch (err) {\n          console.error('Error applying camera settings:', err);\n        }\n      }\n\n      // Apply calibration settings if available\n      if (savedSettings.calibration && graphRef.current) {\n        try {\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\n        } catch (err) {\n          console.error('Error applying calibration settings:', err);\n        }\n      }\n\n      // Apply waterfall settings if available\n      if ((_savedSettings$waterf = savedSettings.waterfall) !== null && _savedSettings$waterf !== void 0 && _savedSettings$waterf.colorScheme) {\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\n      }\n\n      // Make sure camera is started automatically\n      setTimeout(async () => {\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n          try {\n            await cameraRef.current.startCamera();\n            console.log('Camera started automatically after loading settings');\n          } catch (err) {\n            console.error('Failed to auto-start camera:', err);\n          }\n        }\n      }, 500); // Short delay to allow settings to be applied\n\n      // Set save message for user feedback\n      setSaveMessage('Settings loaded successfully');\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to load settings:', error);\n      setSaveMessage('Error loading settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Import settings from a JSON file\n  const importSettings = () => {\n    try {\n      // Create a file input element\n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = '.json';\n\n      // Handle file selection\n      fileInput.onchange = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = e => {\n          try {\n            var _importedSettings$wat;\n            // Parse the file contents\n            const importedSettings = JSON.parse(e.target.result);\n\n            // Apply camera settings if available\n            if (importedSettings.camera && cameraRef.current) {\n              try {\n                cameraRef.current.applySettings(importedSettings.camera);\n              } catch (err) {\n                console.error('Error applying imported camera settings:', err);\n              }\n            }\n\n            // Apply calibration settings if available\n            if (importedSettings.calibration && graphRef.current) {\n              try {\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\n              } catch (err) {\n                console.error('Error applying imported calibration settings:', err);\n              }\n            }\n\n            // Apply waterfall settings if available\n            if ((_importedSettings$wat = importedSettings.waterfall) !== null && _importedSettings$wat !== void 0 && _importedSettings$wat.colorScheme) {\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\n            }\n\n            // Make sure camera is started automatically\n            setTimeout(async () => {\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\n                try {\n                  await cameraRef.current.startCamera();\n                  console.log('Camera started automatically after loading settings');\n                } catch (err) {\n                  console.error('Failed to auto-start camera:', err);\n                }\n              }\n            }, 500); // Short delay to allow settings to be applied\n\n            // Set save message for user feedback\n            setSaveMessage('Settings imported successfully');\n            setTimeout(() => setSaveMessage(''), 3000);\n          } catch (parseError) {\n            console.error('Failed to parse imported settings file:', parseError);\n            setSaveMessage('Error: Invalid settings file');\n            setTimeout(() => setSaveMessage(''), 3000);\n          }\n        };\n        reader.onerror = () => {\n          setSaveMessage('Error reading file');\n          setTimeout(() => setSaveMessage(''), 3000);\n        };\n\n        // Read the file as text\n        reader.readAsText(file);\n      };\n\n      // Trigger file selection dialog\n      fileInput.click();\n    } catch (error) {\n      console.error('Failed to import settings:', error);\n      setSaveMessage('Error importing settings');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Handler for panel resizing - completely rewritten for reliability\n  const handlePanelResizeStart = e => {\n    var _panelRef$current, _panelRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.offsetWidth) || panelSize.width;\n    const startHeight = ((_panelRef$current2 = panelRef.current) === null || _panelRef$current2 === void 0 ? void 0 : _panelRef$current2.offsetHeight) || panelSize.height;\n\n    // Show resize feedback\n    setIsResizingPanel(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n      const newWidth = Math.max(400, startWidth + deltaX);\n      const newHeight = Math.max(300, startHeight + deltaY);\n\n      // Update panel size\n      setPanelSize({\n        width: newWidth,\n        height: newHeight\n      });\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizingPanel(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle visibility of subcomponents\n  const toggleCamera = () => setShowCamera(!showCamera);\n  const toggleGraph = () => setShowGraph(!showGraph);\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\n  const toggleSettings = () => setShowSettings(!showSettings);\n\n  // Styles for toggle buttons\n  const getToggleButtonStyle = isActive => ({\n    ...buttonVariants.smallSecondary,\n    opacity: isActive ? 1 : 0.5,\n    marginRight: '4px',\n    marginBottom: '4px'\n  });\n\n  // Handle subcomponent resize events\n  const handleCameraResize = newSize => {\n    console.log('Camera resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleGraphResize = newSize => {\n    console.log('Graph resized:', newSize);\n    // Additional logic if needed\n  };\n  const handleWaterfallResize = newSize => {\n    console.log('Waterfall resized:', newSize);\n    // Additional logic if needed\n  };\n\n  // Handle settings changes\n  const handleSettingsChange = settings => {\n    console.log('Settings changed:', settings);\n    // Update relevant state/behavior based on settings\n  };\n\n  // Handle camera line data changes\n  const handleLineDataChange = data => {\n    setLineData(data);\n\n    // Note: The camera component will continue to send updates even when hidden,\n    // as long as the camera is active and a line is drawn\n  };\n\n  // Render panel content\n  if (!detector) return null;\n  return /*#__PURE__*/_jsxDEV(DraggablePanel, {\n    title: `Detector: ${detector.label || detector.id}`,\n    initialPosition: initialPosition,\n    width: panelSize.width,\n    height: panelSize.height,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: panelRef,\n      style: {\n        ...styles.container,\n        width: `${panelSize.width}px`,\n        height: `${panelSize.height}px`,\n        minHeight: '300px',\n        position: 'relative',\n        border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\n        transition: isResizingPanel ? 'none' : 'border 0.3s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlBar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.controlLabel,\n            children: \"Components:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCamera,\n            style: getToggleButtonStyle(showCamera),\n            children: showCamera ? '📹 Hide Camera' : '📹 Show Camera'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleGraph,\n            style: getToggleButtonStyle(showGraph),\n            children: showGraph ? '📊 Hide Graph' : '📊 Show Graph'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleWaterfall,\n            style: getToggleButtonStyle(showWaterfall),\n            children: showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSettings,\n            style: getToggleButtonStyle(showSettings),\n            children: showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: '15px',\n              borderLeft: '1px solid rgba(255, 255, 255, 0.2)',\n              paddingLeft: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 150, 50, 0.7)'\n              },\n              title: \"Save camera and calibration settings to browser storage\",\n              children: \"\\uD83D\\uDCBE Save Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: exportSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 120, 30, 0.7)'\n              },\n              title: \"Export camera and calibration settings to JSON file\",\n              children: \"\\uD83D\\uDCE4 Export Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(50, 100, 150, 0.7)'\n              },\n              title: \"Load saved camera and calibration settings from browser storage\",\n              children: \"\\uD83D\\uDCE5 Load Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: importSettings,\n              style: {\n                ...buttonVariants.smallPrimary,\n                marginRight: '4px',\n                marginBottom: '4px',\n                backgroundColor: 'rgba(120, 70, 150, 0.7)'\n              },\n              title: \"Import camera and calibration settings from JSON file\",\n              children: \"\\uD83D\\uDCC1 Import File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 15\n            }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '12px',\n                backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                padding: '2px 6px',\n                borderRadius: '3px',\n                marginLeft: '8px'\n              },\n              children: saveMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.columnsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: showCamera ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(CameraComponent, {\n            ref: cameraRef,\n            onResize: handleCameraResize,\n            onLineDataChange: handleLineDataChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.rightColumn,\n          children: [showGraph && /*#__PURE__*/_jsxDEV(GraphComponent, {\n            ref: graphRef,\n            onResize: handleGraphResize,\n            lineData: lineData\n            // Pass the frame accumulation props up to parent to manage\n            ,\n            onFrameAccumCountChange: handleFrameAccumCountChange,\n            onAccumulationToggle: handleAccumulationToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), showWaterfall && /*#__PURE__*/_jsxDEV(WaterfallComponent, {\n            onResize: handleWaterfallResize,\n            lineData: lineData,\n            frameAccumCount: frameAccumCount,\n            isAccumulating: isAccumulating,\n            colorScale: waterfallColorScheme,\n            onColorScaleChange: handleWaterfallColorSchemeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 15\n          }, this), showSettings && /*#__PURE__*/_jsxDEV(SettingsComponent, {\n            onSettingChange: (setting, value) => console.log('Setting changed:', setting, value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          right: '30px',\n          bottom: '30px',\n          padding: '4px 8px',\n          background: 'rgba(0, 0, 0, 0.6)',\n          color: 'white',\n          borderRadius: '3px',\n          fontSize: '12px',\n          zIndex: 1000\n        },\n        children: [Math.round(panelSize.width), \" x \", Math.round(panelSize.height)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handlePanelResizeStart,\n        title: \"Drag to resize panel\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 20 20\",\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            width: \"20\",\n            height: \"20\",\n            fill: \"transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\",\n            stroke: \"white\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }, this);\n};\n_s(USBSpectrometer, \"n8i704hZcSaH0bqB2KwDvw9XXyc=\", false, function () {\n  return [useButtonStyles];\n});\n_c = USBSpectrometer;\nexport default USBSpectrometer;\nvar _c;\n$RefreshReg$(_c, \"USBSpectrometer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","DraggablePanel","useButtonStyles","backgroundVariants","styles","CameraComponent","GraphComponent","WaterfallComponent","SettingsComponent","jsxDEV","_jsxDEV","waterfallColorSchemeOptions","grayscale","viridis","plasma","inferno","cividis","turbo","USBSpectrometer","detector","readings","onClose","initialPosition","x","y","detectorId","detectorName","isVisible","position","onMove","onResize","detectorStatus","_s","buttonVariants","detectorReadings","setDetectorReadings","panelSize","setPanelSize","width","height","isResizingPanel","setIsResizingPanel","panelRef","showResizeInfo","setShowResizeInfo","showCamera","setShowCamera","showGraph","setShowGraph","showWaterfall","setShowWaterfall","showSettings","setShowSettings","lineData","setLineData","saveMessage","setSaveMessage","cameraSettings","setCameraSettings","calibrationSettings","setCalibrationSettings","frameAccumCount","setFrameAccumCount","isAccumulating","setIsAccumulating","waterfallColorScheme","setWaterfallColorScheme","showWaterfallColorMenu","setShowWaterfallColorMenu","cameraRef","graphRef","handleFrameAccumCountChange","count","handleAccumulationToggle","isActive","handleWaterfallColorSchemeChange","scheme","_detector$data","length","data","properties","saveSettings","_cameraRef$current","_graphRef$current","camSettings","current","getSettings","calSettings","getCalibrationSettings","console","warn","setTimeout","settings","camera","calibration","timestamp","Date","toISOString","waterfall","colorScheme","localStorage","setItem","JSON","stringify","error","exportSettings","_cameraRef$current2","_graphRef$current2","replace","fileName","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","loadSettings","_savedSettings$waterf","savedSettingsStr","getItem","savedSettings","parse","applySettings","err","applyCalibrationSettings","startCamera","log","importSettings","fileInput","accept","onchange","event","file","target","files","reader","FileReader","onload","e","_importedSettings$wat","importedSettings","result","parseError","onerror","readAsText","handlePanelResizeStart","_panelRef$current","_panelRef$current2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","offsetWidth","startHeight","offsetHeight","handleMouseMove","moveEvent","deltaX","deltaY","newWidth","Math","max","newHeight","handleMouseUp","removeEventListener","addEventListener","toggleCamera","toggleGraph","toggleWaterfall","toggleSettings","getToggleButtonStyle","smallSecondary","opacity","marginRight","marginBottom","handleCameraResize","newSize","handleGraphResize","handleWaterfallResize","handleSettingsChange","handleLineDataChange","title","label","id","children","ref","style","container","minHeight","border","transition","controlBar","controlLabel","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","borderLeft","paddingLeft","smallPrimary","backgroundColor","fontSize","padding","borderRadius","columnsContainer","display","onLineDataChange","rightColumn","onFrameAccumCountChange","onAccumulationToggle","colorScale","onColorScaleChange","onSettingChange","setting","value","right","bottom","background","color","zIndex","round","resizeHandle","onMouseDown","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/USBSpectrometer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport DraggablePanel from './DraggablePanel';\r\nimport { useButtonStyles } from '../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\nimport styles from './styles/USBSpectrometerStyles';\r\n\r\n// Import subcomponents\r\nimport CameraComponent from './DetectorComponents/CameraComponent';\r\nimport GraphComponent from './DetectorComponents/GraphComponent';\r\nimport WaterfallComponent from './DetectorComponents/WaterfallComponent';\r\nimport SettingsComponent from './DetectorComponents/SettingsComponent';\r\n\r\n// Available waterfall color schemes\r\nconst waterfallColorSchemeOptions = {\r\n  grayscale: 'Grayscale',\r\n  viridis: 'Viridis',\r\n  plasma: 'Plasma',\r\n  inferno: 'Inferno',\r\n  cividis: 'Cividis',\r\n  turbo: 'Turbo'\r\n};\r\n\r\nconst USBSpectrometer = ({ detector, readings = [], onClose, initialPosition = { x: 150, y: 100 }, detectorId, detectorName, isVisible, position, onMove, onResize, detectorStatus }) => {\r\n  const buttonVariants = useButtonStyles();\r\n  const [detectorReadings, setDetectorReadings] = useState([]);\r\n  \r\n  // Panel resizing state\r\n  const [panelSize, setPanelSize] = useState({ width: 1100, height: 750 });\r\n  const [isResizingPanel, setIsResizingPanel] = useState(false);\r\n  const panelRef = useRef(null);\r\n  \r\n  // Add state for resize feedback\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  \r\n  // Subcomponent visibility toggles\r\n  const [showCamera, setShowCamera] = useState(true);\r\n  const [showGraph, setShowGraph] = useState(true);\r\n  const [showWaterfall, setShowWaterfall] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  \r\n  // Data state\r\n  const [lineData, setLineData] = useState(null);\r\n  \r\n  // Save/load settings state\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  const [cameraSettings, setCameraSettings] = useState(null);\r\n  const [calibrationSettings, setCalibrationSettings] = useState(null);\r\n  \r\n  // Frame accumulation state (shared between Graph and Waterfall)\r\n  const [frameAccumCount, setFrameAccumCount] = useState(10);\r\n  const [isAccumulating, setIsAccumulating] = useState(true);\r\n  \r\n  // Waterfall color scheme state\r\n  const [waterfallColorScheme, setWaterfallColorScheme] = useState('cividis');\r\n  const [showWaterfallColorMenu, setShowWaterfallColorMenu] = useState(false);\r\n  \r\n  // References to component methods\r\n  const cameraRef = useRef(null);\r\n  const graphRef = useRef(null);\r\n  \r\n  // Handle frame accumulation change\r\n  const handleFrameAccumCountChange = (count) => {\r\n    setFrameAccumCount(count);\r\n  };\r\n  \r\n  // Handle accumulation mode toggle\r\n  const handleAccumulationToggle = (isActive) => {\r\n    setIsAccumulating(isActive);\r\n  };\r\n  \r\n  // Handle waterfall color scheme change\r\n  const handleWaterfallColorSchemeChange = (scheme) => {\r\n    setWaterfallColorScheme(scheme);\r\n    setShowWaterfallColorMenu(false);\r\n  };\r\n  \r\n  // Process readings when they change\r\n  useEffect(() => {\r\n    if (readings && readings.length > 0 && detector?.data?.properties) {\r\n      // Process readings here\r\n      setDetectorReadings(readings);\r\n    }\r\n  }, [readings, detector]);\r\n  \r\n  // Save camera and calibration settings\r\n  const saveSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings) {\r\n        console.warn('No settings to save - components may not be mounted');\r\n        setSaveMessage('No settings to save');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to save\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Save waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        }\r\n      };\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem(`detector_settings_${detectorId || 'default'}`, JSON.stringify(settings));\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings saved successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      setSaveMessage('Error saving settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Export settings to JSON file\r\n  const exportSettings = () => {\r\n    try {\r\n      // Get camera settings\r\n      const camSettings = cameraRef.current?.getSettings();\r\n      \r\n      // Get calibration settings from graph component\r\n      const calSettings = graphRef.current?.getCalibrationSettings();\r\n      \r\n      if (!camSettings && !calSettings) {\r\n        console.warn('No settings to export - components may not be mounted');\r\n        setSaveMessage('No settings to export');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Create a settings object to export\r\n      const settings = {\r\n        camera: camSettings || null,\r\n        calibration: calSettings || null,\r\n        timestamp: new Date().toISOString(),\r\n        detectorId: detectorId || 'default',\r\n        // Export waterfall settings\r\n        waterfall: {\r\n          colorScheme: waterfallColorScheme\r\n        }\r\n      };\r\n      \r\n      // Create a file name with timestamp\r\n      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\./g, '_');\r\n      const fileName = `detector_settings_${detectorId || 'default'}_${timestamp}.json`;\r\n      \r\n      // Create a Blob with the JSON data\r\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\r\n      \r\n      // Create a URL for the Blob\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // Create a temporary link element to trigger the download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Append to the document, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings exported to file');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to export settings:', error);\r\n      setSaveMessage('Error exporting settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Load saved camera and calibration settings\r\n  const loadSettings = () => {\r\n    try {\r\n      // Get settings from localStorage\r\n      const savedSettingsStr = localStorage.getItem(`detector_settings_${detectorId || 'default'}`);\r\n      if (!savedSettingsStr) {\r\n        setSaveMessage('No saved settings found');\r\n        setTimeout(() => setSaveMessage(''), 3000);\r\n        return;\r\n      }\r\n      \r\n      // Parse the settings\r\n      const savedSettings = JSON.parse(savedSettingsStr);\r\n      \r\n      // Apply camera settings if available\r\n      if (savedSettings.camera && cameraRef.current) {\r\n        try {\r\n          cameraRef.current.applySettings(savedSettings.camera);\r\n        } catch (err) {\r\n          console.error('Error applying camera settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply calibration settings if available\r\n      if (savedSettings.calibration && graphRef.current) {\r\n        try {\r\n          graphRef.current.applyCalibrationSettings(savedSettings.calibration);\r\n        } catch (err) {\r\n          console.error('Error applying calibration settings:', err);\r\n        }\r\n      }\r\n      \r\n      // Apply waterfall settings if available\r\n      if (savedSettings.waterfall?.colorScheme) {\r\n        setWaterfallColorScheme(savedSettings.waterfall.colorScheme);\r\n      }\r\n      \r\n      // Make sure camera is started automatically\r\n      setTimeout(async () => {\r\n        if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n          try {\r\n            await cameraRef.current.startCamera();\r\n            console.log('Camera started automatically after loading settings');\r\n          } catch (err) {\r\n            console.error('Failed to auto-start camera:', err);\r\n          }\r\n        }\r\n      }, 500); // Short delay to allow settings to be applied\r\n      \r\n      // Set save message for user feedback\r\n      setSaveMessage('Settings loaded successfully');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n      setSaveMessage('Error loading settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Import settings from a JSON file\r\n  const importSettings = () => {\r\n    try {\r\n      // Create a file input element\r\n      const fileInput = document.createElement('input');\r\n      fileInput.type = 'file';\r\n      fileInput.accept = '.json';\r\n      \r\n      // Handle file selection\r\n      fileInput.onchange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n        \r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (e) => {\r\n          try {\r\n            // Parse the file contents\r\n            const importedSettings = JSON.parse(e.target.result);\r\n            \r\n            // Apply camera settings if available\r\n            if (importedSettings.camera && cameraRef.current) {\r\n              try {\r\n                cameraRef.current.applySettings(importedSettings.camera);\r\n              } catch (err) {\r\n                console.error('Error applying imported camera settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply calibration settings if available\r\n            if (importedSettings.calibration && graphRef.current) {\r\n              try {\r\n                graphRef.current.applyCalibrationSettings(importedSettings.calibration);\r\n              } catch (err) {\r\n                console.error('Error applying imported calibration settings:', err);\r\n              }\r\n            }\r\n            \r\n            // Apply waterfall settings if available\r\n            if (importedSettings.waterfall?.colorScheme) {\r\n              setWaterfallColorScheme(importedSettings.waterfall.colorScheme);\r\n            }\r\n            \r\n            // Make sure camera is started automatically\r\n            setTimeout(async () => {\r\n              if (cameraRef.current && typeof cameraRef.current.startCamera === 'function') {\r\n                try {\r\n                  await cameraRef.current.startCamera();\r\n                  console.log('Camera started automatically after loading settings');\r\n                } catch (err) {\r\n                  console.error('Failed to auto-start camera:', err);\r\n                }\r\n              }\r\n            }, 500); // Short delay to allow settings to be applied\r\n            \r\n            // Set save message for user feedback\r\n            setSaveMessage('Settings imported successfully');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          } catch (parseError) {\r\n            console.error('Failed to parse imported settings file:', parseError);\r\n            setSaveMessage('Error: Invalid settings file');\r\n            setTimeout(() => setSaveMessage(''), 3000);\r\n          }\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          setSaveMessage('Error reading file');\r\n          setTimeout(() => setSaveMessage(''), 3000);\r\n        };\r\n        \r\n        // Read the file as text\r\n        reader.readAsText(file);\r\n      };\r\n      \r\n      // Trigger file selection dialog\r\n      fileInput.click();\r\n    } catch (error) {\r\n      console.error('Failed to import settings:', error);\r\n      setSaveMessage('Error importing settings');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Handler for panel resizing - completely rewritten for reliability\r\n  const handlePanelResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = panelRef.current?.offsetWidth || panelSize.width;\r\n    const startHeight = panelRef.current?.offsetHeight || panelSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizingPanel(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaX = moveEvent.clientX - startX;\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      const newWidth = Math.max(400, startWidth + deltaX);\r\n      const newHeight = Math.max(300, startHeight + deltaY);\r\n      \r\n      // Update panel size\r\n      setPanelSize({\r\n        width: newWidth,\r\n        height: newHeight\r\n      });\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizingPanel(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  // Toggle visibility of subcomponents\r\n  const toggleCamera = () => setShowCamera(!showCamera);\r\n  const toggleGraph = () => setShowGraph(!showGraph);\r\n  const toggleWaterfall = () => setShowWaterfall(!showWaterfall);\r\n  const toggleSettings = () => setShowSettings(!showSettings);\r\n  \r\n  // Styles for toggle buttons\r\n  const getToggleButtonStyle = (isActive) => ({\r\n    ...buttonVariants.smallSecondary,\r\n    opacity: isActive ? 1 : 0.5,\r\n    marginRight: '4px',\r\n    marginBottom: '4px'\r\n  });\r\n  \r\n  // Handle subcomponent resize events\r\n  const handleCameraResize = (newSize) => {\r\n    console.log('Camera resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleGraphResize = (newSize) => {\r\n    console.log('Graph resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  const handleWaterfallResize = (newSize) => {\r\n    console.log('Waterfall resized:', newSize);\r\n    // Additional logic if needed\r\n  };\r\n  \r\n  // Handle settings changes\r\n  const handleSettingsChange = (settings) => {\r\n    console.log('Settings changed:', settings);\r\n    // Update relevant state/behavior based on settings\r\n  };\r\n  \r\n  // Handle camera line data changes\r\n  const handleLineDataChange = (data) => {\r\n    setLineData(data);\r\n    \r\n    // Note: The camera component will continue to send updates even when hidden,\r\n    // as long as the camera is active and a line is drawn\r\n  };\r\n  \r\n  // Render panel content\r\n  if (!detector) return null;\r\n  \r\n  return (\r\n    <DraggablePanel \r\n      title={`Detector: ${detector.label || detector.id}`}\r\n      initialPosition={initialPosition}\r\n      width={panelSize.width}\r\n      height={panelSize.height}\r\n      onClose={onClose}\r\n    >\r\n      <div \r\n        ref={panelRef}\r\n        style={{\r\n          ...styles.container,\r\n          width: `${panelSize.width}px`,\r\n          height: `${panelSize.height}px`,\r\n          minHeight: '300px',\r\n          position: 'relative',\r\n          border: isResizingPanel ? '1px dashed #4CAF50' : 'none',\r\n          transition: isResizingPanel ? 'none' : 'border 0.3s ease',\r\n        }}\r\n      >\r\n        {/* Top control bar */}\r\n        <div style={styles.controlBar}>\r\n          <div>\r\n            <span style={styles.controlLabel}>Components:</span>\r\n            \r\n            <button \r\n              onClick={toggleCamera} \r\n              style={getToggleButtonStyle(showCamera)}\r\n            >\r\n              {showCamera ? '📹 Hide Camera' : '📹 Show Camera'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleGraph} \r\n              style={getToggleButtonStyle(showGraph)}\r\n            >\r\n              {showGraph ? '📊 Hide Graph' : '📊 Show Graph'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleWaterfall} \r\n              style={getToggleButtonStyle(showWaterfall)}\r\n            >\r\n              {showWaterfall ? '🌊 Hide Waterfall' : '🌊 Show Waterfall'}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={toggleSettings} \r\n              style={getToggleButtonStyle(showSettings)}\r\n            >\r\n              {showSettings ? '⚙️ Hide Settings' : '⚙️ Show Settings'}\r\n            </button>\r\n            \r\n            <span style={{ marginLeft: '15px', borderLeft: '1px solid rgba(255, 255, 255, 0.2)', paddingLeft: '10px' }}>\r\n              <button \r\n                onClick={saveSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 150, 50, 0.7)'\r\n                }}\r\n                title=\"Save camera and calibration settings to browser storage\"\r\n              >\r\n                💾 Save Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={exportSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 120, 30, 0.7)'\r\n                }}\r\n                title=\"Export camera and calibration settings to JSON file\"\r\n              >\r\n                📤 Export Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={loadSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(50, 100, 150, 0.7)'\r\n                }}\r\n                title=\"Load saved camera and calibration settings from browser storage\"\r\n              >\r\n                📥 Load Settings\r\n              </button>\r\n              \r\n              <button \r\n                onClick={importSettings} \r\n                style={{\r\n                  ...buttonVariants.smallPrimary,\r\n                  marginRight: '4px',\r\n                  marginBottom: '4px',\r\n                  backgroundColor: 'rgba(120, 70, 150, 0.7)'\r\n                }}\r\n                title=\"Import camera and calibration settings from JSON file\"\r\n              >\r\n                📁 Import File\r\n              </button>\r\n              \r\n              {saveMessage && (\r\n                <span style={{\r\n                  fontSize: '12px',\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                  padding: '2px 6px',\r\n                  borderRadius: '3px',\r\n                  marginLeft: '8px'\r\n                }}>\r\n                  {saveMessage}\r\n                </span>\r\n              )}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Two-column layout container */}\r\n        <div style={styles.columnsContainer}>\r\n          {/* Left column - Camera component */}\r\n          <div style={{ display: showCamera ? 'block' : 'none' }}>\r\n            <CameraComponent \r\n              ref={cameraRef}\r\n              onResize={handleCameraResize} \r\n              onLineDataChange={handleLineDataChange}\r\n            />\r\n          </div>\r\n          \r\n          {/* Right column with multiple components */}\r\n          <div style={styles.rightColumn}>\r\n            {/* Graph component */}\r\n            {showGraph && (\r\n              <GraphComponent \r\n                ref={graphRef}\r\n                onResize={handleGraphResize}\r\n                lineData={lineData}\r\n                // Pass the frame accumulation props up to parent to manage\r\n                onFrameAccumCountChange={handleFrameAccumCountChange}\r\n                onAccumulationToggle={handleAccumulationToggle}\r\n              />\r\n            )}\r\n            \r\n            {/* Waterfall component */}\r\n            {showWaterfall && (\r\n              <WaterfallComponent \r\n                onResize={handleWaterfallResize}\r\n                lineData={lineData}\r\n                frameAccumCount={frameAccumCount}\r\n                isAccumulating={isAccumulating}\r\n                colorScale={waterfallColorScheme}\r\n                onColorScaleChange={handleWaterfallColorSchemeChange}\r\n              />\r\n            )}\r\n            \r\n            {/* Settings component */}\r\n            {showSettings && (\r\n              <SettingsComponent \r\n                onSettingChange={(setting, value) => console.log('Setting changed:', setting, value)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Show resize info when active */}\r\n        {showResizeInfo && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            right: '30px',\r\n            bottom: '30px',\r\n            padding: '4px 8px',\r\n            background: 'rgba(0, 0, 0, 0.6)',\r\n            color: 'white',\r\n            borderRadius: '3px',\r\n            fontSize: '12px',\r\n            zIndex: 1000\r\n          }}>\r\n            {Math.round(panelSize.width)} x {Math.round(panelSize.height)}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Panel resize handle - make sure this comes last */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handlePanelResizeStart}\r\n          title=\"Drag to resize panel\"\r\n        >\r\n          <svg \r\n            width=\"20\" \r\n            height=\"20\" \r\n            viewBox=\"0 0 20 20\" \r\n            style={{ display: 'block' }}\r\n          >\r\n            <rect width=\"20\" height=\"20\" fill=\"transparent\" />\r\n            <path \r\n              d=\"M14,6 L6,14 M17,9 L9,17 M17,13 L13,17\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </DraggablePanel>\r\n  );\r\n};\r\n\r\nexport default USBSpectrometer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}