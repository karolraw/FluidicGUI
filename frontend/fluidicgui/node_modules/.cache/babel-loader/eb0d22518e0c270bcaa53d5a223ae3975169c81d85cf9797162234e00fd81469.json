{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\DropletGenerator\\\\Manual\\\\ManualDropletCreation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DropletList from './DropletList';\nimport ParameterAdjustment from './ParameterAdjustment';\nimport defaultProperties from '../../../data/defaultProperties.json';\nimport { backgroundVariants } from '../../../styles/backgroundStyles';\nimport { ColorSchemePreview } from '../../../context/ColorSchemeContext';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\n\n// Available droplet color schemes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dropletColorSchemeOptions = {\n  viridis: 'Viridis',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis (Colorblind-friendly)',\n  turbo: 'Turbo'\n};\n\n// Utility function to deep clone an object\nconst deepClone = obj => JSON.parse(JSON.stringify(obj));\n\n// Helper function to get parameter range and description from defaultProperties\nconst getParameterRange = (nodeType, paramName) => {\n  var _parameter$min, _parameter$max;\n  const nodeConfig = defaultProperties[nodeType];\n  if (!(nodeConfig !== null && nodeConfig !== void 0 && nodeConfig.parameters)) return {\n    min: 0,\n    max: 100,\n    description: ''\n  };\n  const parameter = nodeConfig.parameters.find(p => p.name === paramName);\n  if (!parameter) return {\n    min: 0,\n    max: 100,\n    description: ''\n  };\n  return {\n    min: (_parameter$min = parameter.min) !== null && _parameter$min !== void 0 ? _parameter$min : 0,\n    max: (_parameter$max = parameter.max) !== null && _parameter$max !== void 0 ? _parameter$max : 100,\n    description: parameter.description || ''\n  };\n};\nconst ManualDropletCreation = ({\n  nodes,\n  onNext,\n  selectedCarrierPumps,\n  droplets,\n  setDroplets,\n  parameterRanges,\n  setParameterRanges,\n  parameterVisibility,\n  setParameterVisibility\n}) => {\n  _s();\n  const [selectedDroplets, setSelectedDroplets] = useState([]);\n  const [lastSelected, setLastSelected] = useState(null);\n  const [dropletColorScheme, setDropletColorScheme] = useState('cividis'); // Cividis as default\n\n  // Get dynamic button styles\n  const buttonVariants = useButtonStyles();\n  const nodesWithParameters = nodes.filter(node => !selectedCarrierPumps.includes(node.id)).filter(node => !(node.data.type === 'thermostat' && node.data.end === 'true')).filter(node => node.data.parameters && node.data.parameters.length > 0);\n\n  // Initialize parameter ranges and visibility from defaultProperties\n  useEffect(() => {\n    // Initialize ranges and visibility for all parameters from all nodes\n    const initialRanges = {};\n    const initialVisibility = {};\n    nodesWithParameters.forEach(node => {\n      if (node.data.parameters) {\n        node.data.parameters.forEach(param => {\n          const key = `${node.id}-${param.name}`;\n          const range = getParameterRange(node.data.type, param.name);\n          initialRanges[param.name] = range;\n          initialVisibility[key] = true;\n        });\n      }\n    });\n\n    // Only set if not already initialized\n    if (Object.keys(parameterRanges).length === 0) {\n      setParameterRanges(initialRanges);\n    }\n    if (Object.keys(parameterVisibility).length === 0) {\n      setParameterVisibility(initialVisibility);\n    }\n  }, [nodesWithParameters, setParameterRanges, setParameterVisibility, parameterRanges, parameterVisibility]);\n  useEffect(() => {\n    if (droplets.length === 0) {\n      const initialDroplet = {\n        id: Date.now(),\n        parameters: nodesWithParameters.flatMap(node => deepClone(node.data.parameters).map(param => ({\n          nodeId: node.id,\n          nodeName: node.data.label,\n          name: param.name,\n          default: param.default || 0,\n          value: param.default || 0\n        })))\n      };\n      setDroplets([initialDroplet]);\n      setSelectedDroplets([initialDroplet.id]);\n      setLastSelected(initialDroplet.id);\n    }\n  }, [nodes, selectedCarrierPumps, droplets, setDroplets, nodesWithParameters]);\n  const exportDroplets = () => {\n    const dropletData = JSON.stringify(droplets, null, 2);\n    const blob = new Blob([dropletData], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'droplets.json';\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n  const importDroplets = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        try {\n          const importedDroplets = JSON.parse(event.target.result);\n          setDroplets(importedDroplets); // Update the droplets state with the imported data\n        } catch (error) {\n          console.error('Error parsing the imported file:', error);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  const addDroplet = () => {\n    const newDroplet = {\n      id: Date.now(),\n      parameters: nodesWithParameters.flatMap(node => deepClone(node.data.parameters).map(param => ({\n        nodeId: node.id,\n        nodeName: node.data.label,\n        name: param.name,\n        default: param.default || 0,\n        value: param.default || 0\n      })))\n    };\n    setDroplets([...droplets, newDroplet]);\n    setSelectedDroplets([newDroplet.id]);\n    setLastSelected(newDroplet.id);\n  };\n  const handleSelectDroplet = (id, event) => {\n    if (event.ctrlKey) {\n      setSelectedDroplets(prevSelected => prevSelected.includes(id) ? prevSelected.filter(dropletId => dropletId !== id) : [...prevSelected, id]);\n    } else if (event.shiftKey && lastSelected !== null) {\n      const currentIndex = droplets.findIndex(d => d.id === id);\n      const lastIndex = droplets.findIndex(d => d.id === lastSelected);\n      const [start, end] = [Math.min(currentIndex, lastIndex), Math.max(currentIndex, lastIndex)];\n      const rangeIds = droplets.slice(start, end + 1).map(d => d.id);\n      setSelectedDroplets(prevSelected => [...new Set([...prevSelected, ...rangeIds])]);\n    } else {\n      setSelectedDroplets([id]);\n    }\n    setLastSelected(id);\n  };\n  const deleteSelectedDroplets = () => {\n    setDroplets(droplets.filter(droplet => !selectedDroplets.includes(droplet.id)));\n    setSelectedDroplets([]);\n  };\n  const copySelectedDroplets = () => {\n    const copiedDroplets = selectedDroplets.map(selectedId => {\n      const dropletToCopy = droplets.find(d => d.id === selectedId);\n      return {\n        ...deepClone(dropletToCopy),\n        // Deep clone the droplet to avoid reference sharing\n        id: Date.now() + Math.random() // Assign a new unique ID\n      };\n    });\n\n    // Add the copied droplets to the existing list\n    setDroplets([...droplets, ...copiedDroplets]);\n\n    // Optionally, select the copied droplets\n    setSelectedDroplets(copiedDroplets.map(d => d.id));\n  };\n  const handleParameterChange = (nodeId, parameterName, value) => {\n    // Update all selected droplets' parameters for the same parameter (name + nodeId)\n    setDroplets(droplets.map(droplet => {\n      if (selectedDroplets.includes(droplet.id)) {\n        return {\n          ...droplet,\n          parameters: droplet.parameters.map(param => param.name === parameterName && param.nodeId === nodeId ? {\n            ...param,\n            value: parseFloat(value)\n          } : param)\n        };\n      }\n      return droplet;\n    }));\n  };\n  const toggleSelectAll = () => {\n    if (selectedDroplets.length === droplets.length) {\n      // If all are selected, deselect all\n      setSelectedDroplets([]);\n    } else {\n      // Otherwise, select all\n      setSelectedDroplets(droplets.map(droplet => droplet.id));\n    }\n  };\n  const handleSimulate = () => {\n    onNext(droplets); // Pass the droplets to the parent component\n  };\n  const handleParameterVisibilityChange = (nodeId, paramName, isVisible) => {\n    setParameterVisibility(prev => ({\n      ...prev,\n      [`${nodeId}-${paramName}`]: isVisible\n    }));\n  };\n  const handleParameterRangeChange = (paramName, type, value) => {\n    setParameterRanges(prev => ({\n      ...prev,\n      [paramName]: {\n        ...prev[paramName],\n        [type]: value\n      }\n    }));\n  };\n  const handleDropletColorSchemeChange = e => {\n    setDropletColorScheme(e.target.value);\n  };\n  const styles = {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      ...backgroundVariants.mainBackground,\n      position: 'relative'\n    },\n    buttonGroup: {\n      marginTop: '20px',\n      display: 'flex',\n      gap: '10px',\n      alignItems: 'center'\n    },\n    fileInput: {\n      marginLeft: '10px',\n      ...backgroundVariants.inputBackground\n    },\n    colorSchemeContainer: {\n      position: 'absolute',\n      top: '20px',\n      right: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-end',\n      zIndex: 10,\n      backgroundColor: 'rgba(40, 40, 40, 0.8)',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)'\n    },\n    colorSchemeSelector: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '5px'\n    },\n    select: {\n      padding: '6px 10px',\n      borderRadius: '4px',\n      border: '1px solid #555',\n      backgroundColor: '#333',\n      color: 'white',\n      minWidth: '140px'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen-wide-component\",\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manual Droplet Creation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.colorSchemeContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.colorSchemeSelector,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dropletColorScheme\",\n          children: \"Droplet Colors:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dropletColorScheme\",\n          value: dropletColorScheme,\n          onChange: handleDropletColorSchemeChange,\n          style: styles.select,\n          children: Object.entries(dropletColorSchemeOptions).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: label\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ColorSchemePreview, {\n        scheme: dropletColorScheme,\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), selectedDroplets.length > 0 && /*#__PURE__*/_jsxDEV(ParameterAdjustment, {\n      selectedDroplets: droplets.filter(d => selectedDroplets.includes(d.id)),\n      onParameterChange: handleParameterChange,\n      onVisibilityChange: handleParameterVisibilityChange,\n      onRangeChange: handleParameterRangeChange,\n      parameterRanges: parameterRanges,\n      selectedCarrierPumps: selectedCarrierPumps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.buttonGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addDroplet,\n        style: {\n          ...buttonVariants.primaryButton\n        },\n        children: \"Add Droplet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSelectAll,\n        style: {\n          ...buttonVariants.secondaryButton\n        },\n        children: selectedDroplets.length === droplets.length ? 'Deselect All' : 'Select All'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: copySelectedDroplets,\n        style: {\n          ...buttonVariants.secondaryButton\n        },\n        children: \"Copy Selected Droplets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteSelectedDroplets,\n        style: {\n          ...buttonVariants.dangerButton\n        },\n        children: \"Delete Selected Droplets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportDroplets,\n        style: {\n          ...buttonVariants.infoButton\n        },\n        children: \"Export Droplets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginLeft: '10px'\n        },\n        children: [\"Import Droplets:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"application/json\",\n          onChange: importDroplets,\n          style: styles.fileInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSimulate,\n        style: {\n          ...buttonVariants.primaryButton\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginTop: '20px',\n        marginBottom: '10px'\n      },\n      children: \"Droplets List:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropletList, {\n      droplets: droplets,\n      selectedDroplets: selectedDroplets,\n      onSelectDroplet: handleSelectDroplet,\n      parameterVisibility: parameterVisibility,\n      parameterRanges: parameterRanges,\n      colorScheme: dropletColorScheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(ManualDropletCreation, \"Ld0rv2uDmAgXMC/P8Ak56AeMGHM=\", false, function () {\n  return [useButtonStyles];\n});\n_c = ManualDropletCreation;\nexport default ManualDropletCreation;\nvar _c;\n$RefreshReg$(_c, \"ManualDropletCreation\");","map":{"version":3,"names":["React","useState","useEffect","DropletList","ParameterAdjustment","defaultProperties","backgroundVariants","ColorSchemePreview","useButtonStyles","jsxDEV","_jsxDEV","dropletColorSchemeOptions","viridis","plasma","inferno","cividis","turbo","deepClone","obj","JSON","parse","stringify","getParameterRange","nodeType","paramName","_parameter$min","_parameter$max","nodeConfig","parameters","min","max","description","parameter","find","p","name","ManualDropletCreation","nodes","onNext","selectedCarrierPumps","droplets","setDroplets","parameterRanges","setParameterRanges","parameterVisibility","setParameterVisibility","_s","selectedDroplets","setSelectedDroplets","lastSelected","setLastSelected","dropletColorScheme","setDropletColorScheme","buttonVariants","nodesWithParameters","filter","node","includes","id","data","type","end","length","initialRanges","initialVisibility","forEach","param","key","range","Object","keys","initialDroplet","Date","now","flatMap","map","nodeId","nodeName","label","default","value","exportDroplets","dropletData","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","importDroplets","e","file","target","files","reader","FileReader","onload","event","importedDroplets","result","error","console","readAsText","addDroplet","newDroplet","handleSelectDroplet","ctrlKey","prevSelected","dropletId","shiftKey","currentIndex","findIndex","d","lastIndex","start","Math","rangeIds","slice","Set","deleteSelectedDroplets","droplet","copySelectedDroplets","copiedDroplets","selectedId","dropletToCopy","random","handleParameterChange","parameterName","parseFloat","toggleSelectAll","handleSimulate","handleParameterVisibilityChange","isVisible","prev","handleParameterRangeChange","handleDropletColorSchemeChange","styles","container","display","flexDirection","height","mainBackground","position","buttonGroup","marginTop","gap","alignItems","fileInput","marginLeft","inputBackground","colorSchemeContainer","top","right","zIndex","backgroundColor","padding","borderRadius","boxShadow","colorSchemeSelector","select","border","color","minWidth","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","entries","scheme","width","onParameterChange","onVisibilityChange","onRangeChange","onClick","primaryButton","secondaryButton","dangerButton","infoButton","accept","marginBottom","onSelectDroplet","colorScheme","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/DropletGenerator/Manual/ManualDropletCreation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DropletList from './DropletList';  \r\nimport ParameterAdjustment from './ParameterAdjustment';  \r\nimport defaultProperties from '../../../data/defaultProperties.json';\r\nimport { backgroundVariants } from '../../../styles/backgroundStyles';\r\nimport { ColorSchemePreview } from '../../../context/ColorSchemeContext';\r\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\r\n\r\n// Available droplet color schemes\r\nconst dropletColorSchemeOptions = {\r\n  viridis: 'Viridis',\r\n  plasma: 'Plasma',\r\n  inferno: 'Inferno',\r\n  cividis: 'Cividis (Colorblind-friendly)',\r\n  turbo: 'Turbo'\r\n};\r\n\r\n// Utility function to deep clone an object\r\nconst deepClone = (obj) => JSON.parse(JSON.stringify(obj));\r\n\r\n// Helper function to get parameter range and description from defaultProperties\r\nconst getParameterRange = (nodeType, paramName) => {\r\n  const nodeConfig = defaultProperties[nodeType];\r\n  if (!nodeConfig?.parameters) return { min: 0, max: 100, description: '' };\r\n  \r\n  const parameter = nodeConfig.parameters.find(p => p.name === paramName);\r\n  if (!parameter) return { min: 0, max: 100, description: '' };\r\n  \r\n  return {\r\n    min: parameter.min ?? 0,\r\n    max: parameter.max ?? 100,\r\n    description: parameter.description || ''\r\n  };\r\n};\r\n\r\nconst ManualDropletCreation = ({ \r\n  nodes, \r\n  onNext, \r\n  selectedCarrierPumps, \r\n  droplets, \r\n  setDroplets,\r\n  parameterRanges,\r\n  setParameterRanges,\r\n  parameterVisibility,\r\n  setParameterVisibility\r\n}) => {\r\n  const [selectedDroplets, setSelectedDroplets] = useState([]);  \r\n  const [lastSelected, setLastSelected] = useState(null);\r\n  const [dropletColorScheme, setDropletColorScheme] = useState('cividis'); // Cividis as default\r\n  \r\n  // Get dynamic button styles\r\n  const buttonVariants = useButtonStyles();\r\n  \r\n  const nodesWithParameters = nodes\r\n    .filter(node => !selectedCarrierPumps.includes(node.id))\r\n    .filter(node => !(node.data.type === 'thermostat' && node.data.end === 'true'))\r\n    .filter(node => node.data.parameters && node.data.parameters.length > 0);\r\n    \r\n  // Initialize parameter ranges and visibility from defaultProperties\r\n  useEffect(() => {\r\n    // Initialize ranges and visibility for all parameters from all nodes\r\n    const initialRanges = {};\r\n    const initialVisibility = {};\r\n    \r\n    nodesWithParameters.forEach(node => {\r\n      if (node.data.parameters) {\r\n        node.data.parameters.forEach(param => {\r\n          const key = `${node.id}-${param.name}`;\r\n          const range = getParameterRange(node.data.type, param.name);\r\n          initialRanges[param.name] = range;\r\n          initialVisibility[key] = true;\r\n        });\r\n      }\r\n    });\r\n\r\n    // Only set if not already initialized\r\n    if (Object.keys(parameterRanges).length === 0) {\r\n      setParameterRanges(initialRanges);\r\n    }\r\n    if (Object.keys(parameterVisibility).length === 0) {\r\n      setParameterVisibility(initialVisibility);\r\n    }\r\n  }, [nodesWithParameters, setParameterRanges, setParameterVisibility, parameterRanges, parameterVisibility]);\r\n    \r\n  useEffect(() => {\r\n    if (droplets.length === 0) {\r\n      const initialDroplet = {\r\n        id: Date.now(),\r\n        parameters: nodesWithParameters.flatMap(node =>\r\n          deepClone(node.data.parameters).map(param => ({\r\n            nodeId: node.id,\r\n            nodeName: node.data.label,\r\n            name: param.name,\r\n            default: param.default || 0,\r\n            value: param.default || 0\r\n          }))\r\n        ),\r\n      };\r\n\r\n      setDroplets([initialDroplet]);\r\n      setSelectedDroplets([initialDroplet.id]);\r\n      setLastSelected(initialDroplet.id);\r\n    }\r\n  }, [nodes, selectedCarrierPumps, droplets, setDroplets, nodesWithParameters]);\r\n\r\n  const exportDroplets = () => {\r\n    const dropletData = JSON.stringify(droplets, null, 2);\r\n    const blob = new Blob([dropletData], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = 'droplets.json';\r\n    link.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const importDroplets = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        try {\r\n          const importedDroplets = JSON.parse(event.target.result);\r\n          setDroplets(importedDroplets); // Update the droplets state with the imported data\r\n        } catch (error) {\r\n          console.error('Error parsing the imported file:', error);\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  const addDroplet = () => {\r\n    const newDroplet = {\r\n      id: Date.now(),\r\n      parameters: nodesWithParameters.flatMap(node =>\r\n        deepClone(node.data.parameters).map(param => ({\r\n          nodeId: node.id,\r\n          nodeName: node.data.label,\r\n          name: param.name,\r\n          default: param.default || 0,\r\n          value: param.default || 0\r\n        }))\r\n      ),\r\n    };\r\n    setDroplets([...droplets, newDroplet]);\r\n    setSelectedDroplets([newDroplet.id]);\r\n    setLastSelected(newDroplet.id);\r\n  };\r\n\r\n  const handleSelectDroplet = (id, event) => {\r\n    if (event.ctrlKey) {\r\n      setSelectedDroplets((prevSelected) =>\r\n        prevSelected.includes(id)\r\n          ? prevSelected.filter((dropletId) => dropletId !== id)\r\n          : [...prevSelected, id]\r\n      );\r\n    } else if (event.shiftKey && lastSelected !== null) {\r\n      const currentIndex = droplets.findIndex((d) => d.id === id);\r\n      const lastIndex = droplets.findIndex((d) => d.id === lastSelected);\r\n      const [start, end] = [Math.min(currentIndex, lastIndex), Math.max(currentIndex, lastIndex)];\r\n      const rangeIds = droplets.slice(start, end + 1).map((d) => d.id);\r\n      setSelectedDroplets((prevSelected) => [...new Set([...prevSelected, ...rangeIds])]);\r\n    } else {\r\n      setSelectedDroplets([id]);\r\n    }\r\n    setLastSelected(id);\r\n  };\r\n\r\n  const deleteSelectedDroplets = () => {\r\n    setDroplets(droplets.filter((droplet) => !selectedDroplets.includes(droplet.id)));\r\n    setSelectedDroplets([]);\r\n  };\r\n\r\n  const copySelectedDroplets = () => {\r\n    const copiedDroplets = selectedDroplets.map((selectedId) => {\r\n      const dropletToCopy = droplets.find((d) => d.id === selectedId);\r\n      return {\r\n        ...deepClone(dropletToCopy), // Deep clone the droplet to avoid reference sharing\r\n        id: Date.now() + Math.random() // Assign a new unique ID\r\n      };\r\n    });\r\n    \r\n    // Add the copied droplets to the existing list\r\n    setDroplets([...droplets, ...copiedDroplets]);\r\n    \r\n    // Optionally, select the copied droplets\r\n    setSelectedDroplets(copiedDroplets.map((d) => d.id));\r\n  };\r\n\r\n  const handleParameterChange = (nodeId, parameterName, value) => {\r\n    // Update all selected droplets' parameters for the same parameter (name + nodeId)\r\n    setDroplets(droplets.map(droplet => {\r\n      if (selectedDroplets.includes(droplet.id)) {\r\n        return {\r\n          ...droplet,\r\n          parameters: droplet.parameters.map(param =>\r\n            param.name === parameterName && param.nodeId === nodeId\r\n              ? { ...param, value: parseFloat(value) }\r\n              : param\r\n          )\r\n        };\r\n      }\r\n      return droplet;\r\n    }));\r\n  };\r\n\r\n  const toggleSelectAll = () => {\r\n    if (selectedDroplets.length === droplets.length) {\r\n      // If all are selected, deselect all\r\n      setSelectedDroplets([]);\r\n    } else {\r\n      // Otherwise, select all\r\n      setSelectedDroplets(droplets.map(droplet => droplet.id));\r\n    }\r\n  };\r\n\r\n  const handleSimulate = () => {\r\n    onNext(droplets);  // Pass the droplets to the parent component\r\n  };\r\n\r\n  const handleParameterVisibilityChange = (nodeId, paramName, isVisible) => {\r\n    setParameterVisibility(prev => ({\r\n      ...prev,\r\n      [`${nodeId}-${paramName}`]: isVisible\r\n    }));\r\n  };\r\n\r\n  const handleParameterRangeChange = (paramName, type, value) => {\r\n    setParameterRanges(prev => ({\r\n      ...prev,\r\n      [paramName]: {\r\n        ...prev[paramName],\r\n        [type]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleDropletColorSchemeChange = (e) => {\r\n    setDropletColorScheme(e.target.value);\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      display: 'flex', \r\n      flexDirection: 'column', \r\n      height: '100%',\r\n      ...backgroundVariants.mainBackground,\r\n      position: 'relative'\r\n    },\r\n    buttonGroup: {\r\n      marginTop: '20px',\r\n      display: 'flex',\r\n      gap: '10px',\r\n      alignItems: 'center'\r\n    },\r\n    fileInput: {\r\n      marginLeft: '10px',\r\n      ...backgroundVariants.inputBackground\r\n    },\r\n    colorSchemeContainer: {\r\n      position: 'absolute',\r\n      top: '20px',\r\n      right: '20px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-end',\r\n      zIndex: 10,\r\n      backgroundColor: 'rgba(40, 40, 40, 0.8)',\r\n      padding: '10px',\r\n      borderRadius: '5px',\r\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)'\r\n    },\r\n    colorSchemeSelector: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '5px'\r\n    },\r\n    select: {\r\n      padding: '6px 10px',\r\n      borderRadius: '4px',\r\n      border: '1px solid #555',\r\n      backgroundColor: '#333',\r\n      color: 'white',\r\n      minWidth: '140px'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"screen-wide-component\" style={styles.container}>\r\n      <h2>Manual Droplet Creation</h2>\r\n      \r\n      <div style={styles.colorSchemeContainer}>\r\n        <div style={styles.colorSchemeSelector}>\r\n          <label htmlFor=\"dropletColorScheme\">Droplet Colors:</label>\r\n          <select \r\n            id=\"dropletColorScheme\" \r\n            value={dropletColorScheme} \r\n            onChange={handleDropletColorSchemeChange}\r\n            style={styles.select}\r\n          >\r\n            {Object.entries(dropletColorSchemeOptions).map(([key, label]) => (\r\n              <option key={key} value={key}>{label}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <ColorSchemePreview scheme={dropletColorScheme} width=\"100%\" />\r\n      </div>\r\n\r\n      {selectedDroplets.length > 0 && (\r\n        <ParameterAdjustment\r\n          selectedDroplets={droplets.filter((d) => selectedDroplets.includes(d.id))}\r\n          onParameterChange={handleParameterChange}\r\n          onVisibilityChange={handleParameterVisibilityChange}\r\n          onRangeChange={handleParameterRangeChange}\r\n          parameterRanges={parameterRanges}\r\n          selectedCarrierPumps={selectedCarrierPumps}\r\n        />\r\n      )}\r\n\r\n      <div style={styles.buttonGroup}>\r\n        <button \r\n          onClick={addDroplet}\r\n          style={{ ...buttonVariants.primaryButton }}\r\n        >\r\n          Add Droplet\r\n        </button>\r\n        <button \r\n          onClick={toggleSelectAll}\r\n          style={{ ...buttonVariants.secondaryButton }}\r\n        >\r\n          {selectedDroplets.length === droplets.length ? 'Deselect All' : 'Select All'}\r\n        </button>\r\n        <button \r\n          onClick={copySelectedDroplets}\r\n          style={{ ...buttonVariants.secondaryButton }}\r\n        >\r\n          Copy Selected Droplets\r\n        </button>\r\n        <button \r\n          onClick={deleteSelectedDroplets}\r\n          style={{ ...buttonVariants.dangerButton }}\r\n        >\r\n          Delete Selected Droplets\r\n        </button>\r\n        <button \r\n          onClick={exportDroplets}\r\n          style={{ ...buttonVariants.infoButton }}\r\n        >\r\n          Export Droplets\r\n        </button>\r\n        <label style={{ marginLeft: '10px' }}>\r\n          Import Droplets: \r\n          <input\r\n            type=\"file\"\r\n            accept=\"application/json\"\r\n            onChange={importDroplets}\r\n            style={styles.fileInput}\r\n          />\r\n        </label>\r\n        <button \r\n          onClick={handleSimulate}\r\n          style={{ ...buttonVariants.primaryButton }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <h3 style={{ marginTop: '20px', marginBottom: '10px' }}>Droplets List:</h3>\r\n      <DropletList\r\n        droplets={droplets}\r\n        selectedDroplets={selectedDroplets}\r\n        onSelectDroplet={handleSelectDroplet}\r\n        parameterVisibility={parameterVisibility}\r\n        parameterRanges={parameterRanges}\r\n        colorScheme={dropletColorScheme}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualDropletCreation;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,iBAAiB,MAAM,sCAAsC;AACpE,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,kBAAkB,QAAQ,qCAAqC;AACxE,SAASC,eAAe,QAAQ,qCAAqC;;AAErE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,yBAAyB,GAAG;EAChCC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,+BAA+B;EACxCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,SAAS,GAAIC,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,GAAG,CAAC,CAAC;;AAE1D;AACA,MAAMI,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;EAAA,IAAAC,cAAA,EAAAC,cAAA;EACjD,MAAMC,UAAU,GAAGtB,iBAAiB,CAACkB,QAAQ,CAAC;EAC9C,IAAI,EAACI,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEC,UAAU,GAAE,OAAO;IAAEC,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE,GAAG;IAAEC,WAAW,EAAE;EAAG,CAAC;EAEzE,MAAMC,SAAS,GAAGL,UAAU,CAACC,UAAU,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKX,SAAS,CAAC;EACvE,IAAI,CAACQ,SAAS,EAAE,OAAO;IAAEH,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE,GAAG;IAAEC,WAAW,EAAE;EAAG,CAAC;EAE5D,OAAO;IACLF,GAAG,GAAAJ,cAAA,GAAEO,SAAS,CAACH,GAAG,cAAAJ,cAAA,cAAAA,cAAA,GAAI,CAAC;IACvBK,GAAG,GAAAJ,cAAA,GAAEM,SAAS,CAACF,GAAG,cAAAJ,cAAA,cAAAA,cAAA,GAAI,GAAG;IACzBK,WAAW,EAAEC,SAAS,CAACD,WAAW,IAAI;EACxC,CAAC;AACH,CAAC;AAED,MAAMK,qBAAqB,GAAGA,CAAC;EAC7BC,KAAK;EACLC,MAAM;EACNC,oBAAoB;EACpBC,QAAQ;EACRC,WAAW;EACXC,eAAe;EACfC,kBAAkB;EAClBC,mBAAmB;EACnBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgD,YAAY,EAAEC,eAAe,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnD,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;;EAEzE;EACA,MAAMoD,cAAc,GAAG7C,eAAe,CAAC,CAAC;EAExC,MAAM8C,mBAAmB,GAAGjB,KAAK,CAC9BkB,MAAM,CAACC,IAAI,IAAI,CAACjB,oBAAoB,CAACkB,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC,CAAC,CACvDH,MAAM,CAACC,IAAI,IAAI,EAAEA,IAAI,CAACG,IAAI,CAACC,IAAI,KAAK,YAAY,IAAIJ,IAAI,CAACG,IAAI,CAACE,GAAG,KAAK,MAAM,CAAC,CAAC,CAC9EN,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACG,IAAI,CAAC/B,UAAU,IAAI4B,IAAI,CAACG,IAAI,CAAC/B,UAAU,CAACkC,MAAM,GAAG,CAAC,CAAC;;EAE1E;EACA5D,SAAS,CAAC,MAAM;IACd;IACA,MAAM6D,aAAa,GAAG,CAAC,CAAC;IACxB,MAAMC,iBAAiB,GAAG,CAAC,CAAC;IAE5BV,mBAAmB,CAACW,OAAO,CAACT,IAAI,IAAI;MAClC,IAAIA,IAAI,CAACG,IAAI,CAAC/B,UAAU,EAAE;QACxB4B,IAAI,CAACG,IAAI,CAAC/B,UAAU,CAACqC,OAAO,CAACC,KAAK,IAAI;UACpC,MAAMC,GAAG,GAAG,GAAGX,IAAI,CAACE,EAAE,IAAIQ,KAAK,CAAC/B,IAAI,EAAE;UACtC,MAAMiC,KAAK,GAAG9C,iBAAiB,CAACkC,IAAI,CAACG,IAAI,CAACC,IAAI,EAAEM,KAAK,CAAC/B,IAAI,CAAC;UAC3D4B,aAAa,CAACG,KAAK,CAAC/B,IAAI,CAAC,GAAGiC,KAAK;UACjCJ,iBAAiB,CAACG,GAAG,CAAC,GAAG,IAAI;QAC/B,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,IAAIE,MAAM,CAACC,IAAI,CAAC5B,eAAe,CAAC,CAACoB,MAAM,KAAK,CAAC,EAAE;MAC7CnB,kBAAkB,CAACoB,aAAa,CAAC;IACnC;IACA,IAAIM,MAAM,CAACC,IAAI,CAAC1B,mBAAmB,CAAC,CAACkB,MAAM,KAAK,CAAC,EAAE;MACjDjB,sBAAsB,CAACmB,iBAAiB,CAAC;IAC3C;EACF,CAAC,EAAE,CAACV,mBAAmB,EAAEX,kBAAkB,EAAEE,sBAAsB,EAAEH,eAAe,EAAEE,mBAAmB,CAAC,CAAC;EAE3G1C,SAAS,CAAC,MAAM;IACd,IAAIsC,QAAQ,CAACsB,MAAM,KAAK,CAAC,EAAE;MACzB,MAAMS,cAAc,GAAG;QACrBb,EAAE,EAAEc,IAAI,CAACC,GAAG,CAAC,CAAC;QACd7C,UAAU,EAAE0B,mBAAmB,CAACoB,OAAO,CAAClB,IAAI,IAC1CvC,SAAS,CAACuC,IAAI,CAACG,IAAI,CAAC/B,UAAU,CAAC,CAAC+C,GAAG,CAACT,KAAK,KAAK;UAC5CU,MAAM,EAAEpB,IAAI,CAACE,EAAE;UACfmB,QAAQ,EAAErB,IAAI,CAACG,IAAI,CAACmB,KAAK;UACzB3C,IAAI,EAAE+B,KAAK,CAAC/B,IAAI;UAChB4C,OAAO,EAAEb,KAAK,CAACa,OAAO,IAAI,CAAC;UAC3BC,KAAK,EAAEd,KAAK,CAACa,OAAO,IAAI;QAC1B,CAAC,CAAC,CACJ;MACF,CAAC;MAEDtC,WAAW,CAAC,CAAC8B,cAAc,CAAC,CAAC;MAC7BvB,mBAAmB,CAAC,CAACuB,cAAc,CAACb,EAAE,CAAC,CAAC;MACxCR,eAAe,CAACqB,cAAc,CAACb,EAAE,CAAC;IACpC;EACF,CAAC,EAAE,CAACrB,KAAK,EAAEE,oBAAoB,EAAEC,QAAQ,EAAEC,WAAW,EAAEa,mBAAmB,CAAC,CAAC;EAE7E,MAAM2B,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG/D,IAAI,CAACE,SAAS,CAACmB,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACrD,MAAM2C,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,WAAW,CAAC,EAAE;MAAEtB,IAAI,EAAE;IAAmB,CAAC,CAAC;IAClE,MAAMyB,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrC,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;IACfG,IAAI,CAACI,QAAQ,GAAG,eAAe;IAC/BJ,IAAI,CAACK,KAAK,CAAC,CAAC;IACZP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;EAC1B,CAAC;EAED,MAAMU,cAAc,GAAIC,CAAC,IAAK;IAC5B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,IAAI;UACF,MAAMC,gBAAgB,GAAGrF,IAAI,CAACC,KAAK,CAACmF,KAAK,CAACL,MAAM,CAACO,MAAM,CAAC;UACxDhE,WAAW,CAAC+D,gBAAgB,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF,CAAC;MACDN,MAAM,CAACQ,UAAU,CAACX,IAAI,CAAC;IACzB;EACF,CAAC;EAED,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,UAAU,GAAG;MACjBpD,EAAE,EAAEc,IAAI,CAACC,GAAG,CAAC,CAAC;MACd7C,UAAU,EAAE0B,mBAAmB,CAACoB,OAAO,CAAClB,IAAI,IAC1CvC,SAAS,CAACuC,IAAI,CAACG,IAAI,CAAC/B,UAAU,CAAC,CAAC+C,GAAG,CAACT,KAAK,KAAK;QAC5CU,MAAM,EAAEpB,IAAI,CAACE,EAAE;QACfmB,QAAQ,EAAErB,IAAI,CAACG,IAAI,CAACmB,KAAK;QACzB3C,IAAI,EAAE+B,KAAK,CAAC/B,IAAI;QAChB4C,OAAO,EAAEb,KAAK,CAACa,OAAO,IAAI,CAAC;QAC3BC,KAAK,EAAEd,KAAK,CAACa,OAAO,IAAI;MAC1B,CAAC,CAAC,CACJ;IACF,CAAC;IACDtC,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEsE,UAAU,CAAC,CAAC;IACtC9D,mBAAmB,CAAC,CAAC8D,UAAU,CAACpD,EAAE,CAAC,CAAC;IACpCR,eAAe,CAAC4D,UAAU,CAACpD,EAAE,CAAC;EAChC,CAAC;EAED,MAAMqD,mBAAmB,GAAGA,CAACrD,EAAE,EAAE6C,KAAK,KAAK;IACzC,IAAIA,KAAK,CAACS,OAAO,EAAE;MACjBhE,mBAAmB,CAAEiE,YAAY,IAC/BA,YAAY,CAACxD,QAAQ,CAACC,EAAE,CAAC,GACrBuD,YAAY,CAAC1D,MAAM,CAAE2D,SAAS,IAAKA,SAAS,KAAKxD,EAAE,CAAC,GACpD,CAAC,GAAGuD,YAAY,EAAEvD,EAAE,CAC1B,CAAC;IACH,CAAC,MAAM,IAAI6C,KAAK,CAACY,QAAQ,IAAIlE,YAAY,KAAK,IAAI,EAAE;MAClD,MAAMmE,YAAY,GAAG5E,QAAQ,CAAC6E,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAC5D,EAAE,KAAKA,EAAE,CAAC;MAC3D,MAAM6D,SAAS,GAAG/E,QAAQ,CAAC6E,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAC5D,EAAE,KAAKT,YAAY,CAAC;MAClE,MAAM,CAACuE,KAAK,EAAE3D,GAAG,CAAC,GAAG,CAAC4D,IAAI,CAAC5F,GAAG,CAACuF,YAAY,EAAEG,SAAS,CAAC,EAAEE,IAAI,CAAC3F,GAAG,CAACsF,YAAY,EAAEG,SAAS,CAAC,CAAC;MAC3F,MAAMG,QAAQ,GAAGlF,QAAQ,CAACmF,KAAK,CAACH,KAAK,EAAE3D,GAAG,GAAG,CAAC,CAAC,CAACc,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC5D,EAAE,CAAC;MAChEV,mBAAmB,CAAEiE,YAAY,IAAK,CAAC,GAAG,IAAIW,GAAG,CAAC,CAAC,GAAGX,YAAY,EAAE,GAAGS,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC,MAAM;MACL1E,mBAAmB,CAAC,CAACU,EAAE,CAAC,CAAC;IAC3B;IACAR,eAAe,CAACQ,EAAE,CAAC;EACrB,CAAC;EAED,MAAMmE,sBAAsB,GAAGA,CAAA,KAAM;IACnCpF,WAAW,CAACD,QAAQ,CAACe,MAAM,CAAEuE,OAAO,IAAK,CAAC/E,gBAAgB,CAACU,QAAQ,CAACqE,OAAO,CAACpE,EAAE,CAAC,CAAC,CAAC;IACjFV,mBAAmB,CAAC,EAAE,CAAC;EACzB,CAAC;EAED,MAAM+E,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMC,cAAc,GAAGjF,gBAAgB,CAAC4B,GAAG,CAAEsD,UAAU,IAAK;MAC1D,MAAMC,aAAa,GAAG1F,QAAQ,CAACP,IAAI,CAAEqF,CAAC,IAAKA,CAAC,CAAC5D,EAAE,KAAKuE,UAAU,CAAC;MAC/D,OAAO;QACL,GAAGhH,SAAS,CAACiH,aAAa,CAAC;QAAE;QAC7BxE,EAAE,EAAEc,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGgD,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC;MACjC,CAAC;IACH,CAAC,CAAC;;IAEF;IACA1F,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE,GAAGwF,cAAc,CAAC,CAAC;;IAE7C;IACAhF,mBAAmB,CAACgF,cAAc,CAACrD,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC5D,EAAE,CAAC,CAAC;EACtD,CAAC;EAED,MAAM0E,qBAAqB,GAAGA,CAACxD,MAAM,EAAEyD,aAAa,EAAErD,KAAK,KAAK;IAC9D;IACAvC,WAAW,CAACD,QAAQ,CAACmC,GAAG,CAACmD,OAAO,IAAI;MAClC,IAAI/E,gBAAgB,CAACU,QAAQ,CAACqE,OAAO,CAACpE,EAAE,CAAC,EAAE;QACzC,OAAO;UACL,GAAGoE,OAAO;UACVlG,UAAU,EAAEkG,OAAO,CAAClG,UAAU,CAAC+C,GAAG,CAACT,KAAK,IACtCA,KAAK,CAAC/B,IAAI,KAAKkG,aAAa,IAAInE,KAAK,CAACU,MAAM,KAAKA,MAAM,GACnD;YAAE,GAAGV,KAAK;YAAEc,KAAK,EAAEsD,UAAU,CAACtD,KAAK;UAAE,CAAC,GACtCd,KACN;QACF,CAAC;MACH;MACA,OAAO4D,OAAO;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIxF,gBAAgB,CAACe,MAAM,KAAKtB,QAAQ,CAACsB,MAAM,EAAE;MAC/C;MACAd,mBAAmB,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM;MACL;MACAA,mBAAmB,CAACR,QAAQ,CAACmC,GAAG,CAACmD,OAAO,IAAIA,OAAO,CAACpE,EAAE,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAM8E,cAAc,GAAGA,CAAA,KAAM;IAC3BlG,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAE;EACrB,CAAC;EAED,MAAMiG,+BAA+B,GAAGA,CAAC7D,MAAM,EAAEpD,SAAS,EAAEkH,SAAS,KAAK;IACxE7F,sBAAsB,CAAC8F,IAAI,KAAK;MAC9B,GAAGA,IAAI;MACP,CAAC,GAAG/D,MAAM,IAAIpD,SAAS,EAAE,GAAGkH;IAC9B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,0BAA0B,GAAGA,CAACpH,SAAS,EAAEoC,IAAI,EAAEoB,KAAK,KAAK;IAC7DrC,kBAAkB,CAACgG,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACnH,SAAS,GAAG;QACX,GAAGmH,IAAI,CAACnH,SAAS,CAAC;QAClB,CAACoC,IAAI,GAAGoB;MACV;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM6D,8BAA8B,GAAI7C,CAAC,IAAK;IAC5C5C,qBAAqB,CAAC4C,CAAC,CAACE,MAAM,CAAClB,KAAK,CAAC;EACvC,CAAC;EAED,MAAM8D,MAAM,GAAG;IACbC,SAAS,EAAE;MACTC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,MAAM,EAAE,MAAM;MACd,GAAG5I,kBAAkB,CAAC6I,cAAc;MACpCC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXC,SAAS,EAAE,MAAM;MACjBN,OAAO,EAAE,MAAM;MACfO,GAAG,EAAE,MAAM;MACXC,UAAU,EAAE;IACd,CAAC;IACDC,SAAS,EAAE;MACTC,UAAU,EAAE,MAAM;MAClB,GAAGpJ,kBAAkB,CAACqJ;IACxB,CAAC;IACDC,oBAAoB,EAAE;MACpBR,QAAQ,EAAE,UAAU;MACpBS,GAAG,EAAE,MAAM;MACXC,KAAK,EAAE,MAAM;MACbd,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBO,UAAU,EAAE,UAAU;MACtBO,MAAM,EAAE,EAAE;MACVC,eAAe,EAAE,uBAAuB;MACxCC,OAAO,EAAE,MAAM;MACfC,YAAY,EAAE,KAAK;MACnBC,SAAS,EAAE;IACb,CAAC;IACDC,mBAAmB,EAAE;MACnBpB,OAAO,EAAE,MAAM;MACfQ,UAAU,EAAE,QAAQ;MACpBD,GAAG,EAAE;IACP,CAAC;IACDc,MAAM,EAAE;MACNJ,OAAO,EAAE,UAAU;MACnBC,YAAY,EAAE,KAAK;MACnBI,MAAM,EAAE,gBAAgB;MACxBN,eAAe,EAAE,MAAM;MACvBO,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE;IACZ;EACF,CAAC;EAED,oBACE9J,OAAA;IAAK+J,SAAS,EAAC,uBAAuB;IAACC,KAAK,EAAE5B,MAAM,CAACC,SAAU;IAAA4B,QAAA,gBAC7DjK,OAAA;MAAAiK,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEhCrK,OAAA;MAAKgK,KAAK,EAAE5B,MAAM,CAACc,oBAAqB;MAAAe,QAAA,gBACtCjK,OAAA;QAAKgK,KAAK,EAAE5B,MAAM,CAACsB,mBAAoB;QAAAO,QAAA,gBACrCjK,OAAA;UAAOsK,OAAO,EAAC,oBAAoB;UAAAL,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3DrK,OAAA;UACEgD,EAAE,EAAC,oBAAoB;UACvBsB,KAAK,EAAE7B,kBAAmB;UAC1B8H,QAAQ,EAAEpC,8BAA+B;UACzC6B,KAAK,EAAE5B,MAAM,CAACuB,MAAO;UAAAM,QAAA,EAEpBtG,MAAM,CAAC6G,OAAO,CAACvK,yBAAyB,CAAC,CAACgE,GAAG,CAAC,CAAC,CAACR,GAAG,EAAEW,KAAK,CAAC,kBAC1DpE,OAAA;YAAkBsE,KAAK,EAAEb,GAAI;YAAAwG,QAAA,EAAE7F;UAAK,GAAvBX,GAAG;YAAAyG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6B,CAC9C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNrK,OAAA,CAACH,kBAAkB;QAAC4K,MAAM,EAAEhI,kBAAmB;QAACiI,KAAK,EAAC;MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,EAELhI,gBAAgB,CAACe,MAAM,GAAG,CAAC,iBAC1BpD,OAAA,CAACN,mBAAmB;MAClB2C,gBAAgB,EAAEP,QAAQ,CAACe,MAAM,CAAE+D,CAAC,IAAKvE,gBAAgB,CAACU,QAAQ,CAAC6D,CAAC,CAAC5D,EAAE,CAAC,CAAE;MAC1E2H,iBAAiB,EAAEjD,qBAAsB;MACzCkD,kBAAkB,EAAE7C,+BAAgC;MACpD8C,aAAa,EAAE3C,0BAA2B;MAC1ClG,eAAe,EAAEA,eAAgB;MACjCH,oBAAoB,EAAEA;IAAqB;MAAAqI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACF,eAEDrK,OAAA;MAAKgK,KAAK,EAAE5B,MAAM,CAACO,WAAY;MAAAsB,QAAA,gBAC7BjK,OAAA;QACE8K,OAAO,EAAE3E,UAAW;QACpB6D,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACoI;QAAc,CAAE;QAAAd,QAAA,EAC5C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTrK,OAAA;QACE8K,OAAO,EAAEjD,eAAgB;QACzBmC,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACqI;QAAgB,CAAE;QAAAf,QAAA,EAE5C5H,gBAAgB,CAACe,MAAM,KAAKtB,QAAQ,CAACsB,MAAM,GAAG,cAAc,GAAG;MAAY;QAAA8G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC,eACTrK,OAAA;QACE8K,OAAO,EAAEzD,oBAAqB;QAC9B2C,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACqI;QAAgB,CAAE;QAAAf,QAAA,EAC9C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTrK,OAAA;QACE8K,OAAO,EAAE3D,sBAAuB;QAChC6C,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACsI;QAAa,CAAE;QAAAhB,QAAA,EAC3C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTrK,OAAA;QACE8K,OAAO,EAAEvG,cAAe;QACxByF,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACuI;QAAW,CAAE;QAAAjB,QAAA,EACzC;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTrK,OAAA;QAAOgK,KAAK,EAAE;UAAEhB,UAAU,EAAE;QAAO,CAAE;QAAAiB,QAAA,GAAC,kBAEpC,eAAAjK,OAAA;UACEkD,IAAI,EAAC,MAAM;UACXiI,MAAM,EAAC,kBAAkB;UACzBZ,QAAQ,EAAElF,cAAe;UACzB2E,KAAK,EAAE5B,MAAM,CAACW;QAAU;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRrK,OAAA;QACE8K,OAAO,EAAEhD,cAAe;QACxBkC,KAAK,EAAE;UAAE,GAAGrH,cAAc,CAACoI;QAAc,CAAE;QAAAd,QAAA,EAC5C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENrK,OAAA;MAAIgK,KAAK,EAAE;QAAEpB,SAAS,EAAE,MAAM;QAAEwC,YAAY,EAAE;MAAO,CAAE;MAAAnB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3ErK,OAAA,CAACP,WAAW;MACVqC,QAAQ,EAAEA,QAAS;MACnBO,gBAAgB,EAAEA,gBAAiB;MACnCgJ,eAAe,EAAEhF,mBAAoB;MACrCnE,mBAAmB,EAAEA,mBAAoB;MACzCF,eAAe,EAAEA,eAAgB;MACjCsJ,WAAW,EAAE7I;IAAmB;MAAAyH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjI,EAAA,CAxVIV,qBAAqB;EAAA,QAgBF5B,eAAe;AAAA;AAAAyL,EAAA,GAhBlC7J,qBAAqB;AA0V3B,eAAeA,qBAAqB;AAAC,IAAA6J,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}