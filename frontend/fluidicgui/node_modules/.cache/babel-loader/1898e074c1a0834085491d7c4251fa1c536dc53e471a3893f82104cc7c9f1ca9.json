{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\DetectorComponents\\\\WaterfallComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { backgroundVariants } from '../../../styles/backgroundStyles';\n\n// Available waterfall color schemes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst waterfallColorSchemeOptions = {\n  thermal: 'Thermal (Black → Red → Yellow → White)',\n  rainbow: 'Rainbow (ROYGBIV)',\n  grayscale: 'Grayscale',\n  viridis: 'Viridis (Perceptually uniform)',\n  plasma: 'Plasma',\n  inferno: 'Inferno',\n  cividis: 'Cividis (Colorblind-friendly)',\n  turbo: 'Turbo (Enhanced rainbow)'\n};\n\n// Waterfall color scheme preview component\nconst WaterfallColorPreview = ({\n  scheme,\n  width = '100%'\n}) => {\n  // Get a gradient preview based on the selected color scale\n  const getGradientForScheme = scale => {\n    if (scale === 'grayscale') {\n      return 'linear-gradient(to right, #000000, #ffffff)';\n    } else if (scale === 'thermal') {\n      return 'linear-gradient(to right, #000000, #ff0000, #ffff00, #ffffff)';\n    } else if (scale === 'rainbow') {\n      return 'linear-gradient(to right, #ff0000, #ff7f00, #ffff00, #00ff00, #0000ff, #8b00ff)';\n    } else if (scale === 'viridis') {\n      return 'linear-gradient(to right, rgb(68, 1, 84), rgb(59, 82, 139), rgb(33, 144, 141), rgb(126, 211, 33), rgb(253, 231, 37))';\n    } else if (scale === 'plasma') {\n      return 'linear-gradient(to right, rgb(13, 8, 135), rgb(156, 71, 155), rgb(240, 189, 60), rgb(252, 255, 164))';\n    } else if (scale === 'inferno') {\n      return 'linear-gradient(to right, rgb(0, 0, 4), rgb(120, 28, 99), rgb(220, 40, 39), rgb(252, 250, 67))';\n    } else if (scale === 'cividis') {\n      return 'linear-gradient(to right, rgb(0, 32, 77), rgb(97, 185, 144), rgb(255, 240, 30))';\n    } else if (scale === 'turbo') {\n      return 'linear-gradient(to right, rgb(48, 18, 227), rgb(48, 165, 177), rgb(82, 229, 46), rgb(255, 239, 36), rgb(210, 96, 31), rgb(130, 19, 56))';\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: getGradientForScheme(scheme),\n      height: '15px',\n      width: width,\n      borderRadius: '3px',\n      marginTop: '5px'\n    },\n    title: `Preview of ${scheme} color scale`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = WaterfallColorPreview;\nconst WaterfallComponent = ({\n  onResize,\n  lineData,\n  frameAccumCount,\n  isAccumulating,\n  colorScale: externalColorScale,\n  onColorScaleChange\n}) => {\n  _s();\n  const buttonVariants = useButtonStyles();\n  const [waterfallSize, setWaterfallSize] = useState({\n    width: '100%',\n    height: 180\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n  const [historyData, setHistoryData] = useState([]);\n  const [maxHistoryLength, setMaxHistoryLength] = useState(100); // Store last 100 frames by default\n  const [activeChannel, setActiveChannel] = useState('intensity'); // Options: 'red', 'green', 'blue', 'intensity'\n  const [internalColorScale, setInternalColorScale] = useState('thermal'); // Options: 'thermal', 'rainbow', 'grayscale'\n\n  // Export file name prefix\n  const [filePrefix, setFilePrefix] = useState('waterfall');\n\n  // Status message for operations\n  const [saveMessage, setSaveMessage] = useState('');\n\n  // Use external color scale if provided, otherwise use internal state\n  const colorScale = externalColorScale !== undefined ? externalColorScale : internalColorScale;\n\n  // Accumulation state\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\n\n  // New state for showing color selector\n  const [showColorSelector, setShowColorSelector] = useState(false);\n  const waterfallContainerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Add new line data to history, supporting frame accumulation\n  useEffect(() => {\n    if (lineData !== null && lineData !== void 0 && lineData.pixelData) {\n      if (isAccumulating) {\n        // Add new frame to accumulation buffer\n        setAccumulatedFrames(prev => {\n          const newFrames = [...prev, lineData.pixelData];\n\n          // If we've reached our target frame count, process the accumulated data\n          if (newFrames.length >= frameAccumCount) {\n            // Sum the color data across all frames\n            const summedData = sumFrameData(newFrames);\n\n            // Add summed data to history\n            setHistoryData(prev => {\n              const newHistory = [...prev, summedData];\n              // Trim history if it exceeds maximum length\n              if (newHistory.length > maxHistoryLength) {\n                return newHistory.slice(newHistory.length - maxHistoryLength);\n              }\n              return newHistory;\n            });\n\n            // Reset the accumulation buffer\n            return [];\n          }\n          return newFrames;\n        });\n      } else {\n        // When not accumulating, add each frame directly to history\n        setHistoryData(prev => {\n          const newHistory = [...prev, lineData.pixelData];\n          // Trim history if it exceeds maximum length\n          if (newHistory.length > maxHistoryLength) {\n            return newHistory.slice(newHistory.length - maxHistoryLength);\n          }\n          return newHistory;\n        });\n      }\n    }\n  }, [lineData, maxHistoryLength, isAccumulating, frameAccumCount]);\n\n  // Sum pixel data across multiple frames (similar to GraphComponent)\n  const sumFrameData = frames => {\n    if (!frames.length) return null;\n\n    // Use the first frame as a template for structure\n    const template = frames[0];\n\n    // Initialize arrays for summed values\n    const summedRed = Array(template.red.length).fill(0);\n    const summedGreen = Array(template.green.length).fill(0);\n    const summedBlue = Array(template.blue.length).fill(0);\n    const summedIntensity = Array(template.intensity.length).fill(0);\n\n    // Sum values across all frames\n    frames.forEach(frame => {\n      frame.red.forEach((val, i) => summedRed[i] += val);\n      frame.green.forEach((val, i) => summedGreen[i] += val);\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\n    });\n\n    // Return the summed data structure\n    return {\n      timestamp: Date.now(),\n      positions: template.positions,\n      // Positions remain the same\n      red: summedRed,\n      green: summedGreen,\n      blue: summedBlue,\n      intensity: summedIntensity,\n      lineLength: template.lineLength,\n      frameCount: frames.length // Add count of frames that were summed\n    };\n  };\n\n  // Initialize and resize the canvas when waterfall size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const container = waterfallContainerRef.current;\n      if (container) {\n        // Set canvas size to match container\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n\n        // Redraw waterfall with new size\n        if (historyData.length > 0) {\n          drawWaterfall();\n        }\n      }\n    }\n  }, [waterfallSize, historyData.length]);\n\n  // Draw the waterfall when history or active channel changes\n  useEffect(() => {\n    if (historyData.length > 0) {\n      drawWaterfall();\n    }\n  }, [historyData, activeChannel, colorScale]);\n\n  // Draw the waterfall visualization\n  const drawWaterfall = () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n\n    // If no data, show a message\n    if (historyData.length === 0) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.font = '12px sans-serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('No data available for waterfall view', width / 2, height / 2);\n      return;\n    }\n\n    // Calculate the height of each row in the waterfall\n    const rowHeight = height / Math.min(historyData.length, maxHistoryLength);\n\n    // Find the min and max for this channel across all history for consistent color scaling\n    let minVal = Number.MAX_VALUE;\n    let maxVal = Number.MIN_VALUE;\n    historyData.forEach(data => {\n      if (data[activeChannel]) {\n        const channelData = data[activeChannel];\n        const localMin = Math.min(...channelData);\n        const localMax = Math.max(...channelData);\n        minVal = Math.min(minVal, localMin);\n        maxVal = Math.max(maxVal, localMax);\n      }\n    });\n\n    // Ensure we don't have a zero range\n    if (maxVal === minVal) maxVal = minVal + 1;\n\n    // Draw each row of the waterfall (most recent at the top)\n    historyData.forEach((frameData, frameIndex) => {\n      // Skip if data doesn't have the selected channel\n      if (!frameData[activeChannel]) return;\n      const values = frameData[activeChannel];\n      const positions = frameData.positions;\n\n      // Calculate Y position for this row (newest data at top)\n      const y = frameIndex * rowHeight;\n\n      // Create an image data for smooth rendering\n      const imageData = ctx.createImageData(width, Math.ceil(rowHeight));\n      const data = imageData.data;\n\n      // For each horizontal pixel in the image data\n      for (let x = 0; x < width; x++) {\n        // Map the x coordinate back to a position in the spectral data\n        const position = x / width;\n\n        // Find the two closest data points for interpolation\n        let leftIndex = 0;\n        let rightIndex = positions.length - 1;\n\n        // Find the data points that surround this position\n        for (let i = 0; i < positions.length - 1; i++) {\n          if (positions[i] <= position && positions[i + 1] > position) {\n            leftIndex = i;\n            rightIndex = i + 1;\n            break;\n          }\n        }\n\n        // Calculate interpolation factor between the two points\n        let factor = 0;\n        if (positions[rightIndex] !== positions[leftIndex]) {\n          factor = (position - positions[leftIndex]) / (positions[rightIndex] - positions[leftIndex]);\n        }\n\n        // Interpolate the value\n        const leftValue = values[leftIndex];\n        const rightValue = values[rightIndex];\n        const interpolatedValue = leftValue + (rightValue - leftValue) * factor;\n\n        // Normalize the interpolated value\n        const normalizedValue = (interpolatedValue - minVal) / (maxVal - minVal);\n\n        // Get color for this value\n        const colorStr = getColorForValue(normalizedValue, colorScale);\n        // Convert the rgb string to components\n        const rgbMatch = colorStr.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n        const r = parseInt(rgbMatch[1], 10);\n        const g = parseInt(rgbMatch[2], 10);\n        const b = parseInt(rgbMatch[3], 10);\n\n        // Fill the entire column for this row with the color\n        for (let yOffset = 0; yOffset < Math.ceil(rowHeight); yOffset++) {\n          const pixelIndex = (yOffset * width + x) * 4;\n          data[pixelIndex] = r; // R\n          data[pixelIndex + 1] = g; // G\n          data[pixelIndex + 2] = b; // B\n          data[pixelIndex + 3] = 255; // Alpha (fully opaque)\n        }\n      }\n\n      // Put the image data on the canvas\n      ctx.putImageData(imageData, 0, y);\n    });\n\n    // Draw time scale on the right\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n    ctx.fillRect(width - 60, 0, 60, height);\n\n    // Only draw time labels if we have multiple frames\n    if (historyData.length > 1) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.font = '10px monospace';\n      ctx.textAlign = 'right';\n\n      // Draw \"Now\" at the top\n      ctx.fillText('Now', width - 5, 12);\n\n      // Draw a few time markers\n      const timePoints = [0.25, 0.5, 0.75, 1.0];\n      timePoints.forEach(point => {\n        const y = height * point;\n        // Calculate time difference based on frame positions\n        const frameIndex = Math.floor((historyData.length - 1) * point);\n        if (frameIndex < historyData.length && historyData[frameIndex]) {\n          const timeDiff = (Date.now() - historyData[frameIndex].timestamp) / 1000; // in seconds\n          ctx.fillText(`-${timeDiff.toFixed(1)}s`, width - 5, y);\n        }\n      });\n    }\n\n    // Draw legend\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Channel: ${activeChannel}`, 5, 12);\n\n    // Show scale with 2 decimal places for intensity, integers for other channels\n    if (activeChannel === 'intensity') {\n      ctx.fillText(`Scale: ${minVal.toFixed(2)}-${maxVal.toFixed(2)}`, 5, 27);\n    } else {\n      ctx.fillText(`Scale: ${minVal.toFixed(0)}-${maxVal.toFixed(0)}`, 5, 27);\n    }\n\n    // Show accumulation status\n    if (isAccumulating) {\n      const statusText = `Accum: ${accumulatedFrames.length}/${frameAccumCount}`;\n      ctx.fillText(statusText, 5, 42);\n    }\n  };\n\n  // Get a color for a normalized value (0-1) based on selected color scale\n  const getColorForValue = (value, scale) => {\n    // Ensure value is between 0 and 1\n    value = Math.max(0, Math.min(1, value));\n    if (scale === 'grayscale') {\n      const intensity = Math.floor(value * 255);\n      return `rgb(${intensity}, ${intensity}, ${intensity})`;\n    } else if (scale === 'thermal') {\n      // Thermal scale: black->red->yellow->white\n      let r, g, b;\n      if (value < 0.33) {\n        // Black to red\n        r = Math.floor(value / 0.33 * 255);\n        g = 0;\n        b = 0;\n      } else if (value < 0.66) {\n        // Red to yellow\n        r = 255;\n        g = Math.floor((value - 0.33) / 0.33 * 255);\n        b = 0;\n      } else {\n        // Yellow to white\n        r = 255;\n        g = 255;\n        b = Math.floor((value - 0.66) / 0.34 * 255);\n      }\n      return `rgb(${r}, ${g}, ${b})`;\n    } else if (scale === 'rainbow') {\n      // Rainbow scale (ROYGBIV)\n      let r, g, b;\n      if (value < 0.2) {\n        // Red to orange\n        r = 255;\n        g = Math.floor(value / 0.2 * 127);\n        b = 0;\n      } else if (value < 0.4) {\n        // Orange to yellow\n        r = 255;\n        g = 127 + Math.floor((value - 0.2) / 0.2 * 128);\n        b = 0;\n      } else if (value < 0.6) {\n        // Yellow to green\n        r = 255 - Math.floor((value - 0.4) / 0.2 * 255);\n        g = 255;\n        b = 0;\n      } else if (value < 0.8) {\n        // Green to blue\n        r = 0;\n        g = 255 - Math.floor((value - 0.6) / 0.2 * 255);\n        b = Math.floor((value - 0.6) / 0.2 * 255);\n      } else {\n        // Blue to violet\n        r = Math.floor((value - 0.8) / 0.2 * 128);\n        g = 0;\n        b = 255;\n      }\n      return `rgb(${r}, ${g}, ${b})`;\n    } else if (scale === 'viridis') {\n      // Viridis scale implementation\n      if (value < 0.25) {\n        // Dark purple to blue\n        const p = value * 4;\n        return `rgb(${Math.round(68 - p * 9)}, ${Math.round(1 + p * 81)}, ${Math.round(84 + p * 55)})`;\n      } else if (value < 0.5) {\n        // Blue to teal\n        const p = (value - 0.25) * 4;\n        return `rgb(${Math.round(59 - p * 26)}, ${Math.round(82 + p * 62)}, ${Math.round(139 + p * 2)})`;\n      } else if (value < 0.75) {\n        // Teal to green\n        const p = (value - 0.5) * 4;\n        return `rgb(${Math.round(33 + p * 93)}, ${Math.round(144 + p * 67)}, ${Math.round(141 - p * 108)})`;\n      } else {\n        // Green to yellow\n        const p = (value - 0.75) * 4;\n        return `rgb(${Math.round(126 + p * 127)}, ${Math.round(211 + p * 20)}, ${Math.round(33 + p * 4)})`;\n      }\n    } else if (scale === 'plasma') {\n      // Plasma scale implementation\n      if (value < 0.33) {\n        // Deep blue to purple\n        const p = value * 3;\n        return `rgb(${Math.round(13 + p * 143)}, ${Math.round(8 + p * 63)}, ${Math.round(135 + p * 20)})`;\n      } else if (value < 0.66) {\n        // Purple to orange\n        const p = (value - 0.33) * 3;\n        return `rgb(${Math.round(156 + p * 84)}, ${Math.round(71 + p * 118)}, ${Math.round(155 - p * 95)})`;\n      } else {\n        // Orange to light yellow\n        const p = (value - 0.66) * 3;\n        return `rgb(${Math.round(240 + p * 12)}, ${Math.round(189 + p * 66)}, ${Math.round(60 + p * 104)})`;\n      }\n    } else if (scale === 'inferno') {\n      // Inferno scale implementation\n      if (value < 0.33) {\n        // Black to purple\n        const p = value * 3;\n        return `rgb(${Math.round(0 + p * 120)}, ${Math.round(0 + p * 28)}, ${Math.round(4 + p * 95)})`;\n      } else if (value < 0.66) {\n        // Purple to red\n        const p = (value - 0.33) * 3;\n        return `rgb(${Math.round(120 + p * 100)}, ${Math.round(28 + p * 12)}, ${Math.round(99 - p * 60)})`;\n      } else {\n        // Red to yellow\n        const p = (value - 0.66) * 3;\n        return `rgb(${Math.round(220 + p * 32)}, ${Math.round(40 + p * 210)}, ${Math.round(39 + p * 28)})`;\n      }\n    } else if (scale === 'cividis') {\n      // Cividis scale implementation\n      if (value < 0.5) {\n        // Dark blue to teal\n        const p = value * 2;\n        return `rgb(${Math.round(0 + p * 97)}, ${Math.round(32 + p * 153)}, ${Math.round(77 + p * 67)})`;\n      } else {\n        // Teal to yellow\n        const p = (value - 0.5) * 2;\n        return `rgb(${Math.round(97 + p * 158)}, ${Math.round(185 + p * 55)}, ${Math.round(144 - p * 114)})`;\n      }\n    } else if (scale === 'turbo') {\n      // Turbo scale implementation\n      if (value < 0.2) {\n        // Blue to cyan\n        const p = value * 5;\n        return `rgb(${Math.round(48)}, ${Math.round(18 + p * 147)}, ${Math.round(227 - p * 50)})`;\n      } else if (value < 0.4) {\n        // Cyan to green\n        const p = (value - 0.2) * 5;\n        return `rgb(${Math.round(48 + p * 34)}, ${Math.round(165 + p * 64)}, ${Math.round(177 - p * 131)})`;\n      } else if (value < 0.6) {\n        // Green to yellow\n        const p = (value - 0.4) * 5;\n        return `rgb(${Math.round(82 + p * 173)}, ${Math.round(229 + p * 10)}, ${Math.round(46 - p * 10)})`;\n      } else if (value < 0.8) {\n        // Yellow to orange\n        const p = (value - 0.6) * 5;\n        return `rgb(${Math.round(255 - p * 45)}, ${Math.round(239 - p * 143)}, ${Math.round(36 - p * 5)})`;\n      } else {\n        // Orange to red\n        const p = (value - 0.8) * 5;\n        return `rgb(${Math.round(210 - p * 80)}, ${Math.round(96 - p * 77)}, ${Math.round(31 + p * 25)})`;\n      }\n    }\n\n    // Default to grayscale if unknown scale\n    const intensity = Math.floor(value * 255);\n    return `rgb(${intensity}, ${intensity}, ${intensity})`;\n  };\n\n  // Toggle between color channels\n  const toggleChannel = () => {\n    const channels = ['intensity', 'red', 'green', 'blue'];\n    const currentIndex = channels.indexOf(activeChannel);\n    const nextIndex = (currentIndex + 1) % channels.length;\n    setActiveChannel(channels[nextIndex]);\n  };\n\n  // Handle color scale change from dropdown\n  const handleColorScaleChange = e => {\n    const newColorScale = e.target.value;\n\n    // Update internal state\n    setInternalColorScale(newColorScale);\n\n    // Notify parent if callback exists\n    if (onColorScaleChange) {\n      onColorScaleChange(newColorScale);\n    }\n\n    // Hide selector after selection\n    setShowColorSelector(false);\n  };\n\n  // Clear history data\n  const clearHistory = () => {\n    setHistoryData([]);\n    setAccumulatedFrames([]);\n  };\n\n  // Export waterfall data as text file\n  const exportWaterfallData = () => {\n    // Make sure we have data to export\n    if (!historyData || historyData.length === 0) {\n      console.warn('No data to export');\n      setSaveMessage('No data to export');\n      setTimeout(() => setSaveMessage(''), 3000);\n      return;\n    }\n    try {\n      var _historyData$, _historyData$$positio;\n      // Create content with header\n      let content = `# Waterfall Data Export\\n`;\n      content += `# Channel: ${activeChannel}\\n`;\n      content += `# Timestamp: ${new Date().toISOString()}\\n`;\n      content += `# Color Scale: ${colorScale}\\n`;\n      content += `# Format: wavelength;frame1;frame2;frame3;...\\n`;\n      content += `# Each row contains one wavelength position with intensity values from all frames\\n\\n`;\n\n      // Determine how many data points are in each frame (assume consistent)\n      const pointsPerFrame = ((_historyData$ = historyData[0]) === null || _historyData$ === void 0 ? void 0 : (_historyData$$positio = _historyData$.positions) === null || _historyData$$positio === void 0 ? void 0 : _historyData$$positio.length) || 0;\n      if (pointsPerFrame === 0) {\n        throw new Error('Invalid data format');\n      }\n\n      // For each wavelength position\n      for (let posIndex = 0; posIndex < pointsPerFrame; posIndex++) {\n        // Get the wavelength/position value from the first frame\n        // (assuming positions are consistent across frames)\n        const wavelength = historyData[0].positions[posIndex];\n\n        // Start with the wavelength\n        let line = `${wavelength.toFixed(4)}`;\n\n        // Add intensity from each frame for this position\n        for (let frameIndex = 0; frameIndex < historyData.length; frameIndex++) {\n          const frame = historyData[frameIndex];\n          const intensity = frame[activeChannel][posIndex];\n          line += `;${intensity.toFixed(2)}`;\n        }\n\n        // Add the completed line\n        content += line + '\\n';\n      }\n\n      // Create a timestamp string in format YYYYMMDDhhmmss\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0') + String(now.getSeconds()).padStart(2, '0');\n\n      // Create filename with prefix and timestamp\n      const fileName = `${filePrefix}_${timestamp}.txt`;\n\n      // Create Blob with content\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n\n      // Append to document, click, and remove\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }, 100);\n\n      // Show success message\n      setSaveMessage(`Data exported as ${fileName}`);\n      setTimeout(() => setSaveMessage(''), 3000);\n    } catch (error) {\n      console.error('Failed to export waterfall data:', error);\n      setSaveMessage('Error exporting data');\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  // Similar resize functionality as before\n  const handleResizeStart = e => {\n    var _waterfallContainerRe, _waterfallContainerRe2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_waterfallContainerRe = waterfallContainerRef.current) === null || _waterfallContainerRe === void 0 ? void 0 : _waterfallContainerRe.clientWidth) || 400;\n    const startHeight = ((_waterfallContainerRe2 = waterfallContainerRef.current) === null || _waterfallContainerRe2 === void 0 ? void 0 : _waterfallContainerRe2.clientHeight) || waterfallSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaY = moveEvent.clientY - startY;\n\n      // Only adjust height, keep width as 100%\n      const newHeight = Math.max(100, startHeight + deltaY);\n\n      // Update waterfall size\n      const newSize = {\n        width: '100%',\n        // Keep width as 100% for responsive behavior\n        height: Math.round(newHeight)\n      };\n      setWaterfallSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  const styles = {\n    container: {\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    waterfallView: {\n      width: waterfallSize.width,\n      height: `${waterfallSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'ns-resize',\n      // Only allow vertical resizing\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    controls: {\n      display: 'flex',\n      gap: '5px'\n    },\n    noData: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      color: 'rgba(255, 255, 255, 0.5)',\n      fontSize: '12px'\n    },\n    // Color scheme selector styles\n    colorSchemeContainer: {\n      position: 'absolute',\n      top: '40px',\n      right: '10px',\n      zIndex: 50,\n      backgroundColor: 'rgba(40, 40, 40, 0.9)',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)',\n      display: showColorSelector ? 'block' : 'none'\n    },\n    colorSchemeSelector: {\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'column',\n      gap: '5px'\n    },\n    select: {\n      padding: '6px 10px',\n      borderRadius: '4px',\n      border: '1px solid #555',\n      backgroundColor: '#333',\n      color: 'white',\n      width: '100%'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: \"Waterfall Display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controls,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallIconButton,\n          onClick: toggleChannel,\n          title: `Current channel: ${activeChannel}`,\n          children: activeChannel === 'red' ? '🔴' : activeChannel === 'green' ? '🟢' : activeChannel === 'blue' ? '🔵' : '⚪'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallIconButton,\n          onClick: () => setShowColorSelector(!showColorSelector),\n          title: `Color scale: ${colorScale} (click to change)`,\n          children: \"\\uD83C\\uDFA8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallIconButton,\n          onClick: clearHistory,\n          title: \"Clear history\",\n          children: \"\\uD83D\\uDDD1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '5px',\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: filePrefix,\n        onChange: e => setFilePrefix(e.target.value),\n        placeholder: \"File prefix\",\n        style: {\n          padding: '2px 4px',\n          backgroundColor: 'rgba(30, 30, 30, 0.8)',\n          color: 'white',\n          border: '1px solid rgba(80, 80, 80, 0.5)',\n          borderRadius: '3px',\n          fontSize: '12px',\n          width: '100px'\n        },\n        title: \"Prefix for the exported data filename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallSecondary,\n          backgroundColor: 'rgba(20, 120, 220, 0.7)'\n        },\n        onClick: exportWaterfallData,\n        title: \"Export waterfall data as text file\",\n        disabled: !historyData || historyData.length === 0,\n        children: \"\\uD83D\\uDCBE Export Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 9\n      }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: '11px',\n          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n          padding: '2px 6px',\n          borderRadius: '3px',\n          marginLeft: '5px',\n          color: 'rgba(255, 255, 255, 0.9)'\n        },\n        children: saveMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.colorSchemeContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.colorSchemeSelector,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"waterfallColorScheme\",\n          children: \"Color Scale:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"waterfallColorScheme\",\n          value: colorScale,\n          onChange: handleColorScaleChange,\n          style: styles.select,\n          children: Object.entries(waterfallColorSchemeOptions).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: label\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WaterfallColorPreview, {\n          scheme: colorScale,\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: waterfallContainerRef,\n      style: styles.waterfallView,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: styles.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 9\n      }, this), historyData.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.noData,\n        children: \"Draw a line on the camera feed to see waterfall data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [\"Height: \", waterfallSize.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize waterfall height\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2,6 L10,6 M2,9 L10,9\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 868,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 771,\n    columnNumber: 5\n  }, this);\n};\n_s(WaterfallComponent, \"IcvSYiJ3S6BzZXJ8rOR7M70Zd8Q=\", false, function () {\n  return [useButtonStyles];\n});\n_c2 = WaterfallComponent;\nexport default WaterfallComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"WaterfallColorPreview\");\n$RefreshReg$(_c2, \"WaterfallComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useButtonStyles","backgroundVariants","jsxDEV","_jsxDEV","waterfallColorSchemeOptions","thermal","rainbow","grayscale","viridis","plasma","inferno","cividis","turbo","WaterfallColorPreview","scheme","width","getGradientForScheme","scale","style","background","height","borderRadius","marginTop","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","WaterfallComponent","onResize","lineData","frameAccumCount","isAccumulating","colorScale","externalColorScale","onColorScaleChange","_s","buttonVariants","waterfallSize","setWaterfallSize","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","historyData","setHistoryData","maxHistoryLength","setMaxHistoryLength","activeChannel","setActiveChannel","internalColorScale","setInternalColorScale","filePrefix","setFilePrefix","saveMessage","setSaveMessage","undefined","accumulatedFrames","setAccumulatedFrames","showColorSelector","setShowColorSelector","waterfallContainerRef","canvasRef","pixelData","prev","newFrames","length","summedData","sumFrameData","newHistory","slice","frames","template","summedRed","Array","red","fill","summedGreen","green","summedBlue","blue","summedIntensity","intensity","forEach","frame","val","i","timestamp","Date","now","positions","lineLength","frameCount","current","canvas","container","clientWidth","clientHeight","drawWaterfall","ctx","getContext","clearRect","fillStyle","fillRect","font","textAlign","textBaseline","fillText","rowHeight","Math","min","minVal","Number","MAX_VALUE","maxVal","MIN_VALUE","data","channelData","localMin","localMax","max","frameData","frameIndex","values","y","imageData","createImageData","ceil","x","position","leftIndex","rightIndex","factor","leftValue","rightValue","interpolatedValue","normalizedValue","colorStr","getColorForValue","rgbMatch","match","r","parseInt","g","b","yOffset","pixelIndex","putImageData","timePoints","point","floor","timeDiff","toFixed","statusText","value","p","round","toggleChannel","channels","currentIndex","indexOf","nextIndex","handleColorScaleChange","e","newColorScale","target","clearHistory","exportWaterfallData","console","warn","setTimeout","_historyData$","_historyData$$positio","content","toISOString","pointsPerFrame","Error","posIndex","wavelength","line","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","handleResizeStart","_waterfallContainerRe","_waterfallContainerRe2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","startHeight","handleMouseMove","moveEvent","deltaY","newHeight","newSize","handleMouseUp","removeEventListener","addEventListener","styles","backgroundColor","padding","border","margin","fontSize","display","justifyContent","alignItems","waterfallView","overflow","top","left","resizeHandle","bottom","right","cursor","zIndex","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","color","controls","gap","noData","colorSchemeContainer","boxShadow","colorSchemeSelector","flexDirection","select","children","smallIconButton","onClick","marginBottom","onChange","placeholder","smallSecondary","disabled","marginLeft","htmlFor","id","Object","entries","map","key","label","ref","onMouseDown","viewBox","d","stroke","strokeWidth","strokeLinecap","_c2","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/DetectorComponents/WaterfallComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\r\nimport { backgroundVariants } from '../../../styles/backgroundStyles';\r\n\r\n// Available waterfall color schemes\r\nconst waterfallColorSchemeOptions = {\r\n  thermal: 'Thermal (Black → Red → Yellow → White)',\r\n  rainbow: 'Rainbow (ROYGBIV)',\r\n  grayscale: 'Grayscale',\r\n  viridis: 'Viridis (Perceptually uniform)',\r\n  plasma: 'Plasma',\r\n  inferno: 'Inferno',\r\n  cividis: 'Cividis (Colorblind-friendly)',\r\n  turbo: 'Turbo (Enhanced rainbow)'\r\n};\r\n\r\n// Waterfall color scheme preview component\r\nconst WaterfallColorPreview = ({ scheme, width = '100%' }) => {\r\n  // Get a gradient preview based on the selected color scale\r\n  const getGradientForScheme = (scale) => {\r\n    if (scale === 'grayscale') {\r\n      return 'linear-gradient(to right, #000000, #ffffff)';\r\n    } else if (scale === 'thermal') {\r\n      return 'linear-gradient(to right, #000000, #ff0000, #ffff00, #ffffff)';\r\n    } else if (scale === 'rainbow') {\r\n      return 'linear-gradient(to right, #ff0000, #ff7f00, #ffff00, #00ff00, #0000ff, #8b00ff)';\r\n    } else if (scale === 'viridis') {\r\n      return 'linear-gradient(to right, rgb(68, 1, 84), rgb(59, 82, 139), rgb(33, 144, 141), rgb(126, 211, 33), rgb(253, 231, 37))';\r\n    } else if (scale === 'plasma') {\r\n      return 'linear-gradient(to right, rgb(13, 8, 135), rgb(156, 71, 155), rgb(240, 189, 60), rgb(252, 255, 164))';\r\n    } else if (scale === 'inferno') {\r\n      return 'linear-gradient(to right, rgb(0, 0, 4), rgb(120, 28, 99), rgb(220, 40, 39), rgb(252, 250, 67))';\r\n    } else if (scale === 'cividis') {\r\n      return 'linear-gradient(to right, rgb(0, 32, 77), rgb(97, 185, 144), rgb(255, 240, 30))';\r\n    } else if (scale === 'turbo') {\r\n      return 'linear-gradient(to right, rgb(48, 18, 227), rgb(48, 165, 177), rgb(82, 229, 46), rgb(255, 239, 36), rgb(210, 96, 31), rgb(130, 19, 56))';\r\n    }\r\n    return '';\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      style={{\r\n        background: getGradientForScheme(scheme),\r\n        height: '15px',\r\n        width: width,\r\n        borderRadius: '3px',\r\n        marginTop: '5px'\r\n      }}\r\n      title={`Preview of ${scheme} color scale`}\r\n    ></div>\r\n  );\r\n};\r\n\r\nconst WaterfallComponent = ({ \r\n  onResize, \r\n  lineData, \r\n  frameAccumCount, \r\n  isAccumulating,\r\n  colorScale: externalColorScale,\r\n  onColorScaleChange\r\n}) => {\r\n  const buttonVariants = useButtonStyles();\r\n  const [waterfallSize, setWaterfallSize] = useState({ width: '100%', height: 180 });\r\n  const [isResizing, setIsResizing] = useState(false);\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  const [historyData, setHistoryData] = useState([]);\r\n  const [maxHistoryLength, setMaxHistoryLength] = useState(100);  // Store last 100 frames by default\r\n  const [activeChannel, setActiveChannel] = useState('intensity'); // Options: 'red', 'green', 'blue', 'intensity'\r\n  const [internalColorScale, setInternalColorScale] = useState('thermal'); // Options: 'thermal', 'rainbow', 'grayscale'\r\n  \r\n  // Export file name prefix\r\n  const [filePrefix, setFilePrefix] = useState('waterfall');\r\n  \r\n  // Status message for operations\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  \r\n  // Use external color scale if provided, otherwise use internal state\r\n  const colorScale = externalColorScale !== undefined ? externalColorScale : internalColorScale;\r\n  \r\n  // Accumulation state\r\n  const [accumulatedFrames, setAccumulatedFrames] = useState([]);\r\n  \r\n  // New state for showing color selector\r\n  const [showColorSelector, setShowColorSelector] = useState(false);\r\n  \r\n  const waterfallContainerRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  \r\n  // Add new line data to history, supporting frame accumulation\r\n  useEffect(() => {\r\n    if (lineData?.pixelData) {\r\n      if (isAccumulating) {\r\n        // Add new frame to accumulation buffer\r\n        setAccumulatedFrames(prev => {\r\n          const newFrames = [...prev, lineData.pixelData];\r\n          \r\n          // If we've reached our target frame count, process the accumulated data\r\n          if (newFrames.length >= frameAccumCount) {\r\n            // Sum the color data across all frames\r\n            const summedData = sumFrameData(newFrames);\r\n            \r\n            // Add summed data to history\r\n            setHistoryData(prev => {\r\n              const newHistory = [...prev, summedData];\r\n              // Trim history if it exceeds maximum length\r\n              if (newHistory.length > maxHistoryLength) {\r\n                return newHistory.slice(newHistory.length - maxHistoryLength);\r\n              }\r\n              return newHistory;\r\n            });\r\n            \r\n            // Reset the accumulation buffer\r\n            return [];\r\n          }\r\n          \r\n          return newFrames;\r\n        });\r\n      } else {\r\n        // When not accumulating, add each frame directly to history\r\n        setHistoryData(prev => {\r\n          const newHistory = [...prev, lineData.pixelData];\r\n          // Trim history if it exceeds maximum length\r\n          if (newHistory.length > maxHistoryLength) {\r\n            return newHistory.slice(newHistory.length - maxHistoryLength);\r\n          }\r\n          return newHistory;\r\n        });\r\n      }\r\n    }\r\n  }, [lineData, maxHistoryLength, isAccumulating, frameAccumCount]);\r\n  \r\n  // Sum pixel data across multiple frames (similar to GraphComponent)\r\n  const sumFrameData = (frames) => {\r\n    if (!frames.length) return null;\r\n    \r\n    // Use the first frame as a template for structure\r\n    const template = frames[0];\r\n    \r\n    // Initialize arrays for summed values\r\n    const summedRed = Array(template.red.length).fill(0);\r\n    const summedGreen = Array(template.green.length).fill(0);\r\n    const summedBlue = Array(template.blue.length).fill(0);\r\n    const summedIntensity = Array(template.intensity.length).fill(0);\r\n    \r\n    // Sum values across all frames\r\n    frames.forEach(frame => {\r\n      frame.red.forEach((val, i) => summedRed[i] += val);\r\n      frame.green.forEach((val, i) => summedGreen[i] += val);\r\n      frame.blue.forEach((val, i) => summedBlue[i] += val);\r\n      frame.intensity.forEach((val, i) => summedIntensity[i] += val);\r\n    });\r\n    \r\n    // Return the summed data structure\r\n    return {\r\n      timestamp: Date.now(),\r\n      positions: template.positions, // Positions remain the same\r\n      red: summedRed,\r\n      green: summedGreen,\r\n      blue: summedBlue,\r\n      intensity: summedIntensity,\r\n      lineLength: template.lineLength,\r\n      frameCount: frames.length // Add count of frames that were summed\r\n    };\r\n  };\r\n  \r\n  // Initialize and resize the canvas when waterfall size changes\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const container = waterfallContainerRef.current;\r\n      \r\n      if (container) {\r\n        // Set canvas size to match container\r\n        canvas.width = container.clientWidth;\r\n        canvas.height = container.clientHeight;\r\n        \r\n        // Redraw waterfall with new size\r\n        if (historyData.length > 0) {\r\n          drawWaterfall();\r\n        }\r\n      }\r\n    }\r\n  }, [waterfallSize, historyData.length]);\r\n  \r\n  // Draw the waterfall when history or active channel changes\r\n  useEffect(() => {\r\n    if (historyData.length > 0) {\r\n      drawWaterfall();\r\n    }\r\n  }, [historyData, activeChannel, colorScale]);\r\n  \r\n  // Draw the waterfall visualization\r\n  const drawWaterfall = () => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Clear the canvas\r\n    ctx.clearRect(0, 0, width, height);\r\n    \r\n    // Draw background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n    ctx.fillRect(0, 0, width, height);\r\n    \r\n    // If no data, show a message\r\n    if (historyData.length === 0) {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.font = '12px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('No data available for waterfall view', width / 2, height / 2);\r\n      return;\r\n    }\r\n    \r\n    // Calculate the height of each row in the waterfall\r\n    const rowHeight = height / Math.min(historyData.length, maxHistoryLength);\r\n    \r\n    // Find the min and max for this channel across all history for consistent color scaling\r\n    let minVal = Number.MAX_VALUE;\r\n    let maxVal = Number.MIN_VALUE;\r\n    \r\n    historyData.forEach(data => {\r\n      if (data[activeChannel]) {\r\n        const channelData = data[activeChannel];\r\n        const localMin = Math.min(...channelData);\r\n        const localMax = Math.max(...channelData);\r\n        minVal = Math.min(minVal, localMin);\r\n        maxVal = Math.max(maxVal, localMax);\r\n      }\r\n    });\r\n    \r\n    // Ensure we don't have a zero range\r\n    if (maxVal === minVal) maxVal = minVal + 1;\r\n    \r\n    // Draw each row of the waterfall (most recent at the top)\r\n    historyData.forEach((frameData, frameIndex) => {\r\n      // Skip if data doesn't have the selected channel\r\n      if (!frameData[activeChannel]) return;\r\n      \r\n      const values = frameData[activeChannel];\r\n      const positions = frameData.positions;\r\n      \r\n      // Calculate Y position for this row (newest data at top)\r\n      const y = frameIndex * rowHeight;\r\n      \r\n      // Create an image data for smooth rendering\r\n      const imageData = ctx.createImageData(width, Math.ceil(rowHeight));\r\n      const data = imageData.data;\r\n      \r\n      // For each horizontal pixel in the image data\r\n      for (let x = 0; x < width; x++) {\r\n        // Map the x coordinate back to a position in the spectral data\r\n        const position = x / width;\r\n        \r\n        // Find the two closest data points for interpolation\r\n        let leftIndex = 0;\r\n        let rightIndex = positions.length - 1;\r\n        \r\n        // Find the data points that surround this position\r\n        for (let i = 0; i < positions.length - 1; i++) {\r\n          if (positions[i] <= position && positions[i+1] > position) {\r\n            leftIndex = i;\r\n            rightIndex = i + 1;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // Calculate interpolation factor between the two points\r\n        let factor = 0;\r\n        if (positions[rightIndex] !== positions[leftIndex]) {\r\n          factor = (position - positions[leftIndex]) / (positions[rightIndex] - positions[leftIndex]);\r\n        }\r\n        \r\n        // Interpolate the value\r\n        const leftValue = values[leftIndex];\r\n        const rightValue = values[rightIndex];\r\n        const interpolatedValue = leftValue + (rightValue - leftValue) * factor;\r\n        \r\n        // Normalize the interpolated value\r\n        const normalizedValue = (interpolatedValue - minVal) / (maxVal - minVal);\r\n        \r\n        // Get color for this value\r\n        const colorStr = getColorForValue(normalizedValue, colorScale);\r\n        // Convert the rgb string to components\r\n        const rgbMatch = colorStr.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\r\n        const r = parseInt(rgbMatch[1], 10);\r\n        const g = parseInt(rgbMatch[2], 10);\r\n        const b = parseInt(rgbMatch[3], 10);\r\n        \r\n        // Fill the entire column for this row with the color\r\n        for (let yOffset = 0; yOffset < Math.ceil(rowHeight); yOffset++) {\r\n          const pixelIndex = (yOffset * width + x) * 4;\r\n          data[pixelIndex] = r;     // R\r\n          data[pixelIndex + 1] = g; // G\r\n          data[pixelIndex + 2] = b; // B\r\n          data[pixelIndex + 3] = 255; // Alpha (fully opaque)\r\n        }\r\n      }\r\n      \r\n      // Put the image data on the canvas\r\n      ctx.putImageData(imageData, 0, y);\r\n    });\r\n    \r\n    // Draw time scale on the right\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n    ctx.fillRect(width - 60, 0, 60, height);\r\n    \r\n    // Only draw time labels if we have multiple frames\r\n    if (historyData.length > 1) {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n      ctx.font = '10px monospace';\r\n      ctx.textAlign = 'right';\r\n      \r\n      // Draw \"Now\" at the top\r\n      ctx.fillText('Now', width - 5, 12);\r\n      \r\n      // Draw a few time markers\r\n      const timePoints = [0.25, 0.5, 0.75, 1.0];\r\n      timePoints.forEach(point => {\r\n        const y = height * point;\r\n        // Calculate time difference based on frame positions\r\n        const frameIndex = Math.floor((historyData.length - 1) * point);\r\n        if (frameIndex < historyData.length && historyData[frameIndex]) {\r\n          const timeDiff = (Date.now() - historyData[frameIndex].timestamp) / 1000; // in seconds\r\n          ctx.fillText(`-${timeDiff.toFixed(1)}s`, width - 5, y);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Draw legend\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n    ctx.font = '10px monospace';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText(`Channel: ${activeChannel}`, 5, 12);\r\n    \r\n    // Show scale with 2 decimal places for intensity, integers for other channels\r\n    if (activeChannel === 'intensity') {\r\n      ctx.fillText(`Scale: ${minVal.toFixed(2)}-${maxVal.toFixed(2)}`, 5, 27);\r\n    } else {\r\n      ctx.fillText(`Scale: ${minVal.toFixed(0)}-${maxVal.toFixed(0)}`, 5, 27);\r\n    }\r\n    \r\n    // Show accumulation status\r\n    if (isAccumulating) {\r\n      const statusText = `Accum: ${accumulatedFrames.length}/${frameAccumCount}`;\r\n      ctx.fillText(statusText, 5, 42);\r\n    }\r\n  };\r\n  \r\n  // Get a color for a normalized value (0-1) based on selected color scale\r\n  const getColorForValue = (value, scale) => {\r\n    // Ensure value is between 0 and 1\r\n    value = Math.max(0, Math.min(1, value));\r\n    \r\n    if (scale === 'grayscale') {\r\n      const intensity = Math.floor(value * 255);\r\n      return `rgb(${intensity}, ${intensity}, ${intensity})`;\r\n    } else if (scale === 'thermal') {\r\n      // Thermal scale: black->red->yellow->white\r\n      let r, g, b;\r\n      if (value < 0.33) {\r\n        // Black to red\r\n        r = Math.floor((value / 0.33) * 255);\r\n        g = 0;\r\n        b = 0;\r\n      } else if (value < 0.66) {\r\n        // Red to yellow\r\n        r = 255;\r\n        g = Math.floor(((value - 0.33) / 0.33) * 255);\r\n        b = 0;\r\n      } else {\r\n        // Yellow to white\r\n        r = 255;\r\n        g = 255;\r\n        b = Math.floor(((value - 0.66) / 0.34) * 255);\r\n      }\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    } else if (scale === 'rainbow') {\r\n      // Rainbow scale (ROYGBIV)\r\n      let r, g, b;\r\n      if (value < 0.2) {\r\n        // Red to orange\r\n        r = 255;\r\n        g = Math.floor((value / 0.2) * 127);\r\n        b = 0;\r\n      } else if (value < 0.4) {\r\n        // Orange to yellow\r\n        r = 255;\r\n        g = 127 + Math.floor(((value - 0.2) / 0.2) * 128);\r\n        b = 0;\r\n      } else if (value < 0.6) {\r\n        // Yellow to green\r\n        r = 255 - Math.floor(((value - 0.4) / 0.2) * 255);\r\n        g = 255;\r\n        b = 0;\r\n      } else if (value < 0.8) {\r\n        // Green to blue\r\n        r = 0;\r\n        g = 255 - Math.floor(((value - 0.6) / 0.2) * 255);\r\n        b = Math.floor(((value - 0.6) / 0.2) * 255);\r\n      } else {\r\n        // Blue to violet\r\n        r = Math.floor(((value - 0.8) / 0.2) * 128);\r\n        g = 0;\r\n        b = 255;\r\n      }\r\n      return `rgb(${r}, ${g}, ${b})`;\r\n    } else if (scale === 'viridis') {\r\n      // Viridis scale implementation\r\n      if (value < 0.25) {\r\n        // Dark purple to blue\r\n        const p = value * 4;\r\n        return `rgb(${Math.round(68 - p * 9)}, ${Math.round(1 + p * 81)}, ${Math.round(84 + p * 55)})`;\r\n      } else if (value < 0.5) {\r\n        // Blue to teal\r\n        const p = (value - 0.25) * 4;\r\n        return `rgb(${Math.round(59 - p * 26)}, ${Math.round(82 + p * 62)}, ${Math.round(139 + p * 2)})`;\r\n      } else if (value < 0.75) {\r\n        // Teal to green\r\n        const p = (value - 0.5) * 4;\r\n        return `rgb(${Math.round(33 + p * 93)}, ${Math.round(144 + p * 67)}, ${Math.round(141 - p * 108)})`;\r\n      } else {\r\n        // Green to yellow\r\n        const p = (value - 0.75) * 4;\r\n        return `rgb(${Math.round(126 + p * 127)}, ${Math.round(211 + p * 20)}, ${Math.round(33 + p * 4)})`;\r\n      }\r\n    } else if (scale === 'plasma') {\r\n      // Plasma scale implementation\r\n      if (value < 0.33) {\r\n        // Deep blue to purple\r\n        const p = value * 3;\r\n        return `rgb(${Math.round(13 + p * 143)}, ${Math.round(8 + p * 63)}, ${Math.round(135 + p * 20)})`;\r\n      } else if (value < 0.66) {\r\n        // Purple to orange\r\n        const p = (value - 0.33) * 3;\r\n        return `rgb(${Math.round(156 + p * 84)}, ${Math.round(71 + p * 118)}, ${Math.round(155 - p * 95)})`;\r\n      } else {\r\n        // Orange to light yellow\r\n        const p = (value - 0.66) * 3;\r\n        return `rgb(${Math.round(240 + p * 12)}, ${Math.round(189 + p * 66)}, ${Math.round(60 + p * 104)})`;\r\n      }\r\n    } else if (scale === 'inferno') {\r\n      // Inferno scale implementation\r\n      if (value < 0.33) {\r\n        // Black to purple\r\n        const p = value * 3;\r\n        return `rgb(${Math.round(0 + p * 120)}, ${Math.round(0 + p * 28)}, ${Math.round(4 + p * 95)})`;\r\n      } else if (value < 0.66) {\r\n        // Purple to red\r\n        const p = (value - 0.33) * 3;\r\n        return `rgb(${Math.round(120 + p * 100)}, ${Math.round(28 + p * 12)}, ${Math.round(99 - p * 60)})`;\r\n      } else {\r\n        // Red to yellow\r\n        const p = (value - 0.66) * 3;\r\n        return `rgb(${Math.round(220 + p * 32)}, ${Math.round(40 + p * 210)}, ${Math.round(39 + p * 28)})`;\r\n      }\r\n    } else if (scale === 'cividis') {\r\n      // Cividis scale implementation\r\n      if (value < 0.5) {\r\n        // Dark blue to teal\r\n        const p = value * 2;\r\n        return `rgb(${Math.round(0 + p * 97)}, ${Math.round(32 + p * 153)}, ${Math.round(77 + p * 67)})`;\r\n      } else {\r\n        // Teal to yellow\r\n        const p = (value - 0.5) * 2;\r\n        return `rgb(${Math.round(97 + p * 158)}, ${Math.round(185 + p * 55)}, ${Math.round(144 - p * 114)})`;\r\n      }\r\n    } else if (scale === 'turbo') {\r\n      // Turbo scale implementation\r\n      if (value < 0.2) {\r\n        // Blue to cyan\r\n        const p = value * 5;\r\n        return `rgb(${Math.round(48)}, ${Math.round(18 + p * 147)}, ${Math.round(227 - p * 50)})`;\r\n      } else if (value < 0.4) {\r\n        // Cyan to green\r\n        const p = (value - 0.2) * 5;\r\n        return `rgb(${Math.round(48 + p * 34)}, ${Math.round(165 + p * 64)}, ${Math.round(177 - p * 131)})`;\r\n      } else if (value < 0.6) {\r\n        // Green to yellow\r\n        const p = (value - 0.4) * 5;\r\n        return `rgb(${Math.round(82 + p * 173)}, ${Math.round(229 + p * 10)}, ${Math.round(46 - p * 10)})`;\r\n      } else if (value < 0.8) {\r\n        // Yellow to orange\r\n        const p = (value - 0.6) * 5;\r\n        return `rgb(${Math.round(255 - p * 45)}, ${Math.round(239 - p * 143)}, ${Math.round(36 - p * 5)})`;\r\n      } else {\r\n        // Orange to red\r\n        const p = (value - 0.8) * 5;\r\n        return `rgb(${Math.round(210 - p * 80)}, ${Math.round(96 - p * 77)}, ${Math.round(31 + p * 25)})`;\r\n      }\r\n    }\r\n    \r\n    // Default to grayscale if unknown scale\r\n    const intensity = Math.floor(value * 255);\r\n    return `rgb(${intensity}, ${intensity}, ${intensity})`;\r\n  };\r\n  \r\n  // Toggle between color channels\r\n  const toggleChannel = () => {\r\n    const channels = ['intensity', 'red', 'green', 'blue'];\r\n    const currentIndex = channels.indexOf(activeChannel);\r\n    const nextIndex = (currentIndex + 1) % channels.length;\r\n    setActiveChannel(channels[nextIndex]);\r\n  };\r\n  \r\n  // Handle color scale change from dropdown\r\n  const handleColorScaleChange = (e) => {\r\n    const newColorScale = e.target.value;\r\n    \r\n    // Update internal state\r\n    setInternalColorScale(newColorScale);\r\n    \r\n    // Notify parent if callback exists\r\n    if (onColorScaleChange) {\r\n      onColorScaleChange(newColorScale);\r\n    }\r\n    \r\n    // Hide selector after selection\r\n    setShowColorSelector(false);\r\n  };\r\n  \r\n  // Clear history data\r\n  const clearHistory = () => {\r\n    setHistoryData([]);\r\n    setAccumulatedFrames([]);\r\n  };\r\n  \r\n  // Export waterfall data as text file\r\n  const exportWaterfallData = () => {\r\n    // Make sure we have data to export\r\n    if (!historyData || historyData.length === 0) {\r\n      console.warn('No data to export');\r\n      setSaveMessage('No data to export');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Create content with header\r\n      let content = `# Waterfall Data Export\\n`;\r\n      content += `# Channel: ${activeChannel}\\n`;\r\n      content += `# Timestamp: ${new Date().toISOString()}\\n`;\r\n      content += `# Color Scale: ${colorScale}\\n`;\r\n      content += `# Format: wavelength;frame1;frame2;frame3;...\\n`;\r\n      content += `# Each row contains one wavelength position with intensity values from all frames\\n\\n`;\r\n      \r\n      // Determine how many data points are in each frame (assume consistent)\r\n      const pointsPerFrame = historyData[0]?.positions?.length || 0;\r\n      \r\n      if (pointsPerFrame === 0) {\r\n        throw new Error('Invalid data format');\r\n      }\r\n      \r\n      // For each wavelength position\r\n      for (let posIndex = 0; posIndex < pointsPerFrame; posIndex++) {\r\n        // Get the wavelength/position value from the first frame\r\n        // (assuming positions are consistent across frames)\r\n        const wavelength = historyData[0].positions[posIndex];\r\n        \r\n        // Start with the wavelength\r\n        let line = `${wavelength.toFixed(4)}`;\r\n        \r\n        // Add intensity from each frame for this position\r\n        for (let frameIndex = 0; frameIndex < historyData.length; frameIndex++) {\r\n          const frame = historyData[frameIndex];\r\n          const intensity = frame[activeChannel][posIndex];\r\n          line += `;${intensity.toFixed(2)}`;\r\n        }\r\n        \r\n        // Add the completed line\r\n        content += line + '\\n';\r\n      }\r\n      \r\n      // Create a timestamp string in format YYYYMMDDhhmmss\r\n      const now = new Date();\r\n      const timestamp = now.getFullYear() +\r\n        String(now.getMonth() + 1).padStart(2, '0') +\r\n        String(now.getDate()).padStart(2, '0') +\r\n        String(now.getHours()).padStart(2, '0') +\r\n        String(now.getMinutes()).padStart(2, '0') +\r\n        String(now.getSeconds()).padStart(2, '0');\r\n      \r\n      // Create filename with prefix and timestamp\r\n      const fileName = `${filePrefix}_${timestamp}.txt`;\r\n      \r\n      // Create Blob with content\r\n      const blob = new Blob([content], { type: 'text/plain' });\r\n      \r\n      // Create download link\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = fileName;\r\n      \r\n      // Append to document, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n      \r\n      // Show success message\r\n      setSaveMessage(`Data exported as ${fileName}`);\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to export waterfall data:', error);\r\n      setSaveMessage('Error exporting data');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n  \r\n  // Similar resize functionality as before\r\n  const handleResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = waterfallContainerRef.current?.clientWidth || 400;\r\n    const startHeight = waterfallContainerRef.current?.clientHeight || waterfallSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizing(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      // Only adjust height, keep width as 100%\r\n      const newHeight = Math.max(100, startHeight + deltaY);\r\n      \r\n      // Update waterfall size\r\n      const newSize = {\r\n        width: '100%',  // Keep width as 100% for responsive behavior\r\n        height: Math.round(newHeight)\r\n      };\r\n      \r\n      setWaterfallSize(newSize);\r\n      \r\n      // Notify parent if needed\r\n      if (onResize) {\r\n        onResize(newSize);\r\n      }\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizing(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  const styles = {\r\n    container: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      position: 'relative',\r\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\r\n    },\r\n    title: {\r\n      margin: '0 0 10px 0',\r\n      fontSize: '14px',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center'\r\n    },\r\n    waterfallView: {\r\n      width: waterfallSize.width,\r\n      height: `${waterfallSize.height}px`,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      position: 'relative',\r\n      overflow: 'hidden'\r\n    },\r\n    canvas: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%'\r\n    },\r\n    resizeHandle: {\r\n      position: 'absolute',\r\n      bottom: '0',\r\n      right: '0',\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'ns-resize', // Only allow vertical resizing\r\n      zIndex: 100,\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\r\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderTopLeftRadius: '4px',\r\n    },\r\n    resizeInfo: {\r\n      position: 'absolute',\r\n      right: '25px',\r\n      bottom: '25px',\r\n      padding: '2px 6px',\r\n      background: 'rgba(0, 0, 0, 0.7)',\r\n      color: 'white',\r\n      borderRadius: '3px',\r\n      fontSize: '11px',\r\n      zIndex: 100\r\n    },\r\n    controls: {\r\n      display: 'flex',\r\n      gap: '5px'\r\n    },\r\n    noData: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      height: '100%',\r\n      color: 'rgba(255, 255, 255, 0.5)',\r\n      fontSize: '12px'\r\n    },\r\n    // Color scheme selector styles\r\n    colorSchemeContainer: {\r\n      position: 'absolute',\r\n      top: '40px',\r\n      right: '10px',\r\n      zIndex: 50,\r\n      backgroundColor: 'rgba(40, 40, 40, 0.9)',\r\n      padding: '10px',\r\n      borderRadius: '5px',\r\n      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)',\r\n      display: showColorSelector ? 'block' : 'none'\r\n    },\r\n    colorSchemeSelector: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      gap: '5px'\r\n    },\r\n    select: {\r\n      padding: '6px 10px',\r\n      borderRadius: '4px',\r\n      border: '1px solid #555',\r\n      backgroundColor: '#333',\r\n      color: 'white',\r\n      width: '100%'\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.title}>\r\n        <h3 style={{ margin: 0 }}>Waterfall Display</h3>\r\n        <div style={styles.controls}>\r\n          <button \r\n            style={buttonVariants.smallIconButton}\r\n            onClick={toggleChannel}\r\n            title={`Current channel: ${activeChannel}`}\r\n          >\r\n            {activeChannel === 'red' ? '🔴' : \r\n             activeChannel === 'green' ? '🟢' : \r\n             activeChannel === 'blue' ? '🔵' : '⚪'}\r\n          </button>\r\n          <button \r\n            style={buttonVariants.smallIconButton}\r\n            onClick={() => setShowColorSelector(!showColorSelector)}\r\n            title={`Color scale: ${colorScale} (click to change)`}\r\n          >\r\n            🎨\r\n          </button>\r\n          <button \r\n            style={buttonVariants.smallIconButton}\r\n            onClick={clearHistory}\r\n            title=\"Clear history\"\r\n          >\r\n            🗑️\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Export controls */}\r\n      <div style={{ \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        gap: '5px',\r\n        marginBottom: '10px'\r\n      }}>\r\n        <input\r\n          type=\"text\"\r\n          value={filePrefix}\r\n          onChange={(e) => setFilePrefix(e.target.value)}\r\n          placeholder=\"File prefix\"\r\n          style={{\r\n            padding: '2px 4px',\r\n            backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n            color: 'white',\r\n            border: '1px solid rgba(80, 80, 80, 0.5)',\r\n            borderRadius: '3px',\r\n            fontSize: '12px',\r\n            width: '100px'\r\n          }}\r\n          title=\"Prefix for the exported data filename\"\r\n        />\r\n        <button\r\n          style={{\r\n            ...buttonVariants.smallSecondary,\r\n            backgroundColor: 'rgba(20, 120, 220, 0.7)'\r\n          }}\r\n          onClick={exportWaterfallData}\r\n          title=\"Export waterfall data as text file\"\r\n          disabled={!historyData || historyData.length === 0}\r\n        >\r\n          💾 Export Data\r\n        </button>\r\n        \r\n        {saveMessage && (\r\n          <span style={{\r\n            fontSize: '11px',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n            padding: '2px 6px',\r\n            borderRadius: '3px',\r\n            marginLeft: '5px',\r\n            color: 'rgba(255, 255, 255, 0.9)'\r\n          }}>\r\n            {saveMessage}\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Color scheme selector dropdown */}\r\n      <div style={styles.colorSchemeContainer}>\r\n        <div style={styles.colorSchemeSelector}>\r\n          <label htmlFor=\"waterfallColorScheme\">Color Scale:</label>\r\n          <select \r\n            id=\"waterfallColorScheme\" \r\n            value={colorScale} \r\n            onChange={handleColorScaleChange}\r\n            style={styles.select}\r\n          >\r\n            {Object.entries(waterfallColorSchemeOptions).map(([key, label]) => (\r\n              <option key={key} value={key}>{label}</option>\r\n            ))}\r\n          </select>\r\n          <WaterfallColorPreview scheme={colorScale} width=\"100%\" />\r\n        </div>\r\n      </div>\r\n      \r\n      <div \r\n        ref={waterfallContainerRef}\r\n        style={styles.waterfallView}\r\n      >\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={styles.canvas}\r\n        />\r\n        \r\n        {historyData.length === 0 && (\r\n          <div style={styles.noData}>\r\n            Draw a line on the camera feed to see waterfall data\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize info overlay */}\r\n        {showResizeInfo && (\r\n          <div style={styles.resizeInfo}>\r\n            Height: {waterfallSize.height}px\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize handle */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handleResizeStart}\r\n          title=\"Resize waterfall height\"\r\n        >\r\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\r\n            <path \r\n              d=\"M2,6 L10,6 M2,9 L10,9\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaterfallComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}