{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n/**\r\n * Utility functions for working with localStorage\r\n */\n\n/**\r\n * Save data to localStorage with the given key\r\n * @param {string} key - The localStorage key\r\n * @param {any} data - The data to save (will be JSON stringified)\r\n * @returns {boolean} - Whether the save was successful\r\n */\nexport const saveToLocalStorage = (key, data) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n    console.log(`Data saved to localStorage with key: ${key}`);\n    return true;\n  } catch (err) {\n    console.error(`Error saving to localStorage (key: ${key}):`, err);\n    return false;\n  }\n};\n\n/**\r\n * Load data from localStorage with the given key\r\n * @param {string} key - The localStorage key\r\n * @param {any} defaultValue - Default value if nothing is found\r\n * @returns {any} - The parsed data or defaultValue if not found\r\n */\nexport const loadFromLocalStorage = (key, defaultValue = null) => {\n  try {\n    const savedData = localStorage.getItem(key);\n    if (savedData) {\n      const parsedData = JSON.parse(savedData);\n      console.log(`Data loaded from localStorage with key: ${key}`);\n      return parsedData;\n    }\n  } catch (err) {\n    console.error(`Error loading from localStorage (key: ${key}):`, err);\n  }\n  return defaultValue;\n};\n\n/**\r\n * Create a React hook for persisting state in localStorage\r\n * @param {string} key - The localStorage key\r\n * @param {any} initialValue - Initial value if nothing in localStorage\r\n * @returns {Array} - [value, setValue] stateful value that syncs with localStorage\r\n */\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // Load initial state from localStorage\n  const loadState = () => {\n    return loadFromLocalStorage(key, initialValue);\n  };\n\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(loadState);\n\n  // Return a wrapped version of useState's setter function\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to localStorage\n      saveToLocalStorage(key, valueToStore);\n    } catch (error) {\n      console.error(`Error setting localStorage value (key: ${key}):`, error);\n    }\n  };\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"+LGzP8uUkWH6+8CmYBh+3vvqjNM=\");","map":{"version":3,"names":["React","useState","saveToLocalStorage","key","data","localStorage","setItem","JSON","stringify","console","log","err","error","loadFromLocalStorage","defaultValue","savedData","getItem","parsedData","parse","useLocalStorage","initialValue","_s","loadState","storedValue","setStoredValue","setValue","value","valueToStore","Function"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/utils/localStorageUtils.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n/**\r\n * Utility functions for working with localStorage\r\n */\r\n\r\n/**\r\n * Save data to localStorage with the given key\r\n * @param {string} key - The localStorage key\r\n * @param {any} data - The data to save (will be JSON stringified)\r\n * @returns {boolean} - Whether the save was successful\r\n */\r\nexport const saveToLocalStorage = (key, data) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n    console.log(`Data saved to localStorage with key: ${key}`);\r\n    return true;\r\n  } catch (err) {\r\n    console.error(`Error saving to localStorage (key: ${key}):`, err);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Load data from localStorage with the given key\r\n * @param {string} key - The localStorage key\r\n * @param {any} defaultValue - Default value if nothing is found\r\n * @returns {any} - The parsed data or defaultValue if not found\r\n */\r\nexport const loadFromLocalStorage = (key, defaultValue = null) => {\r\n  try {\r\n    const savedData = localStorage.getItem(key);\r\n    if (savedData) {\r\n      const parsedData = JSON.parse(savedData);\r\n      console.log(`Data loaded from localStorage with key: ${key}`);\r\n      return parsedData;\r\n    }\r\n  } catch (err) {\r\n    console.error(`Error loading from localStorage (key: ${key}):`, err);\r\n  }\r\n  return defaultValue;\r\n};\r\n\r\n/**\r\n * Create a React hook for persisting state in localStorage\r\n * @param {string} key - The localStorage key\r\n * @param {any} initialValue - Initial value if nothing in localStorage\r\n * @returns {Array} - [value, setValue] stateful value that syncs with localStorage\r\n */\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // Load initial state from localStorage\r\n  const loadState = () => {\r\n    return loadFromLocalStorage(key, initialValue);\r\n  };\r\n\r\n  // State to store our value\r\n  const [storedValue, setStoredValue] = useState(loadState);\r\n\r\n  // Return a wrapped version of useState's setter function\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      \r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      \r\n      // Save to localStorage\r\n      saveToLocalStorage(key, valueToStore);\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage value (key: ${key}):`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EAC/C,IAAI;IACFC,YAAY,CAACC,OAAO,CAACH,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IAC/CK,OAAO,CAACC,GAAG,CAAC,wCAAwCP,GAAG,EAAE,CAAC;IAC1D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,sCAAsCT,GAAG,IAAI,EAAEQ,GAAG,CAAC;IACjE,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,oBAAoB,GAAGA,CAACV,GAAG,EAAEW,YAAY,GAAG,IAAI,KAAK;EAChE,IAAI;IACF,MAAMC,SAAS,GAAGV,YAAY,CAACW,OAAO,CAACb,GAAG,CAAC;IAC3C,IAAIY,SAAS,EAAE;MACb,MAAME,UAAU,GAAGV,IAAI,CAACW,KAAK,CAACH,SAAS,CAAC;MACxCN,OAAO,CAACC,GAAG,CAAC,2CAA2CP,GAAG,EAAE,CAAC;MAC7D,OAAOc,UAAU;IACnB;EACF,CAAC,CAAC,OAAON,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,yCAAyCT,GAAG,IAAI,EAAEQ,GAAG,CAAC;EACtE;EACA,OAAOG,YAAY;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAGA,CAAChB,GAAG,EAAEiB,YAAY,KAAK;EAAAC,EAAA;EACpD;EACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,OAAOT,oBAAoB,CAACV,GAAG,EAAEiB,YAAY,CAAC;EAChD,CAAC;;EAED;EACA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAACqB,SAAS,CAAC;;EAEzD;EACA,MAAMG,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACH,WAAW,CAAC,GAAGG,KAAK;;MAExD;MACAF,cAAc,CAACG,YAAY,CAAC;;MAE5B;MACAzB,kBAAkB,CAACC,GAAG,EAAEwB,YAAY,CAAC;IACvC,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0CAA0CT,GAAG,IAAI,EAAES,KAAK,CAAC;IACzE;EACF,CAAC;EAED,OAAO,CAACW,WAAW,EAAEE,QAAQ,CAAC;AAChC,CAAC;AAACJ,EAAA,CA3BWF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}