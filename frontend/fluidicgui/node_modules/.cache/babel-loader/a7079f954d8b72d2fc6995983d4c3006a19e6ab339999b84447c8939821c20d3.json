{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Flowchart\\\\FlowchartEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, useMemo } from 'react';\nimport CustomNode from './CustomNode';\nimport CustomEdge from './CustomEdge';\nimport ReactFlow, { Background, Controls, ReactFlowProvider } from 'react-flow-renderer';\nimport defaultProperties from '../../data/defaultProperties.json';\nimport SidePanel from './SidePanel';\nimport { backgroundVariants } from '../../styles/backgroundStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlowchartEditor = ({\n  nodes,\n  setNodes,\n  onAddNode,\n  onNodesChange,\n  onEdgesChange,\n  edges,\n  setEdges,\n  onProceed,\n  onScanDevices,\n  detectedDevices = []\n}) => {\n  _s();\n  const nodeTypes = useMemo(() => ({\n    customNode: CustomNode\n  }), []);\n  const edgeTypes = useMemo(() => ({\n    customEdge: CustomEdge\n  }), []);\n  const [selectedNodes, setSelectedNodes] = useState([]); // Track multiple selected nodes\n  const [contextMenuPosition, setContextMenuPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [showColorMenu, setShowColorMenu] = useState(false); // To toggle the color menu\n  const [isInMenu, setIsInMenu] = useState(false); // Track if the mouse is inside a menu\n  const contextMenuRef = useRef(null);\n\n  // Colors to choose from\n  const colorOptions = ['#7e91fc', '#fc7e91', '#91fc7e', '#00106b', '#6b0010', '#106b00', '#ffffff', '#000000', '#f80'];\n  const handleNodeClick = (event, nodeId) => {\n    console.log('Shift pressed:', event.shiftKey); // Debug to check Shift key\n    console.log('Clicked node ID:', nodeId); // Debug the clicked node\n    // Remove event.preventDefault() to allow normal click behavior\n    const clickedNode = nodes.find(node => node.id === nodeId);\n\n    // Check if Shift or Ctrl is pressed for multi-selection\n    if (event.shiftKey || event.ctrlKey) {\n      // Add or remove the node to/from the selection\n      if (selectedNodes.some(selectedNode => selectedNode.id === nodeId)) {\n        setSelectedNodes(selectedNodes.filter(selectedNode => selectedNode.id !== nodeId));\n      } else {\n        setSelectedNodes([...selectedNodes, clickedNode]);\n      }\n    } else {\n      // If Shift/Ctrl is not pressed, select only the clicked node\n      setSelectedNodes([clickedNode]); // Select only the clicked node\n    }\n  };\n\n  // Handle context menu for nodes\n  const handleContextMenu = (event, nodeId) => {\n    event.preventDefault();\n    const clickedNode = nodes.find(node => node.id === nodeId);\n    if (event.shiftKey || event.ctrlKey) {\n      if (!selectedNodes.some(selectedNode => selectedNode.id === nodeId)) {\n        setSelectedNodes([...selectedNodes, clickedNode]);\n      }\n    } else {\n      setSelectedNodes([clickedNode]);\n    }\n    setContextMenuPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n    setShowContextMenu(true);\n    setShowColorMenu(false); // Hide color menu if it was previously open\n  };\n\n  // Handle edge deletion\n  const handleDeleteEdge = useCallback(id => {\n    setEdges(eds => eds.filter(edge => edge.id !== id)); // Remove the edge by its ID\n  }, [setEdges]);\n\n  // Hide both context and color menus when the mouse leaves both\n  const hideMenus = () => {\n    if (!isInMenu) {\n      setShowContextMenu(false);\n      setShowColorMenu(false);\n    }\n  };\n  const openColorMenu = () => {\n    setShowColorMenu(true); // Show the color selection menu\n  };\n\n  // Handle renaming the selected node (only for single node selection)\n  const changeNodeName = () => {\n    if (selectedNodes.length === 1) {\n      const selectedNode = selectedNodes[0];\n      const newName = prompt('Enter new name for the node:', selectedNode.data.label);\n      if (newName) {\n        setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n          ...node,\n          data: {\n            ...node.data,\n            label: newName\n          }\n        } : node));\n        setShowContextMenu(false); // Close the menu\n      }\n    }\n  };\n\n  // Handle copying selected nodes\n  const copySelectedNodes = () => {\n    const nodeIdMap = {}; // Map to store old-to-new node ID mapping\n\n    // Copy nodes and generate new unique IDs for them\n    const newNodes = selectedNodes.map(node => {\n      const newNodeId = `node-${Date.now() + Math.random()}`;\n      nodeIdMap[node.id] = newNodeId; // Map old node ID to new node ID\n\n      return {\n        ...node,\n        id: newNodeId,\n        // Assign the new ID to the copied node\n        position: {\n          x: node.position.x + 20,\n          y: node.position.y + 20\n        },\n        // Offset to avoid overlap\n        data: {\n          ...node.data,\n          label: `${node.data.label} (Copy)`\n        }\n      };\n    });\n\n    // Copy edges connected to the selected nodes\n    const connectedEdges = edges.filter(edge => selectedNodes.some(node => node.id === edge.source || node.id === edge.target));\n\n    // Copy edges and assign new unique IDs\n    const newEdges = connectedEdges.map(edge => ({\n      ...edge,\n      id: `edge-${Date.now() + Math.random()}`,\n      // Ensure unique edge ID\n      source: nodeIdMap[edge.source] || edge.source,\n      // Map old source ID to new source ID if applicable\n      target: nodeIdMap[edge.target] || edge.target // Map old target ID to new target ID if applicable\n    }));\n\n    // Add the copied nodes and edges to the state\n    setNodes(nds => [...nds, ...newNodes]);\n    setEdges(eds => [...eds, ...newEdges]);\n    setShowContextMenu(false); // Close the context menu\n  };\n\n  // Handle deleting selected nodes\n  const deleteSelectedNodes = () => {\n    setNodes(nds => nds.filter(node => !selectedNodes.some(selectedNode => selectedNode.id === node.id)));\n    setEdges(eds => eds.filter(edge => !selectedNodes.some(selectedNode => edge.source === selectedNode.id || edge.target === selectedNode.id)));\n    setShowContextMenu(false); // Close the menu\n  };\n  const changeNodeColor = color => {\n    setNodes(nds => nds.map(node => selectedNodes.some(selectedNode => selectedNode.id === node.id) ? {\n      ...node,\n      style: {\n        ...node.style,\n        backgroundColor: color\n      }\n    } : node));\n    setShowContextMenu(false); // Close the context menu\n    setShowColorMenu(false); // Close the color menu\n  };\n  const handleEdgePropertyChange = useCallback((id, propertyName, propertyValue) => {\n    console.log('change edge:', id);\n    setEdges(eds => eds.map(edge => edge.id === id ? {\n      ...edge,\n      data: {\n        ...edge.data,\n        properties: {\n          ...edge.data.properties,\n          [propertyName]: propertyValue\n        }\n      }\n    } : edge));\n  }, [setEdges]);\n  const handleConnect = useCallback(params => {\n    const defaultEdgeProperties = defaultProperties.edges.default; // Load default edge properties from JSON\n    const newEdgeId = `edge-${Date.now()}`; // Generate a unique ID for the edge\n    setEdges(eds => [...eds, {\n      ...params,\n      type: 'customEdge',\n      id: newEdgeId,\n      data: {\n        properties: defaultEdgeProperties,\n        onPropertyChange: (propertyName, propertyValue) => handleEdgePropertyChange(newEdgeId, propertyName, propertyValue),\n        onDelete: () => handleDeleteEdge(newEdgeId) // Pass the delete function\n      },\n      style: {\n        strokeWidth: 5,\n        stroke: '#bfb'\n      }\n    }]);\n  }, [setEdges, handleEdgePropertyChange, handleDeleteEdge]);\n\n  // Handle node property changes\n  const handlePropertyChange = useCallback((id, propertyName, propertyValue) => {\n    setNodes(nds => nds.map(node => node.id === id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [propertyName]: propertyValue\n      }\n    } : node));\n  }, [setNodes]);\n  const handleAddNode = useCallback(newNode => {\n    setNodes(nds => [...nds, {\n      id: newNode.id,\n      type: newNode.type,\n      // React Flow type\n      position: newNode.position,\n      data: {\n        ...newNode.data,\n        // Preserve all data properties\n        onPropertyChange: (propertyName, propertyValue) => handlePropertyChange(newNode.id, propertyName, propertyValue)\n      }\n    }]);\n  }, [setNodes, handlePropertyChange]);\n  const onImportFlow = importedFlow => {\n    let parsedFlow;\n\n    // Check if the imported flow is a string or already an object\n    if (typeof importedFlow === 'string') {\n      parsedFlow = JSON.parse(importedFlow); // Parse the JSON string\n    } else {\n      parsedFlow = importedFlow; // Use the object as is\n    }\n    const {\n      nodes,\n      edges\n    } = parsedFlow;\n\n    // Update nodes to include onPropertyChange handler\n    const updatedNodes = nodes.map(node => ({\n      ...node,\n      data: {\n        ...node.data,\n        onPropertyChange: (propertyName, propertyValue) => handlePropertyChange(node.id, propertyName, propertyValue)\n      }\n    }));\n\n    // Update edges to include onPropertyChange and onDelete handlers\n    const updatedEdges = edges.map(edge => ({\n      ...edge,\n      data: {\n        ...edge.data,\n        onPropertyChange: (propertyName, propertyValue) => handleEdgePropertyChange(edge.id, propertyName, propertyValue),\n        onDelete: () => handleDeleteEdge(edge.id)\n      }\n    }));\n    setNodes(updatedNodes); // Update nodes state with handlers\n    setEdges(updatedEdges); // Update edges state with handlers\n\n    console.log('Flow imported:', updatedNodes, updatedEdges);\n  };\n\n  //console.log('Rendering Nodes in React Flow:', nodes);\n\n  const styles = {\n    menuButton: {\n      display: 'block',\n      margin: '5px 0',\n      padding: '8px',\n      border: 'none',\n      cursor: 'pointer',\n      borderRadius: '3px',\n      width: '100%',\n      ...backgroundVariants.menuBackground\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen-wide-component\",\n      style: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          height: '100vh',\n          ...backgroundVariants.mainBackground\n        },\n        onContextMenu: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes.map(node => ({\n            ...node,\n            selected: selectedNodes.some(selectedNode => selectedNode.id === node.id),\n            data: {\n              ...node.data,\n              onContextMenu: event => handleContextMenu(event, node.id),\n              onClick: event => handleNodeClick(event, node.id)\n            }\n          })),\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: handleConnect,\n          nodeTypes: nodeTypes,\n          edgeTypes: edgeTypes,\n          minZoom: 0.1,\n          maxZoom: 2,\n          children: [/*#__PURE__*/_jsxDEV(Background, {\n            color: \"#666666\",\n            gap: 50,\n            size: 0.5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SidePanel, {\n            onAddNode: handleAddNode,\n            onProceed: onProceed,\n            onImportFlow: onImportFlow,\n            onScanDevices: onScanDevices,\n            detectedDevices: detectedDevices,\n            nodes: nodes,\n            edges: edges\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), showContextMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: contextMenuRef,\n          style: {\n            position: 'absolute',\n            top: `${contextMenuPosition.y}px`,\n            left: `${contextMenuPosition.x}px`,\n            borderRadius: '5px',\n            padding: '10px',\n            zIndex: 100,\n            ...backgroundVariants.menuBackground\n          },\n          onMouseEnter: () => setIsInMenu(true),\n          onMouseLeave: () => {\n            setIsInMenu(false);\n            hideMenus();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: openColorMenu,\n            style: styles.menuButton,\n            children: \"Change Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this), selectedNodes.length === 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: changeNodeName,\n            style: styles.menuButton,\n            children: \"Change Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: copySelectedNodes,\n            style: styles.menuButton,\n            children: \"Copy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteSelectedNodes,\n            style: styles.menuButton,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setIsInMenu(false);\n              hideMenus();\n            },\n            style: styles.menuButton,\n            children: \"Close Menus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this), showColorMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: `${contextMenuPosition.y}px`,\n            left: `${contextMenuPosition.x + 120}px`,\n            borderRadius: '5px',\n            padding: '10px',\n            display: 'grid',\n            gridTemplateColumns: 'repeat(3, 1fr)',\n            gap: '5px',\n            zIndex: 101,\n            ...backgroundVariants.menuBackground\n          },\n          onMouseEnter: () => setIsInMenu(true),\n          onMouseLeave: () => {\n            setIsInMenu(false);\n            hideMenus();\n          },\n          children: colorOptions.map(color => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => changeNodeColor(color),\n            style: {\n              width: '20px',\n              height: '20px',\n              backgroundColor: color,\n              cursor: 'pointer',\n              borderRadius: '50%'\n            }\n          }, color, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(FlowchartEditor, \"NpUQrt/HwKxIq2Z3gN7cMlx8A7I=\");\n_c = FlowchartEditor;\nexport default FlowchartEditor;\nvar _c;\n$RefreshReg$(_c, \"FlowchartEditor\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useMemo","CustomNode","CustomEdge","ReactFlow","Background","Controls","ReactFlowProvider","defaultProperties","SidePanel","backgroundVariants","jsxDEV","_jsxDEV","FlowchartEditor","nodes","setNodes","onAddNode","onNodesChange","onEdgesChange","edges","setEdges","onProceed","onScanDevices","detectedDevices","_s","nodeTypes","customNode","edgeTypes","customEdge","selectedNodes","setSelectedNodes","contextMenuPosition","setContextMenuPosition","x","y","showContextMenu","setShowContextMenu","showColorMenu","setShowColorMenu","isInMenu","setIsInMenu","contextMenuRef","colorOptions","handleNodeClick","event","nodeId","console","log","shiftKey","clickedNode","find","node","id","ctrlKey","some","selectedNode","filter","handleContextMenu","preventDefault","clientX","clientY","handleDeleteEdge","eds","edge","hideMenus","openColorMenu","changeNodeName","length","newName","prompt","data","label","nds","map","copySelectedNodes","nodeIdMap","newNodes","newNodeId","Date","now","Math","random","position","connectedEdges","source","target","newEdges","deleteSelectedNodes","changeNodeColor","color","style","backgroundColor","handleEdgePropertyChange","propertyName","propertyValue","properties","handleConnect","params","defaultEdgeProperties","default","newEdgeId","type","onPropertyChange","onDelete","strokeWidth","stroke","handlePropertyChange","handleAddNode","newNode","onImportFlow","importedFlow","parsedFlow","JSON","parse","updatedNodes","updatedEdges","styles","menuButton","display","margin","padding","border","cursor","borderRadius","width","menuBackground","children","className","flex","height","mainBackground","onContextMenu","e","selected","onClick","onConnect","minZoom","maxZoom","gap","size","fileName","_jsxFileName","lineNumber","columnNumber","ref","top","left","zIndex","onMouseEnter","onMouseLeave","gridTemplateColumns","_c","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Flowchart/FlowchartEditor.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useMemo  } from 'react';\r\nimport CustomNode from './CustomNode';\r\nimport CustomEdge from './CustomEdge';\r\nimport ReactFlow, {\r\n  Background,\r\n  Controls,\r\n  ReactFlowProvider,\r\n} from 'react-flow-renderer';\r\nimport defaultProperties from '../../data/defaultProperties.json';\r\nimport SidePanel from './SidePanel';\r\nimport { backgroundVariants } from '../../styles/backgroundStyles';\r\n\r\nconst FlowchartEditor = ({ \r\n  nodes, \r\n  setNodes, \r\n  onAddNode,\r\n  onNodesChange, \r\n  onEdgesChange, \r\n  edges, \r\n  setEdges, \r\n  onProceed,\r\n  onScanDevices,\r\n  detectedDevices = []\r\n}) => {\r\n  const nodeTypes = useMemo(() => ({ customNode: CustomNode }), []);\r\n  const edgeTypes = useMemo(() => ({ customEdge: CustomEdge }), []);\r\n  const [selectedNodes, setSelectedNodes] = useState([]); // Track multiple selected nodes\r\n  const [contextMenuPosition, setContextMenuPosition] = useState({ x: 0, y: 0 });\r\n  const [showContextMenu, setShowContextMenu] = useState(false);\r\n  const [showColorMenu, setShowColorMenu] = useState(false); // To toggle the color menu\r\n  const [isInMenu, setIsInMenu] = useState(false); // Track if the mouse is inside a menu\r\n  const contextMenuRef = useRef(null);\r\n\r\n  // Colors to choose from\r\n  const colorOptions = ['#7e91fc', '#fc7e91', '#91fc7e', '#00106b', '#6b0010', '#106b00', '#ffffff','#000000','#f80'];\r\n\r\n  const handleNodeClick = (event, nodeId) => {\r\n    console.log('Shift pressed:', event.shiftKey);  // Debug to check Shift key\r\n    console.log('Clicked node ID:', nodeId);  // Debug the clicked node\r\n    // Remove event.preventDefault() to allow normal click behavior\r\n    const clickedNode = nodes.find(node => node.id === nodeId);\r\n  \r\n    // Check if Shift or Ctrl is pressed for multi-selection\r\n    if (event.shiftKey || event.ctrlKey) {\r\n      // Add or remove the node to/from the selection\r\n      if (selectedNodes.some(selectedNode => selectedNode.id === nodeId)) {\r\n        setSelectedNodes(selectedNodes.filter(selectedNode => selectedNode.id !== nodeId));\r\n      } else {\r\n        setSelectedNodes([...selectedNodes, clickedNode]);\r\n      }\r\n    } else {\r\n      // If Shift/Ctrl is not pressed, select only the clicked node\r\n      setSelectedNodes([clickedNode]); // Select only the clicked node\r\n    }\r\n  };\r\n\r\n  // Handle context menu for nodes\r\n  const handleContextMenu = (event, nodeId) => {\r\n    event.preventDefault();\r\n    const clickedNode = nodes.find(node => node.id === nodeId);\r\n\r\n    if (event.shiftKey || event.ctrlKey) {\r\n      if (!selectedNodes.some(selectedNode => selectedNode.id === nodeId)) {\r\n        setSelectedNodes([...selectedNodes, clickedNode]);\r\n      }\r\n    } else {\r\n      setSelectedNodes([clickedNode]);\r\n    }\r\n\r\n    setContextMenuPosition({ x: event.clientX, y: event.clientY });\r\n    setShowContextMenu(true);\r\n    setShowColorMenu(false);  // Hide color menu if it was previously open\r\n  };\r\n\r\n  // Handle edge deletion\r\n  const handleDeleteEdge = useCallback((id) => {\r\n    setEdges((eds) => eds.filter((edge) => edge.id !== id));  // Remove the edge by its ID\r\n  }, [setEdges]);\r\n\r\n  // Hide both context and color menus when the mouse leaves both\r\n  const hideMenus = () => {\r\n    if (!isInMenu) {\r\n      setShowContextMenu(false);\r\n      setShowColorMenu(false);\r\n    }\r\n  };\r\n\r\n  const openColorMenu = () => {\r\n    setShowColorMenu(true);  // Show the color selection menu\r\n  };\r\n\r\n  // Handle renaming the selected node (only for single node selection)\r\n  const changeNodeName = () => {\r\n    if (selectedNodes.length === 1) {\r\n      const selectedNode = selectedNodes[0];\r\n      const newName = prompt('Enter new name for the node:', selectedNode.data.label);\r\n      if (newName) {\r\n        setNodes((nds) =>\r\n          nds.map((node) =>\r\n            node.id === selectedNode.id ? { ...node, data: { ...node.data, label: newName } } : node\r\n          )\r\n        );\r\n        setShowContextMenu(false); // Close the menu\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle copying selected nodes\r\n  const copySelectedNodes = () => {\r\n    const nodeIdMap = {}; // Map to store old-to-new node ID mapping\r\n  \r\n    // Copy nodes and generate new unique IDs for them\r\n    const newNodes = selectedNodes.map((node) => {\r\n      const newNodeId = `node-${Date.now() + Math.random()}`;\r\n      nodeIdMap[node.id] = newNodeId; // Map old node ID to new node ID\r\n  \r\n      return {\r\n        ...node,\r\n        id: newNodeId, // Assign the new ID to the copied node\r\n        position: { x: node.position.x + 20, y: node.position.y + 20 }, // Offset to avoid overlap\r\n        data: { ...node.data, label: `${node.data.label} (Copy)` },\r\n      };\r\n    });\r\n  \r\n    // Copy edges connected to the selected nodes\r\n    const connectedEdges = edges.filter(edge =>\r\n      selectedNodes.some(node => node.id === edge.source || node.id === edge.target)\r\n    );\r\n  \r\n    // Copy edges and assign new unique IDs\r\n    const newEdges = connectedEdges.map((edge) => ({\r\n      ...edge,\r\n      id: `edge-${Date.now() + Math.random()}`, // Ensure unique edge ID\r\n      source: nodeIdMap[edge.source] || edge.source, // Map old source ID to new source ID if applicable\r\n      target: nodeIdMap[edge.target] || edge.target, // Map old target ID to new target ID if applicable\r\n    }));\r\n  \r\n    // Add the copied nodes and edges to the state\r\n    setNodes((nds) => [...nds, ...newNodes]);\r\n    setEdges((eds) => [...eds, ...newEdges]);\r\n    setShowContextMenu(false); // Close the context menu\r\n  };\r\n\r\n  // Handle deleting selected nodes\r\n  const deleteSelectedNodes = () => {\r\n    setNodes((nds) => nds.filter((node) => !selectedNodes.some((selectedNode) => selectedNode.id === node.id)));\r\n    setEdges((eds) => eds.filter((edge) => !selectedNodes.some((selectedNode) => edge.source === selectedNode.id || edge.target === selectedNode.id)));\r\n    setShowContextMenu(false); // Close the menu\r\n  };\r\n\r\n  const changeNodeColor = (color) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) =>\r\n        selectedNodes.some(selectedNode => selectedNode.id === node.id)\r\n          ? { ...node, style: { ...node.style, backgroundColor: color } }\r\n          : node\r\n      )\r\n    );\r\n    setShowContextMenu(false);  // Close the context menu\r\n    setShowColorMenu(false);    // Close the color menu\r\n  };\r\n\r\n  const handleEdgePropertyChange = useCallback((id, propertyName, propertyValue) => {\r\n    console.log('change edge:', id);\r\n    setEdges((eds) =>\r\n      eds.map((edge) =>\r\n        edge.id === id\r\n          ? { ...edge, data: { ...edge.data, properties: { ...edge.data.properties, [propertyName]: propertyValue } } }\r\n          : edge\r\n      )\r\n    );\r\n  }, [setEdges]);\r\n\r\n  const handleConnect = useCallback((params) => {\r\n    const defaultEdgeProperties = defaultProperties.edges.default;  // Load default edge properties from JSON\r\n    const newEdgeId = `edge-${Date.now()}`;  // Generate a unique ID for the edge\r\n    setEdges((eds) => [\r\n      ...eds,\r\n      {\r\n        ...params,\r\n        type: 'customEdge',\r\n        id: newEdgeId,\r\n        data: {\r\n          properties: defaultEdgeProperties, \r\n          onPropertyChange: (propertyName, propertyValue) => handleEdgePropertyChange(newEdgeId, propertyName, propertyValue),\r\n          onDelete: () => handleDeleteEdge(newEdgeId),  // Pass the delete function\r\n        },\r\n        style: { strokeWidth: 5, stroke: '#bfb' },\r\n      },\r\n    ]);\r\n    \r\n  }, [setEdges, handleEdgePropertyChange,handleDeleteEdge]);\r\n  \r\n  // Handle node property changes\r\n  const handlePropertyChange = useCallback((id, propertyName, propertyValue) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) =>\r\n        node.id === id\r\n          ? { ...node, data: { ...node.data, [propertyName]: propertyValue } }\r\n          : node\r\n      )\r\n    );\r\n    \r\n  }, [setNodes]);\r\n\r\n  const handleAddNode = useCallback((newNode) => {\r\n    setNodes((nds) => [\r\n      ...nds,\r\n      {\r\n        id: newNode.id,\r\n        type: newNode.type,  // React Flow type\r\n        position: newNode.position,\r\n        data: {\r\n          ...newNode.data,  // Preserve all data properties\r\n          onPropertyChange: (propertyName, propertyValue) => \r\n            handlePropertyChange(newNode.id, propertyName, propertyValue),\r\n        },\r\n      },\r\n    ]);\r\n  }, [setNodes, handlePropertyChange]);\r\n\r\n  const onImportFlow = (importedFlow) => {\r\n    let parsedFlow;\r\n    \r\n    // Check if the imported flow is a string or already an object\r\n    if (typeof importedFlow === 'string') {\r\n      parsedFlow = JSON.parse(importedFlow);  // Parse the JSON string\r\n    } else {\r\n      parsedFlow = importedFlow;  // Use the object as is\r\n    }\r\n  \r\n    const { nodes, edges } = parsedFlow;\r\n  \r\n    // Update nodes to include onPropertyChange handler\r\n    const updatedNodes = nodes.map(node => ({\r\n      ...node,\r\n      data: {\r\n        ...node.data,\r\n        onPropertyChange: (propertyName, propertyValue) => handlePropertyChange(node.id, propertyName, propertyValue),\r\n      }\r\n    }));\r\n  \r\n    // Update edges to include onPropertyChange and onDelete handlers\r\n    const updatedEdges = edges.map(edge => ({\r\n      ...edge,\r\n      data: {\r\n        ...edge.data,\r\n        onPropertyChange: (propertyName, propertyValue) => handleEdgePropertyChange(edge.id, propertyName, propertyValue),\r\n        onDelete: () => handleDeleteEdge(edge.id),\r\n      }\r\n    }));\r\n  \r\n    setNodes(updatedNodes);  // Update nodes state with handlers\r\n    setEdges(updatedEdges);  // Update edges state with handlers\r\n  \r\n    console.log('Flow imported:', updatedNodes, updatedEdges);\r\n  };\r\n\r\n  //console.log('Rendering Nodes in React Flow:', nodes);\r\n\r\n  const styles = {\r\n    menuButton: {\r\n      display: 'block',\r\n      margin: '5px 0',\r\n      padding: '8px',\r\n      border: 'none',\r\n      cursor: 'pointer',\r\n      borderRadius: '3px',\r\n      width: '100%',\r\n      ...backgroundVariants.menuBackground\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div className=\"screen-wide-component\" style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1, height: '100vh', ...backgroundVariants.mainBackground }}\r\n          onContextMenu={(e) => e.preventDefault()}\r\n        >\r\n          <ReactFlow\r\n            nodes={nodes.map(node => ({\r\n              ...node,\r\n              selected: selectedNodes.some(selectedNode => selectedNode.id === node.id),\r\n              data: {\r\n                ...node.data,\r\n                onContextMenu: (event) => handleContextMenu(event, node.id),\r\n                onClick: (event) => handleNodeClick(event, node.id),\r\n              },\r\n            }))}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={handleConnect}\r\n            nodeTypes={nodeTypes}\r\n            edgeTypes={edgeTypes}\r\n            minZoom={0.1}\r\n            maxZoom={2}\r\n          >\r\n            <Background color=\"#666666\" gap={50} size={0.5} />\r\n            <Controls />\r\n            <SidePanel \r\n              onAddNode={handleAddNode} \r\n              onProceed={onProceed} \r\n              onImportFlow={onImportFlow}\r\n              onScanDevices={onScanDevices}\r\n              detectedDevices={detectedDevices}\r\n              nodes={nodes}\r\n              edges={edges}\r\n            />\r\n          </ReactFlow>\r\n\r\n          {showContextMenu && (\r\n            <div\r\n              ref={contextMenuRef}\r\n              style={{\r\n                position: 'absolute',\r\n                top: `${contextMenuPosition.y}px`,\r\n                left: `${contextMenuPosition.x}px`,\r\n                borderRadius: '5px',\r\n                padding: '10px',\r\n                zIndex: 100,\r\n                ...backgroundVariants.menuBackground\r\n              }}\r\n              onMouseEnter={() => setIsInMenu(true)}\r\n              onMouseLeave={() => {\r\n                setIsInMenu(false);\r\n                hideMenus();\r\n              }}\r\n            >\r\n              <button onClick={openColorMenu} style={styles.menuButton}>\r\n                Change Color\r\n              </button>\r\n              {selectedNodes.length === 1 && (\r\n                <button onClick={changeNodeName} style={styles.menuButton}>\r\n                  Change Name\r\n                </button>\r\n              )}\r\n              <button onClick={copySelectedNodes} style={styles.menuButton}>\r\n                Copy\r\n              </button>\r\n              <button onClick={deleteSelectedNodes} style={styles.menuButton}>\r\n                Delete\r\n              </button>\r\n              <button onClick={() => {\r\n                setIsInMenu(false);\r\n                hideMenus();\r\n              }}\r\n              style={styles.menuButton}>\r\n                Close Menus\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {showColorMenu && (\r\n            <div\r\n              style={{\r\n                position: 'absolute',\r\n                top: `${contextMenuPosition.y}px`,\r\n                left: `${contextMenuPosition.x + 120}px`,\r\n                borderRadius: '5px',\r\n                padding: '10px',\r\n                display: 'grid',\r\n                gridTemplateColumns: 'repeat(3, 1fr)',\r\n                gap: '5px',\r\n                zIndex: 101,\r\n                ...backgroundVariants.menuBackground\r\n              }}\r\n              onMouseEnter={() => setIsInMenu(true)}\r\n              onMouseLeave={() => {\r\n                setIsInMenu(false);\r\n                hideMenus();\r\n              }}\r\n            >\r\n              {colorOptions.map((color) => (\r\n                <div\r\n                  key={color}\r\n                  onClick={() => changeNodeColor(color)}\r\n                  style={{\r\n                    width: '20px',\r\n                    height: '20px',\r\n                    backgroundColor: color,\r\n                    cursor: 'pointer',\r\n                    borderRadius: '50%',\r\n                  }}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n\r\nexport default FlowchartEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}