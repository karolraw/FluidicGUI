{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\DropletGenerator\\\\Manual\\\\DropletBar.js\";\nimport React from 'react';\n\n/**\r\n * Rounds a number to the specified number of significant digits\r\n * @param {number} num - The number to round\r\n * @param {number} sigDigits - Number of significant digits to keep (default: 2)\r\n * @returns {number} - Rounded number\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst roundToSignificantDigits = (num, sigDigits = 2) => {\n  if (num === 0) return 0;\n\n  // Get the power of 10 for the first significant digit\n  const power = Math.floor(Math.log10(Math.abs(num)));\n\n  // Calculate the multiplier\n  const multiplier = Math.pow(10, sigDigits - power - 1);\n\n  // Round the number\n  return Math.round(num * multiplier) / multiplier;\n};\n\n/**\r\n * Calculate perceived brightness of a color (on scale 0-255)\r\n * Uses the formula: (0.299*R + 0.587*G + 0.114*B)\r\n * @param {string} color - RGB color in format 'rgb(r, g, b)'\r\n * @returns {number} - Perceived brightness value\r\n */\nconst getColorBrightness = color => {\n  // Extract RGB values from the color string\n  const rgbMatch = color.match(/rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i);\n  if (!rgbMatch) return 127; // Default to middle brightness if parsing fails\n\n  const r = parseInt(rgbMatch[1], 10);\n  const g = parseInt(rgbMatch[2], 10);\n  const b = parseInt(rgbMatch[3], 10);\n\n  // Calculate perceived brightness (gives more weight to green as human eyes are more sensitive to it)\n  return 0.299 * r + 0.587 * g + 0.114 * b;\n};\n\n// A bar representing a parameter (composition, treatment intensity, etc.)\nconst DropletBar = ({\n  value,\n  range = {\n    min: 0,\n    max: 100\n  },\n  colorScheme = 'cividis'\n}) => {\n  // Ensure value is not an object. If it is, convert it to a string.\n  let displayValue = typeof value === 'object' ? parseFloat(value.value) : value;\n\n  // Round to 2 significant digits for display\n  displayValue = roundToSignificantDigits(displayValue);\n  const color = getColorBasedOnValue(displayValue, range.min, range.max, colorScheme);\n\n  // Determine text color based on background brightness\n  const brightness = getColorBrightness(color);\n  const textColor = brightness > 127 ? 'black' : 'white'; // Use black for bright backgrounds, white for dark backgrounds\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '25px',\n      height: '15px',\n      backgroundColor: color,\n      margin: '1px',\n      color: textColor,\n      textAlign: 'center',\n      fontSize: '10px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontWeight: 'bold'\n    },\n    children: [displayValue, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n// Scientific color schemes based on percentage (0-1)\n_c = DropletBar;\nconst scientificColorSchemes = {\n  // Viridis - Perceptually uniform blue-green-yellow\n  viridis: percentage => {\n    if (percentage < 0.25) {\n      // Dark blue to blue\n      return `rgb(68, 1, 84, 1.0)`.replace('1, 84', `${roundToSignificantDigits(1 + percentage * 4 * 31)}, ${roundToSignificantDigits(84 + percentage * 4 * 58)}`);\n    } else if (percentage < 0.5) {\n      // Blue to teal\n      return `rgb(59, 82, 139, 1.0)`.replace('59, 82, 139', `${roundToSignificantDigits(59 - (percentage - 0.25) * 4 * 26)}, ${roundToSignificantDigits(82 + (percentage - 0.25) * 4 * 56)}, ${roundToSignificantDigits(139 - (percentage - 0.25) * 4 * 10)}`);\n    } else if (percentage < 0.75) {\n      // Teal to green\n      return `rgb(33, 144, 141, 1.0)`.replace('33, 144, 141', `${roundToSignificantDigits(33 + (percentage - 0.5) * 4 * 93)}, ${roundToSignificantDigits(144 + (percentage - 0.5) * 4 * 57)}, ${roundToSignificantDigits(141 - (percentage - 0.5) * 4 * 104)}`);\n    } else {\n      // Green to yellow\n      return `rgb(126, 211, 33, 1.0)`.replace('126, 211, 33', `${roundToSignificantDigits(126 + (percentage - 0.75) * 4 * 127)}, ${roundToSignificantDigits(211 + (percentage - 0.75) * 4 * 44)}, ${roundToSignificantDigits(33 + (percentage - 0.75) * 4 * 5)}`);\n    }\n  },\n  // Plasma - Perceptually uniform purple-red-yellow\n  plasma: percentage => {\n    if (percentage < 0.33) {\n      // Dark purple to magenta\n      const p = percentage * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(13 + p * 143))}, ${Math.round(roundToSignificantDigits(8 + p * 63))}, ${Math.round(roundToSignificantDigits(135 + p * 20))})`;\n    } else if (percentage < 0.66) {\n      // Magenta to orange\n      const p = (percentage - 0.33) * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(156 + p * 84))}, ${Math.round(roundToSignificantDigits(71 + p * 118))}, ${Math.round(roundToSignificantDigits(155 - p * 95))})`;\n    } else {\n      // Orange to yellow\n      const p = (percentage - 0.66) * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(240 + p * 13))}, ${Math.round(roundToSignificantDigits(189 + p * 56))}, ${Math.round(roundToSignificantDigits(60 + p * 17))})`;\n    }\n  },\n  // Inferno - Black to red to yellow\n  inferno: percentage => {\n    if (percentage < 0.33) {\n      // Black to purple\n      const p = percentage * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(0 + p * 120))}, ${Math.round(roundToSignificantDigits(0 + p * 28))}, ${Math.round(roundToSignificantDigits(4 + p * 95))})`;\n    } else if (percentage < 0.66) {\n      // Purple to red\n      const p = (percentage - 0.33) * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(120 + p * 100))}, ${Math.round(roundToSignificantDigits(28 + p * 12))}, ${Math.round(roundToSignificantDigits(99 - p * 60))})`;\n    } else {\n      // Red to yellow\n      const p = (percentage - 0.66) * 3;\n      return `rgb(${Math.round(roundToSignificantDigits(220 + p * 32))}, ${Math.round(roundToSignificantDigits(40 + p * 210))}, ${Math.round(roundToSignificantDigits(39 + p * 28))})`;\n    }\n  },\n  // Cividis - Colorblind-friendly blue to yellow\n  cividis: percentage => {\n    if (percentage < 0.5) {\n      // Dark blue to teal\n      const p = percentage * 2;\n      return `rgb(${Math.round(roundToSignificantDigits(0 + p * 97))}, ${Math.round(roundToSignificantDigits(32 + p * 153))}, ${Math.round(roundToSignificantDigits(77 + p * 67))})`;\n    } else {\n      // Teal to yellow\n      const p = (percentage - 0.5) * 2;\n      return `rgb(${Math.round(roundToSignificantDigits(97 + p * 158))}, ${Math.round(roundToSignificantDigits(185 + p * 55))}, ${Math.round(roundToSignificantDigits(144 - p * 114))})`;\n    }\n  },\n  // Turbo - Enhanced rainbow (blue-cyan-green-yellow-red)\n  turbo: percentage => {\n    if (percentage < 0.2) {\n      // Blue to cyan\n      const p = percentage * 5;\n      return `rgb(${Math.round(roundToSignificantDigits(48 + p * 0))}, ${Math.round(roundToSignificantDigits(18 + p * 147))}, ${Math.round(roundToSignificantDigits(227 - p * 50))})`;\n    } else if (percentage < 0.4) {\n      // Cyan to green\n      const p = (percentage - 0.2) * 5;\n      return `rgb(${Math.round(roundToSignificantDigits(48 + p * 34))}, ${Math.round(roundToSignificantDigits(165 + p * 64))}, ${Math.round(roundToSignificantDigits(177 - p * 131))})`;\n    } else if (percentage < 0.6) {\n      // Green to yellow\n      const p = (percentage - 0.4) * 5;\n      return `rgb(${Math.round(roundToSignificantDigits(82 + p * 173))}, ${Math.round(roundToSignificantDigits(229 + p * 10))}, ${Math.round(roundToSignificantDigits(46 - p * 10))})`;\n    } else if (percentage < 0.8) {\n      // Yellow to orange\n      const p = (percentage - 0.6) * 5;\n      return `rgb(${Math.round(roundToSignificantDigits(255 - p * 45))}, ${Math.round(roundToSignificantDigits(239 - p * 143))}, ${Math.round(roundToSignificantDigits(36 - p * 5))})`;\n    } else {\n      // Orange to red\n      const p = (percentage - 0.8) * 5;\n      return `rgb(${Math.round(roundToSignificantDigits(210 - p * 80))}, ${Math.round(roundToSignificantDigits(96 - p * 77))}, ${Math.round(roundToSignificantDigits(31 + p * 25))})`;\n    }\n  }\n};\n\n// Return different colors based on the parameter value\nconst getColorBasedOnValue = (value, minValue = 0, maxValue = 100, colorScheme = 'cividis') => {\n  const numericValue = parseFloat(value); // Safeguard if value is a string\n\n  // Clamp the numericValue between minValue and maxValue\n  const clampedValue = Math.min(Math.max(numericValue, minValue), maxValue);\n\n  // Convert the value to a percentage (0-100)\n  const percentage = (clampedValue - minValue) / (maxValue - minValue);\n\n  // Apply color based on selected scheme\n  if (scientificColorSchemes[colorScheme]) {\n    return scientificColorSchemes[colorScheme](percentage);\n  } else {\n    // Fallback to cividis if selected scheme is not available\n    return scientificColorSchemes.cividis(percentage);\n  }\n};\nexport default DropletBar;\nvar _c;\n$RefreshReg$(_c, \"DropletBar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","roundToSignificantDigits","num","sigDigits","power","Math","floor","log10","abs","multiplier","pow","round","getColorBrightness","color","rgbMatch","match","r","parseInt","g","b","DropletBar","value","range","min","max","colorScheme","displayValue","parseFloat","getColorBasedOnValue","brightness","textColor","style","width","height","backgroundColor","margin","textAlign","fontSize","display","alignItems","justifyContent","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","scientificColorSchemes","viridis","percentage","replace","plasma","p","inferno","cividis","turbo","minValue","maxValue","numericValue","clampedValue","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/DropletGenerator/Manual/DropletBar.js"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Rounds a number to the specified number of significant digits\r\n * @param {number} num - The number to round\r\n * @param {number} sigDigits - Number of significant digits to keep (default: 2)\r\n * @returns {number} - Rounded number\r\n */\r\nconst roundToSignificantDigits = (num, sigDigits = 2) => {\r\n  if (num === 0) return 0;\r\n  \r\n  // Get the power of 10 for the first significant digit\r\n  const power = Math.floor(Math.log10(Math.abs(num)));\r\n  \r\n  // Calculate the multiplier\r\n  const multiplier = Math.pow(10, sigDigits - power - 1);\r\n  \r\n  // Round the number\r\n  return Math.round(num * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Calculate perceived brightness of a color (on scale 0-255)\r\n * Uses the formula: (0.299*R + 0.587*G + 0.114*B)\r\n * @param {string} color - RGB color in format 'rgb(r, g, b)'\r\n * @returns {number} - Perceived brightness value\r\n */\r\nconst getColorBrightness = (color) => {\r\n  // Extract RGB values from the color string\r\n  const rgbMatch = color.match(/rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i);\r\n  if (!rgbMatch) return 127; // Default to middle brightness if parsing fails\r\n  \r\n  const r = parseInt(rgbMatch[1], 10);\r\n  const g = parseInt(rgbMatch[2], 10);\r\n  const b = parseInt(rgbMatch[3], 10);\r\n  \r\n  // Calculate perceived brightness (gives more weight to green as human eyes are more sensitive to it)\r\n  return (0.299 * r + 0.587 * g + 0.114 * b);\r\n};\r\n\r\n// A bar representing a parameter (composition, treatment intensity, etc.)\r\nconst DropletBar = ({ value, range = { min: 0, max: 100 }, colorScheme = 'cividis' }) => {\r\n  // Ensure value is not an object. If it is, convert it to a string.\r\n  let displayValue = typeof value === 'object' ? parseFloat(value.value) : value;\r\n  \r\n  // Round to 2 significant digits for display\r\n  displayValue = roundToSignificantDigits(displayValue);\r\n  \r\n  const color = getColorBasedOnValue(displayValue, range.min, range.max, colorScheme);\r\n  \r\n  // Determine text color based on background brightness\r\n  const brightness = getColorBrightness(color);\r\n  const textColor = brightness > 127 ? 'black' : 'white'; // Use black for bright backgrounds, white for dark backgrounds\r\n  \r\n  return (\r\n    <div style={{\r\n      width: '25px',\r\n      height: '15px',\r\n      backgroundColor: color,\r\n      margin: '1px',\r\n      color: textColor,\r\n      textAlign: 'center',\r\n      fontSize: '10px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      fontWeight: 'bold',\r\n    }}>\r\n      {displayValue} {/* Render the rounded displayValue with dynamic text color */}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Scientific color schemes based on percentage (0-1)\r\nconst scientificColorSchemes = {\r\n  // Viridis - Perceptually uniform blue-green-yellow\r\n  viridis: (percentage) => {\r\n    if (percentage < 0.25) {\r\n      // Dark blue to blue\r\n      return `rgb(68, 1, 84, 1.0)`.replace(\r\n        '1, 84', \r\n        `${roundToSignificantDigits(1 + percentage * 4 * 31)}, ${roundToSignificantDigits(84 + percentage * 4 * 58)}`\r\n      );\r\n    } else if (percentage < 0.5) {\r\n      // Blue to teal\r\n      return `rgb(59, 82, 139, 1.0)`.replace(\r\n        '59, 82, 139', \r\n        `${roundToSignificantDigits(59 - (percentage - 0.25) * 4 * 26)}, ${roundToSignificantDigits(82 + (percentage - 0.25) * 4 * 56)}, ${roundToSignificantDigits(139 - (percentage - 0.25) * 4 * 10)}`\r\n      );\r\n    } else if (percentage < 0.75) {\r\n      // Teal to green\r\n      return `rgb(33, 144, 141, 1.0)`.replace(\r\n        '33, 144, 141', \r\n        `${roundToSignificantDigits(33 + (percentage - 0.5) * 4 * 93)}, ${roundToSignificantDigits(144 + (percentage - 0.5) * 4 * 57)}, ${roundToSignificantDigits(141 - (percentage - 0.5) * 4 * 104)}`\r\n      );\r\n    } else {\r\n      // Green to yellow\r\n      return `rgb(126, 211, 33, 1.0)`.replace(\r\n        '126, 211, 33', \r\n        `${roundToSignificantDigits(126 + (percentage - 0.75) * 4 * 127)}, ${roundToSignificantDigits(211 + (percentage - 0.75) * 4 * 44)}, ${roundToSignificantDigits(33 + (percentage - 0.75) * 4 * 5)}`\r\n      );\r\n    }\r\n  },\r\n  \r\n  // Plasma - Perceptually uniform purple-red-yellow\r\n  plasma: (percentage) => {\r\n    if (percentage < 0.33) {\r\n      // Dark purple to magenta\r\n      const p = percentage * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(13 + p * 143))}, ${Math.round(roundToSignificantDigits(8 + p * 63))}, ${Math.round(roundToSignificantDigits(135 + p * 20))})`;\r\n    } else if (percentage < 0.66) {\r\n      // Magenta to orange\r\n      const p = (percentage - 0.33) * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(156 + p * 84))}, ${Math.round(roundToSignificantDigits(71 + p * 118))}, ${Math.round(roundToSignificantDigits(155 - p * 95))})`;\r\n    } else {\r\n      // Orange to yellow\r\n      const p = (percentage - 0.66) * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(240 + p * 13))}, ${Math.round(roundToSignificantDigits(189 + p * 56))}, ${Math.round(roundToSignificantDigits(60 + p * 17))})`;\r\n    }\r\n  },\r\n  \r\n  // Inferno - Black to red to yellow\r\n  inferno: (percentage) => {\r\n    if (percentage < 0.33) {\r\n      // Black to purple\r\n      const p = percentage * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(0 + p * 120))}, ${Math.round(roundToSignificantDigits(0 + p * 28))}, ${Math.round(roundToSignificantDigits(4 + p * 95))})`;\r\n    } else if (percentage < 0.66) {\r\n      // Purple to red\r\n      const p = (percentage - 0.33) * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(120 + p * 100))}, ${Math.round(roundToSignificantDigits(28 + p * 12))}, ${Math.round(roundToSignificantDigits(99 - p * 60))})`;\r\n    } else {\r\n      // Red to yellow\r\n      const p = (percentage - 0.66) * 3;\r\n      return `rgb(${Math.round(roundToSignificantDigits(220 + p * 32))}, ${Math.round(roundToSignificantDigits(40 + p * 210))}, ${Math.round(roundToSignificantDigits(39 + p * 28))})`;\r\n    }\r\n  },\r\n  \r\n  // Cividis - Colorblind-friendly blue to yellow\r\n  cividis: (percentage) => {\r\n    if (percentage < 0.5) {\r\n      // Dark blue to teal\r\n      const p = percentage * 2;\r\n      return `rgb(${Math.round(roundToSignificantDigits(0 + p * 97))}, ${Math.round(roundToSignificantDigits(32 + p * 153))}, ${Math.round(roundToSignificantDigits(77 + p * 67))})`;\r\n    } else {\r\n      // Teal to yellow\r\n      const p = (percentage - 0.5) * 2;\r\n      return `rgb(${Math.round(roundToSignificantDigits(97 + p * 158))}, ${Math.round(roundToSignificantDigits(185 + p * 55))}, ${Math.round(roundToSignificantDigits(144 - p * 114))})`;\r\n    }\r\n  },\r\n  \r\n  // Turbo - Enhanced rainbow (blue-cyan-green-yellow-red)\r\n  turbo: (percentage) => {\r\n    if (percentage < 0.2) {\r\n      // Blue to cyan\r\n      const p = percentage * 5;\r\n      return `rgb(${Math.round(roundToSignificantDigits(48 + p * 0))}, ${Math.round(roundToSignificantDigits(18 + p * 147))}, ${Math.round(roundToSignificantDigits(227 - p * 50))})`;\r\n    } else if (percentage < 0.4) {\r\n      // Cyan to green\r\n      const p = (percentage - 0.2) * 5;\r\n      return `rgb(${Math.round(roundToSignificantDigits(48 + p * 34))}, ${Math.round(roundToSignificantDigits(165 + p * 64))}, ${Math.round(roundToSignificantDigits(177 - p * 131))})`;\r\n    } else if (percentage < 0.6) {\r\n      // Green to yellow\r\n      const p = (percentage - 0.4) * 5;\r\n      return `rgb(${Math.round(roundToSignificantDigits(82 + p * 173))}, ${Math.round(roundToSignificantDigits(229 + p * 10))}, ${Math.round(roundToSignificantDigits(46 - p * 10))})`;\r\n    } else if (percentage < 0.8) {\r\n      // Yellow to orange\r\n      const p = (percentage - 0.6) * 5;\r\n      return `rgb(${Math.round(roundToSignificantDigits(255 - p * 45))}, ${Math.round(roundToSignificantDigits(239 - p * 143))}, ${Math.round(roundToSignificantDigits(36 - p * 5))})`;\r\n    } else {\r\n      // Orange to red\r\n      const p = (percentage - 0.8) * 5;\r\n      return `rgb(${Math.round(roundToSignificantDigits(210 - p * 80))}, ${Math.round(roundToSignificantDigits(96 - p * 77))}, ${Math.round(roundToSignificantDigits(31 + p * 25))})`;\r\n    }\r\n  }\r\n};\r\n\r\n// Return different colors based on the parameter value\r\nconst getColorBasedOnValue = (value, minValue = 0, maxValue = 100, colorScheme = 'cividis') => {\r\n  const numericValue = parseFloat(value); // Safeguard if value is a string\r\n\r\n  // Clamp the numericValue between minValue and maxValue\r\n  const clampedValue = Math.min(Math.max(numericValue, minValue), maxValue);\r\n\r\n  // Convert the value to a percentage (0-100)\r\n  const percentage = (clampedValue - minValue) / (maxValue - minValue);\r\n\r\n  // Apply color based on selected scheme\r\n  if (scientificColorSchemes[colorScheme]) {\r\n    return scientificColorSchemes[colorScheme](percentage);\r\n  } else {\r\n    // Fallback to cividis if selected scheme is not available\r\n    return scientificColorSchemes.cividis(percentage);\r\n  }\r\n};\r\n\r\nexport default DropletBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}