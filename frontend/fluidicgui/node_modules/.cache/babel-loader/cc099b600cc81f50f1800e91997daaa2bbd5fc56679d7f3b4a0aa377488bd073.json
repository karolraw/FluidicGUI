{"ast":null,"code":"var _jsxFileName = \"E:\\\\flow chemistry\\\\fluidicGUI\\\\frontend\\\\fluidicgui\\\\src\\\\components\\\\Simulation\\\\DetectorComponents\\\\CameraComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CameraComponent = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    onResize,\n    onLineDataChange\n  } = props;\n  const buttonVariants = useButtonStyles();\n\n  // Camera view state\n  const [cameraSize, setCameraSize] = useState({\n    width: 640,\n    height: 480\n  });\n  const [isResizing, setIsResizing] = useState(false);\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\n\n  // Camera operation state\n  const [availableCameras, setAvailableCameras] = useState([]);\n  const [selectedCamera, setSelectedCamera] = useState('');\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [showCameraSettings, setShowCameraSettings] = useState(false);\n  const [showAdvancedCapabilities, setShowAdvancedCapabilities] = useState(false);\n  const [cameraCapabilities, setCameraCapabilities] = useState(null);\n  const [exposureMode, setExposureMode] = useState('continuous');\n\n  // Line drawing state\n  const [isDrawingLine, setIsDrawingLine] = useState(false);\n  const [lineStart, setLineStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [lineEnd, setLineEnd] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isLineDrawn, setIsLineDrawn] = useState(false);\n  const [isExtracting, setIsExtracting] = useState(false);\n  const [extractedData, setExtractedData] = useState(null);\n\n  // Line adjustment state\n  const [lineYOffset, setLineYOffset] = useState(0);\n  const [lineXOffset, setLineXOffset] = useState(0);\n  const [originalLineStart, setOriginalLineStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [originalLineEnd, setOriginalLineEnd] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Camera settings\n  const [cameraResolution, setCameraResolution] = useState('640x480');\n  const [cameraExposureTime, setCameraExposureTime] = useState(null); // Exposure time in milliseconds\n  const [cameraBrightness, setCameraBrightness] = useState(null); // Brightness value\n  const [cameraGain, setCameraGain] = useState(null);\n\n  // Refs\n  const cameraContainerRef = useRef(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const streamRef = useRef(null);\n  const animationRequestRef = useRef(null);\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    // Get current camera settings\n    getSettings: () => {\n      return {\n        cameraId: selectedCamera,\n        resolution: cameraResolution,\n        exposureTime: cameraExposureTime,\n        brightness: cameraBrightness,\n        gain: cameraGain,\n        exposureMode: exposureMode,\n        // Line drawing settings\n        isLineDrawn: isLineDrawn,\n        lineStart: originalLineStart,\n        lineEnd: originalLineEnd,\n        lineYOffset: lineYOffset,\n        lineXOffset: lineXOffset\n      };\n    },\n    // Expose startCamera method to parent\n    startCamera: async () => {\n      if (!isCameraActive && selectedCamera) {\n        return startCamera();\n      }\n      return Promise.resolve(false);\n    },\n    // Apply saved camera settings\n    applySettings: async settings => {\n      if (!settings) return false;\n      try {\n        // Apply camera ID and start camera if needed\n        if (settings.cameraId) {\n          const cameraExists = availableCameras.some(camera => camera.deviceId === settings.cameraId);\n          if (cameraExists) {\n            setSelectedCamera(settings.cameraId);\n\n            // If camera is not active, start it\n            if (!isCameraActive) {\n              // Short delay to allow state update\n              setTimeout(() => startCamera(), 100);\n\n              // Wait for camera to start before continuing\n              await new Promise(resolve => setTimeout(resolve, 1000));\n            }\n          }\n        }\n\n        // Apply resolution\n        if (settings.resolution) {\n          setCameraResolution(settings.resolution);\n        }\n\n        // Apply exposure time\n        if (settings.exposureTime !== null && settings.exposureTime !== undefined) {\n          setCameraExposureTime(settings.exposureTime);\n        }\n\n        // Apply brightness\n        if (settings.brightness !== null && settings.brightness !== undefined) {\n          setCameraBrightness(settings.brightness);\n        }\n\n        // Apply gain\n        if (settings.gain !== null && settings.gain !== undefined) {\n          setCameraGain(settings.gain);\n        }\n\n        // Apply exposure mode\n        if (settings.exposureMode) {\n          setExposureMode(settings.exposureMode);\n        }\n\n        // Apply settings to camera\n        await applyCameraSettings();\n\n        // After camera settings are applied, handle line drawing settings\n        if (settings.isLineDrawn && settings.lineStart && settings.lineEnd) {\n          // Set original line points\n          setOriginalLineStart(settings.lineStart);\n          setOriginalLineEnd(settings.lineEnd);\n\n          // Set current line points (will be adjusted by offset/rotation later)\n          setLineStart(settings.lineStart);\n          setLineEnd(settings.lineEnd);\n\n          // Mark line as drawn\n          setIsLineDrawn(true);\n\n          // Apply line adjustments\n          if (settings.lineYOffset !== undefined) {\n            setLineYOffset(settings.lineYOffset);\n          }\n          if (settings.lineXOffset !== undefined) {\n            setLineXOffset(settings.lineXOffset);\n          }\n\n          // Calculate transformed line with adjustments\n          calculateTransformedLinePosition();\n\n          // Start extraction if needed\n          setIsExtracting(true);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error applying camera settings:', error);\n        return false;\n      }\n    }\n  }));\n\n  // Get available cameras on component mount\n  useEffect(() => {\n    getAvailableCameras();\n\n    // Cleanup function to stop video stream when component unmounts\n    return () => {\n      stopCamera();\n    };\n  }, []);\n\n  // Initialize canvas size when video size changes\n  useEffect(() => {\n    if (canvasRef.current) {\n      console.log('Setting canvas dimensions to:', cameraSize.width, cameraSize.height);\n      canvasRef.current.width = cameraSize.width;\n      canvasRef.current.height = cameraSize.height;\n\n      // If line is drawn, redraw it when canvas size changes\n      if (isLineDrawn) {\n        console.log('Redrawing line due to canvas size change');\n\n        // Ensure the redraw happens after the canvas size is updated\n        // by using a small timeout\n        setTimeout(() => {\n          drawLine();\n\n          // Double-check with another redraw after a slight delay\n          setTimeout(() => drawLine(), 100);\n        }, 0);\n      }\n    }\n  }, [cameraSize.width, cameraSize.height, isLineDrawn]);\n\n  // Add a new effect for continuous redrawing of the line\n  useEffect(() => {\n    let animationId;\n\n    // Function to continuously redraw the line\n    const redrawLine = () => {\n      if (isLineDrawn && canvasRef.current) {\n        drawLine();\n      }\n      animationId = requestAnimationFrame(redrawLine);\n    };\n\n    // Start animation if line is drawn\n    if (isLineDrawn) {\n      console.log('Starting continuous line redraw');\n      animationId = requestAnimationFrame(redrawLine);\n    }\n\n    // Cleanup function\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [isLineDrawn, isExtracting, lineYOffset, lineXOffset]);\n\n  // Extract line data effect - runs continuously when line is drawn\n  useEffect(() => {\n    // Function to extract pixel data and process it\n    const extractLineData = () => {\n      if (isLineDrawn && videoRef.current && canvasRef.current && isCameraActive) {\n        const transformedLine = calculateTransformedLinePosition();\n        const lineData = getPixelsUnderLine(transformedLine.start, transformedLine.end);\n\n        // Set extracted data state\n        setExtractedData(lineData);\n\n        // Send data to parent component if callback exists\n        if (onLineDataChange) {\n          onLineDataChange({\n            start: transformedLine.start,\n            end: transformedLine.end,\n            yOffset: lineYOffset,\n            xOffset: lineXOffset,\n            pixelData: lineData\n          });\n        }\n\n        // Make sure the line remains visible during extraction\n        // This ensures data is extracted but line stays visible\n        if (isLineDrawn) {\n          requestAnimationFrame(() => drawLine());\n        }\n      }\n\n      // Continue extraction loop if still extracting\n      if (isExtracting) {\n        animationRequestRef.current = requestAnimationFrame(extractLineData);\n      }\n    };\n\n    // Start extraction if conditions are met\n    if (isLineDrawn && isCameraActive && isExtracting) {\n      animationRequestRef.current = requestAnimationFrame(extractLineData);\n    }\n\n    // Clean up animation frame on unmount or when dependencies change\n    return () => {\n      if (animationRequestRef.current) {\n        cancelAnimationFrame(animationRequestRef.current);\n        animationRequestRef.current = null;\n      }\n    };\n  }, [isLineDrawn, isCameraActive, isExtracting, lineYOffset, lineXOffset]);\n\n  // Add a separate dedicated effect for line drawing that runs regardless of extraction state\n  useEffect(() => {\n    if (!isLineDrawn || !isCameraActive) return;\n    console.log('Setting up dedicated line drawing effect');\n    const drawLineFrame = () => {\n      if (canvasRef.current && isLineDrawn) {\n        drawLine();\n      }\n      requestAnimationFrame(drawLineFrame);\n    };\n    const animationId = requestAnimationFrame(drawLineFrame);\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, [isLineDrawn, isCameraActive]);\n\n  // Add an effect to draw the line every time the video frame updates\n  useEffect(() => {\n    if (!videoRef.current || !isCameraActive || !isLineDrawn) return;\n    const video = videoRef.current;\n\n    // Function to handle video frames and redraw the line\n    const handleVideoFrame = () => {\n      if (isLineDrawn) {\n        console.log('Redrawing line on video frame update');\n        drawLine();\n      }\n    };\n\n    // Add event listeners to ensure line is drawn when video updates\n    video.addEventListener('play', handleVideoFrame);\n    video.addEventListener('timeupdate', handleVideoFrame);\n\n    // Draw immediately\n    drawLine();\n\n    // Cleanup\n    return () => {\n      video.removeEventListener('play', handleVideoFrame);\n      video.removeEventListener('timeupdate', handleVideoFrame);\n    };\n  }, [videoRef.current, isCameraActive, isLineDrawn, lineYOffset, lineXOffset]);\n\n  // Function to get available cameras\n  const getAvailableCameras = async () => {\n    try {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        console.error('MediaDevices API is not supported in this browser');\n        return;\n      }\n\n      // Request permission to camera first\n      const tempStream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      // Stop the temporary stream\n      tempStream.getTracks().forEach(track => track.stop());\n\n      // Now enumerate devices after getting permission\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(device => device.kind === 'videoinput');\n      setAvailableCameras(videoDevices);\n\n      // Select first camera by default if available\n      if (videoDevices.length > 0) {\n        setSelectedCamera(videoDevices[0].deviceId);\n      }\n    } catch (error) {\n      console.error('Error accessing camera devices:', error);\n    }\n  };\n\n  // Start camera stream\n  const startCamera = async () => {\n    try {\n      if (!selectedCamera) return;\n\n      // Stop any existing stream\n      stopCamera();\n\n      // Parse resolution\n      const [width, height] = cameraResolution.split('x').map(Number);\n\n      // Start new stream with selected camera and resolution\n      const constraints = {\n        video: {\n          deviceId: {\n            exact: selectedCamera\n          },\n          width: {\n            ideal: width\n          },\n          height: {\n            ideal: height\n          }\n        }\n      };\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        // Start playing the video\n        await videoRef.current.play();\n      }\n      setIsCameraActive(true);\n\n      // Get actual resolution from video track\n      const videoTrack = stream.getVideoTracks()[0];\n      if (videoTrack) {\n        const settings = videoTrack.getSettings();\n        if (settings.width && settings.height) {\n          setCameraSize({\n            width: settings.width,\n            height: settings.height\n          });\n        }\n\n        // Get camera capabilities\n        const capabilities = videoTrack.getCapabilities();\n        setCameraCapabilities(capabilities);\n        console.log('Camera capabilities:', capabilities);\n        console.log('Current camera settings:', settings);\n\n        // Initialize settings based on capabilities\n        if (capabilities.exposureTime) {\n          // ExposureTime is in microseconds from the API, convert to milliseconds for UI\n          const currentExposure = settings.exposureTime || Math.round((capabilities.exposureTime.max + capabilities.exposureTime.min) / 2);\n          console.log('Current exposure time (μs):', currentExposure);\n          setCameraExposureTime(currentExposure / 1000); // Convert from μs to ms for UI\n          console.log('Set exposure time state (ms):', currentExposure / 1000);\n\n          // Set current exposure mode\n          if (settings.exposureMode) {\n            setExposureMode(settings.exposureMode);\n            console.log('Current exposure mode:', settings.exposureMode);\n          }\n        } else {\n          setCameraExposureTime(null);\n          console.log('Camera does not support exposureTime');\n        }\n        if (capabilities.brightness) {\n          const defaultValue = settings.brightness || (capabilities.brightness.min + capabilities.brightness.max) / 2;\n          setCameraBrightness(defaultValue);\n        } else {\n          setCameraBrightness(null);\n        }\n        if (capabilities.exposureCompensation) {\n          const defaultValue = settings.exposureCompensation || (capabilities.exposureCompensation.min + capabilities.exposureCompensation.max) / 2;\n          setCameraGain(defaultValue);\n        } else {\n          setCameraGain(null);\n        }\n      }\n\n      // If a line was previously drawn, redraw it after a short delay to allow video to initialize\n      if (isLineDrawn) {\n        console.log('Redrawing line after camera start');\n        setTimeout(() => {\n          drawLine();\n        }, 500);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error starting camera:', error);\n      setIsCameraActive(false);\n      return false;\n    }\n  };\n\n  // Stop camera stream\n  const stopCamera = () => {\n    if (streamRef.current) {\n      const tracks = streamRef.current.getTracks();\n      tracks.forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    setIsCameraActive(false);\n  };\n\n  // Apply camera settings\n  const applyCameraSettings = async () => {\n    if (!isCameraActive || !streamRef.current) return;\n    try {\n      // Get current track\n      const videoTrack = streamRef.current.getVideoTracks()[0];\n      if (!videoTrack) return;\n\n      // Get capabilities\n      const capabilities = videoTrack.getCapabilities();\n\n      // Create constraints in proper structure for browser compatibility\n      const constraints = {\n        advanced: []\n      };\n\n      // Apply resolution if supported (this often requires stopping and restarting the stream)\n      if (cameraResolution && isCameraActive) {\n        const [width, height] = cameraResolution.split('x').map(Number);\n        console.log('Applying resolution:', width, height);\n\n        // For resolution changes, we'll stop and restart the camera with new constraints\n        stopCamera();\n\n        // Start a new stream with the new resolution\n        const newConstraints = {\n          video: {\n            deviceId: {\n              exact: selectedCamera\n            },\n            width: {\n              ideal: width\n            },\n            height: {\n              ideal: height\n            }\n          }\n        };\n\n        // Short delay to ensure the previous stream is properly stopped\n        setTimeout(async () => {\n          try {\n            const newStream = await navigator.mediaDevices.getUserMedia(newConstraints);\n            streamRef.current = newStream;\n            if (videoRef.current) {\n              videoRef.current.srcObject = newStream;\n              await videoRef.current.play();\n            }\n\n            // Get actual resolution and update state\n            const newVideoTrack = newStream.getVideoTracks()[0];\n            if (newVideoTrack) {\n              const settings = newVideoTrack.getSettings();\n              if (settings.width && settings.height) {\n                setCameraSize({\n                  width: settings.width,\n                  height: settings.height\n                });\n              }\n\n              // After restart, apply the other settings as well\n              applyNonResolutionSettings(newVideoTrack);\n            }\n          } catch (error) {\n            console.error('Error restarting camera with new resolution:', error);\n          }\n        }, 100);\n        return; // Exit early since we're restarting the camera\n      }\n\n      // If we're not changing resolution, apply other settings directly\n      applyNonResolutionSettings(videoTrack);\n    } catch (error) {\n      console.error('Error applying camera settings:', error);\n    }\n  };\n\n  // Handle exposure time change\n  const handleExposureTimeChange = e => {\n    if (!(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureTime)) return;\n    const value = parseFloat(e.target.value);\n    const {\n      step = 1\n    } = cameraCapabilities.exposureTime;\n\n    // Ensure the value is divisible by the step size\n    const roundedValue = Math.round(value / step) * step;\n    // Round to 2 decimal places to avoid floating point issues\n    const finalValue = parseFloat(roundedValue.toFixed(2));\n    setCameraExposureTime(finalValue);\n\n    // Set exposure mode to manual when user adjusts exposure time\n    setExposureMode('manual');\n    console.log('Changed exposure mode to manual because user adjusted exposure time');\n  };\n\n  // Handle brightness change\n  const handleBrightnessChange = e => {\n    if (!(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.brightness)) return;\n    const value = parseFloat(e.target.value);\n    const {\n      step = 1\n    } = cameraCapabilities.brightness;\n\n    // Ensure the value is divisible by the step size\n    const roundedValue = Math.round(value / step) * step;\n    // Round to 2 decimal places to avoid floating point issues\n    const finalValue = parseFloat(roundedValue.toFixed(2));\n    setCameraBrightness(finalValue);\n  };\n\n  // Handle gain change\n  const handleGainChange = e => {\n    if (!(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureCompensation)) return;\n    const value = parseFloat(e.target.value);\n    const {\n      step = 1\n    } = cameraCapabilities.exposureCompensation;\n\n    // Ensure the value is divisible by the step size\n    const roundedValue = Math.round(value / step) * step;\n    // Round to 2 decimal places to avoid floating point issues\n    const finalValue = parseFloat(roundedValue.toFixed(2));\n    setCameraGain(finalValue);\n  };\n\n  // Helper function to apply non-resolution settings to a video track\n  const applyNonResolutionSettings = async videoTrack => {\n    if (!videoTrack) return;\n    try {\n      // Object to collect constraints\n      const advancedConstraints = {};\n\n      // Apply exposure time if available - ensure step size is respected\n      if (cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureTime && cameraExposureTime !== null) {\n        var _cameraCapabilities$e;\n        const {\n          step = 1,\n          min,\n          max\n        } = cameraCapabilities.exposureTime;\n\n        // Convert from milliseconds (UI) to microseconds (API)\n        const microseconds = cameraExposureTime * 1000;\n\n        // Ensure the value is within valid range and respects step size\n        const adjustedValue = Math.max(min, Math.min(max, Math.round(microseconds / step) * step));\n        advancedConstraints.exposureTime = adjustedValue;\n        console.log(`Attempting to set exposureTime: ${adjustedValue}μs (from ${cameraExposureTime}ms)`);\n\n        // Set exposure mode to manual when applying exposure time\n        if (exposureMode === 'manual' && (_cameraCapabilities$e = cameraCapabilities.exposureMode) !== null && _cameraCapabilities$e !== void 0 && _cameraCapabilities$e.includes('manual')) {\n          advancedConstraints.exposureMode = 'manual';\n          console.log('Setting exposure mode to manual');\n        }\n      }\n\n      // Apply brightness if available - ensure step size is respected\n      if (cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.brightness && cameraBrightness !== null) {\n        const {\n          step = 1,\n          min,\n          max\n        } = cameraCapabilities.brightness;\n        // Ensure value is divisible by step size and within range\n        const adjustedValue = Math.max(min, Math.min(max, Math.round(cameraBrightness / step) * step));\n        advancedConstraints.brightness = adjustedValue;\n        console.log(`Attempting to set brightness: ${adjustedValue}`);\n      }\n\n      // Apply gain if available - ensure step size is respected\n      if (cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureCompensation && cameraGain !== null) {\n        const {\n          step = 1,\n          min,\n          max\n        } = cameraCapabilities.exposureCompensation;\n        // Ensure value is divisible by step size and within range\n        const adjustedValue = Math.max(min, Math.min(max, Math.round(cameraGain / step) * step));\n        advancedConstraints.exposureCompensation = adjustedValue;\n        console.log(`Attempting to set exposureCompensation: ${adjustedValue}`);\n      }\n\n      // Log what we're trying to apply\n      console.log('Applying camera constraints:', advancedConstraints);\n\n      // Apply all constraints at once first (this is what most browsers prefer)\n      try {\n        const allConstraints = {\n          advanced: [{\n            ...advancedConstraints\n          }]\n        };\n        await videoTrack.applyConstraints(allConstraints);\n        console.log('Successfully applied all constraints at once');\n      } catch (err) {\n        console.warn('Failed to apply all constraints at once, trying individually:', err);\n\n        // Try applying constraints one by one as fallback\n        for (const [constraint, value] of Object.entries(advancedConstraints)) {\n          try {\n            // Create a constraint object with just this property\n            const singleConstraint = {};\n            singleConstraint[constraint] = value;\n\n            // Some browsers work better with the 'advanced' structure\n            await videoTrack.applyConstraints({\n              advanced: [singleConstraint]\n            });\n            console.log(`Successfully applied ${constraint}:`, value);\n          } catch (err) {\n            // Try direct constraint as a last resort (for some older browsers)\n            try {\n              const directConstraint = {};\n              directConstraint[constraint] = value;\n              await videoTrack.applyConstraints(directConstraint);\n              console.log(`Applied ${constraint} directly:`, value);\n            } catch (directErr) {\n              console.warn(`Failed to apply ${constraint}:`, directErr);\n            }\n          }\n        }\n      }\n\n      // Get updated settings and log them\n      const newSettings = videoTrack.getSettings();\n      console.log('New camera settings:', newSettings);\n\n      // Update our state based on actual applied settings\n      if (newSettings.exposureTime !== undefined) {\n        const newExposureMs = newSettings.exposureTime / 1000;\n        console.log(`Updating exposureTime state to ${newExposureMs}ms (${newSettings.exposureTime}μs)`);\n        setCameraExposureTime(newExposureMs);\n      }\n      if (newSettings.exposureMode !== undefined) {\n        setExposureMode(newSettings.exposureMode);\n        console.log(`Updating exposureMode to ${newSettings.exposureMode}`);\n      }\n      if (newSettings.brightness !== undefined) {\n        setCameraBrightness(newSettings.brightness);\n      }\n      if (newSettings.exposureCompensation !== undefined) {\n        setCameraGain(newSettings.exposureCompensation);\n      }\n    } catch (error) {\n      console.error('Error applying non-resolution settings:', error);\n    }\n  };\n\n  // Handle camera selection change\n  const handleCameraChange = e => {\n    const newCameraId = e.target.value;\n    setSelectedCamera(newCameraId);\n\n    // If camera is already active, restart with new camera\n    if (isCameraActive) {\n      stopCamera();\n      // Small delay to ensure camera is properly stopped\n      setTimeout(() => startCamera(), 100);\n    }\n  };\n\n  // Reusable resize functionality adapted from parent component\n  const handleResizeStart = e => {\n    var _cameraContainerRef$c, _cameraContainerRef$c2;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get initial coordinates and size\n    const startX = e.clientX;\n    const startY = e.clientY;\n    const startWidth = ((_cameraContainerRef$c = cameraContainerRef.current) === null || _cameraContainerRef$c === void 0 ? void 0 : _cameraContainerRef$c.offsetWidth) || cameraSize.width;\n    const startHeight = ((_cameraContainerRef$c2 = cameraContainerRef.current) === null || _cameraContainerRef$c2 === void 0 ? void 0 : _cameraContainerRef$c2.offsetHeight) || cameraSize.height;\n\n    // Show resize feedback\n    setIsResizing(true);\n    setShowResizeInfo(true);\n\n    // Define move handler\n    function handleMouseMove(moveEvent) {\n      const deltaX = moveEvent.clientX - startX;\n      const deltaY = moveEvent.clientY - startY;\n\n      // Maintain aspect ratio (4:3)\n      const aspectRatio = 4 / 3;\n      let newWidth = Math.max(200, startWidth + deltaX);\n      let newHeight = Math.max(150, newWidth / aspectRatio);\n\n      // Update camera size\n      const newSize = {\n        width: Math.round(newWidth),\n        height: Math.round(newHeight)\n      };\n      setCameraSize(newSize);\n\n      // Notify parent if needed\n      if (onResize) {\n        onResize(newSize);\n      }\n\n      // Prevent default to avoid text selection during resize\n      moveEvent.preventDefault();\n    }\n\n    // Define up handler\n    function handleMouseUp() {\n      // Clean up\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      setIsResizing(false);\n      setTimeout(() => setShowResizeInfo(false), 800);\n    }\n\n    // Attach handlers to document to capture events outside component\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Start drawing a line on the video\n  const startLineDrawing = e => {\n    if (!isCameraActive) return;\n    const rect = cameraContainerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    console.log('Mouse down at:', x, y, 'Rectangle:', rect.width, rect.height);\n    console.log('Camera size:', cameraSize.width, cameraSize.height);\n\n    // Calculate scale factors if the displayed size differs from the canvas size\n    const scaleX = cameraSize.width / rect.width;\n    const scaleY = cameraSize.height / rect.height;\n\n    // Apply scaling\n    const scaledX = x * scaleX;\n    const scaledY = y * scaleY;\n    console.log('Scaled position:', scaledX, scaledY);\n\n    // Constrain to video bounds\n    const boundedX = Math.max(0, Math.min(scaledX, cameraSize.width));\n    const boundedY = Math.max(0, Math.min(scaledY, cameraSize.height));\n    console.log('Setting line start to:', boundedX, boundedY);\n    setLineStart({\n      x: boundedX,\n      y: boundedY\n    });\n    setLineEnd({\n      x: boundedX,\n      y: boundedY\n    }); // Initially same point\n    setIsDrawingLine(true);\n  };\n\n  // Update line end position while dragging\n  const updateLineDrawing = e => {\n    if (!isDrawingLine) return;\n    const rect = cameraContainerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    // We ignore the y position from the mouse\n\n    // Calculate scale factors if the displayed size differs from the canvas size\n    const scaleX = cameraSize.width / rect.width;\n    const scaleY = cameraSize.height / rect.height;\n\n    // Apply scaling\n    const scaledX = x * scaleX;\n    // Use the y-coordinate from the start point\n    const scaledY = lineStart.y;\n\n    // Constrain to video bounds\n    const boundedX = Math.max(0, Math.min(scaledX, cameraSize.width));\n    setLineEnd({\n      x: boundedX,\n      y: scaledY\n    });\n\n    // Draw the line in real-time while dragging\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      ctx.beginPath();\n      ctx.moveTo(lineStart.x, lineStart.y);\n      ctx.lineTo(boundedX, scaledY);\n      ctx.strokeStyle = 'rgba(255, 0, 0, 0.9)'; // Bright red during drawing\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n  };\n\n  // Complete line drawing\n  const finishLineDrawing = () => {\n    if (!isDrawingLine) return;\n    console.log('Finishing line drawing. Line:', lineStart, lineEnd);\n\n    // First store original line positions for transformations\n    // Do this before changing isDrawingLine to avoid race conditions\n    const originalStart = {\n      ...lineStart\n    };\n    const originalEnd = {\n      ...lineEnd\n    };\n    setOriginalLineStart(originalStart);\n    setOriginalLineEnd(originalEnd);\n\n    // Draw the line immediately\n    if (canvasRef.current) {\n      console.log('Drawing final line immediately');\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      // Draw a plain line immediately to ensure it's visible\n      ctx.beginPath();\n      ctx.moveTo(lineStart.x, lineStart.y);\n      ctx.lineTo(lineEnd.x, lineEnd.y);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw some debug text to see if canvas is responsive\n      ctx.font = 'bold 20px Arial';\n      ctx.fillStyle = 'white';\n      ctx.fillText('Line drawn!', 50, 50);\n    }\n\n    // Then update state\n    setIsDrawingLine(false);\n    setIsLineDrawn(true);\n    setIsExtracting(true); // Start extraction when line is drawn\n\n    // Reset transformation values\n    setLineYOffset(0);\n    setLineXOffset(0);\n\n    // Notify parent about line data\n    if (onLineDataChange) {\n      onLineDataChange({\n        start: originalStart,\n        end: originalEnd,\n        yOffset: 0,\n        // Reset on new line\n        xOffset: 0\n      });\n    }\n  };\n\n  // Clear the drawn line\n  const clearLine = () => {\n    console.log('Clearing line');\n    setIsLineDrawn(false);\n    setIsExtracting(false); // Stop extraction when line is cleared\n\n    // Reset all line adjustments\n    setLineYOffset(0);\n    setLineXOffset(0);\n\n    // Clear the canvas\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Notify parent about line clearing\n    if (onLineDataChange) {\n      onLineDataChange(null);\n    }\n  };\n\n  // Draw the line on the canvas with current transformations\n  const drawLine = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isLineDrawn) {\n      console.log('Cannot draw line - canvas not ready or line not drawn');\n      return;\n    }\n\n    // Log the current state\n    console.log('DrawLine called, isLineDrawn:', isLineDrawn, 'isDrawingLine:', isDrawingLine);\n    console.log('Canvas size:', canvas.width, canvas.height);\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate transformed line positions\n    const transformedLine = calculateTransformedLinePosition();\n    console.log('Drawing line from', transformedLine.start, 'to', transformedLine.end);\n\n    // Set line style for maximum visibility\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'round';\n\n    // Draw the line with a glow effect for better visibility\n    // First draw a wider, blurred line for the glow\n    ctx.shadowColor = 'rgba(255, 0, 0, 0.8)';\n    ctx.shadowBlur = 10;\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.6)';\n    ctx.beginPath();\n    ctx.moveTo(transformedLine.start.x, transformedLine.start.y);\n    ctx.lineTo(transformedLine.end.x, transformedLine.end.y);\n    ctx.stroke();\n\n    // Then draw the main line on top\n    ctx.shadowBlur = 0;\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.9)';\n    ctx.beginPath();\n    ctx.moveTo(transformedLine.start.x, transformedLine.start.y);\n    ctx.lineTo(transformedLine.end.x, transformedLine.end.y);\n    ctx.stroke();\n\n    // Make endpoints more visible with larger circles\n    // First draw a halo/glow effect\n    ctx.shadowColor = 'rgba(255, 255, 0, 0.8)';\n    ctx.shadowBlur = 15;\n    ctx.fillStyle = 'rgba(255, 255, 0, 0.7)';\n    ctx.beginPath();\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 10, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 10, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Then draw the actual points\n    ctx.shadowBlur = 0;\n    ctx.fillStyle = 'rgba(255, 255, 0, 0.9)';\n    ctx.beginPath();\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 8, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 8, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Add outline to circles for better visibility\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 8, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 8, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Add labels for start/end points\n    ctx.fillStyle = 'white';\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 3;\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Draw \"S\" for start with stroke for visibility\n    ctx.strokeText('S', transformedLine.start.x, transformedLine.start.y);\n    ctx.fillText('S', transformedLine.start.x, transformedLine.start.y);\n\n    // Draw \"E\" for end with stroke for visibility\n    ctx.strokeText('E', transformedLine.end.x, transformedLine.end.y);\n    ctx.fillText('E', transformedLine.end.x, transformedLine.end.y);\n\n    // Calculate and draw perpendicular indicator (small line in the middle perpendicular to main line)\n    const midX = (transformedLine.start.x + transformedLine.end.x) / 2;\n    const midY = (transformedLine.start.y + transformedLine.end.y) / 2;\n\n    // Calculate the perpendicular direction\n    const dx = transformedLine.end.x - transformedLine.start.x;\n    const dy = transformedLine.end.y - transformedLine.start.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    if (length > 0) {\n      // Normalize and rotate 90 degrees\n      const perpX = -dy / length * 20; // Increased length to 20px\n      const perpY = dx / length * 20;\n\n      // Draw perpendicular line with increased visibility\n      ctx.beginPath();\n      ctx.moveTo(midX - perpX, midY - perpY);\n      ctx.lineTo(midX + perpX, midY + perpY);\n      ctx.strokeStyle = 'rgba(0, 255, 255, 0.9)'; // Brighter cyan with higher opacity\n      ctx.lineWidth = 3; // Increase width\n      ctx.stroke();\n    }\n  };\n\n  // Calculate transformed line position based on sliders\n  const calculateTransformedLinePosition = () => {\n    if (!isLineDrawn) {\n      console.log('Not calculating transformed position - line not drawn');\n      return {\n        start: lineStart,\n        end: lineEnd\n      };\n    }\n    console.log('Calculating transformed line position');\n    console.log('Original start:', originalLineStart, 'Original end:', originalLineEnd);\n    console.log('Offsets:', lineXOffset, lineYOffset);\n\n    // Calculate the line center\n    const centerX = (originalLineStart.x + originalLineEnd.x) / 2;\n    const centerY = (originalLineStart.y + originalLineEnd.y) / 2;\n\n    // No longer need rotation calculations\n    // Apply offsets directly to the original coordinates\n    const transformedStart = {\n      x: originalLineStart.x + lineXOffset,\n      y: originalLineStart.y + lineYOffset\n    };\n    const transformedEnd = {\n      x: originalLineEnd.x + lineXOffset,\n      y: originalLineEnd.y + lineYOffset\n    };\n    const result = {\n      start: transformedStart,\n      end: transformedEnd\n    };\n    console.log('Transformed result:', result);\n    return result;\n  };\n\n  // Handle line Y-offset adjustment\n  const handleLineYOffsetChange = e => {\n    const newOffset = parseInt(e.target.value);\n    setLineYOffset(newOffset);\n    drawLine();\n\n    // Notify parent about line data change\n    if (onLineDataChange && isLineDrawn) {\n      onLineDataChange({\n        start: lineStart,\n        end: lineEnd,\n        yOffset: newOffset,\n        xOffset: lineXOffset\n      });\n    }\n  };\n\n  // Handle line X-offset adjustment\n  const handleLineXOffsetChange = e => {\n    const newOffset = parseInt(e.target.value);\n    setLineXOffset(newOffset);\n    drawLine();\n\n    // Notify parent about line data change\n    if (onLineDataChange && isLineDrawn) {\n      onLineDataChange({\n        start: lineStart,\n        end: lineEnd,\n        yOffset: lineYOffset,\n        xOffset: newOffset\n      });\n    }\n  };\n\n  // Add effect to redraw line when parameters change\n  useEffect(() => {\n    if (isLineDrawn) {\n      drawLine();\n    }\n  }, [isLineDrawn, lineYOffset, lineXOffset]);\n\n  // Helper to update parent component with line data\n  const updateParentLineData = () => {\n    if (onLineDataChange && isLineDrawn) {\n      onLineDataChange({\n        start: lineStart,\n        end: lineEnd,\n        yOffset: lineYOffset,\n        xOffset: lineXOffset\n      });\n    }\n  };\n\n  // Function to get pixels under the drawn line\n  const getPixelsUnderLine = (start, end) => {\n    if (!videoRef.current || !canvasRef.current) return null;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n\n    // Create a temporary hidden canvas to avoid disturbing the main display\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = canvas.width;\n    tempCanvas.height = canvas.height;\n    const tempCtx = tempCanvas.getContext('2d', {\n      willReadFrequently: true\n    });\n\n    // Draw the current video frame to the temp canvas (but don't display it)\n    tempCtx.drawImage(videoRef.current, 0, 0, tempCanvas.width, tempCanvas.height);\n\n    // Calculate line points to sample\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const samples = Math.max(Math.ceil(distance), 1); // At least 1 sample\n\n    // Initialize arrays for color data\n    const redValues = [];\n    const greenValues = [];\n    const blueValues = [];\n    const intensityValues = [];\n    const positions = [];\n    try {\n      // Sample points along the line\n      for (let i = 0; i <= samples; i++) {\n        const t = i / samples;\n        const x = Math.round(start.x + dx * t);\n        const y = Math.round(start.y + dy * t);\n\n        // Constrain to canvas boundaries\n        const boundedX = Math.max(0, Math.min(x, tempCanvas.width - 1));\n        const boundedY = Math.max(0, Math.min(y, tempCanvas.height - 1));\n\n        // Get pixel data at this position from the temp canvas\n        const pixelData = tempCtx.getImageData(boundedX, boundedY, 1, 1).data;\n        const [r, g, b] = pixelData;\n\n        // Calculate intensity as simple float average (not weighted)\n        const intensity = parseFloat((r + g + b) / 3);\n\n        // Store values\n        redValues.push(r);\n        greenValues.push(g);\n        blueValues.push(b);\n        intensityValues.push(intensity);\n        positions.push(i / samples); // Normalized position along line (0-1)\n      }\n\n      // Clean up temporary canvas\n      tempCanvas.remove();\n\n      // Return structured data\n      return {\n        timestamp: Date.now(),\n        positions,\n        red: redValues,\n        green: greenValues,\n        blue: blueValues,\n        intensity: intensityValues,\n        lineLength: distance\n      };\n    } catch (error) {\n      console.error('Error extracting pixel data:', error);\n      tempCanvas.remove();\n      return null;\n    }\n  };\n\n  // Create a slider for a capability\n  const renderCapabilitySlider = (capability, value, onChange, label, unit = '') => {\n    var _cameraCapabilities$e2;\n    if (!cameraCapabilities || !cameraCapabilities[capability] || value === null) {\n      return null;\n    }\n    const capabilityInfo = cameraCapabilities[capability];\n    // Ensure we get the step from capabilities or default to 1\n    const {\n      min,\n      max,\n      step = 1\n    } = capabilityInfo;\n\n    // For exposure time, show the current mode\n    const showModeIndicator = capability === 'exposureTime';\n\n    // Use step attribute directly from capabilities\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.controlRow,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.controlLabel,\n        children: [label, \":\", showModeIndicator && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '9px',\n            display: 'block',\n            color: exposureMode === 'manual' ? '#ff9800' : '#4CAF50'\n          },\n          children: exposureMode === 'manual' ? 'MANUAL' : 'AUTO'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: min,\n        max: max,\n        step: step,\n        value: value,\n        onChange: onChange,\n        style: {\n          ...styles.slider,\n          accentColor: exposureMode === 'manual' && capability === 'exposureTime' ? '#ff9800' : undefined\n        },\n        disabled: !isCameraActive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.value,\n        children: [typeof value === 'number' ? step >= 1 ? value.toFixed(0) : value.toFixed(2) : value, unit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 9\n      }, this), showModeIndicator && ((_cameraCapabilities$e2 = cameraCapabilities.exposureMode) === null || _cameraCapabilities$e2 === void 0 ? void 0 : _cameraCapabilities$e2.includes('continuous')) && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallIconButton,\n          padding: '2px 4px',\n          fontSize: '10px',\n          backgroundColor: exposureMode === 'manual' ? 'rgba(255, 152, 0, 0.5)' : 'rgba(76, 175, 80, 0.5)'\n        },\n        onClick: () => {\n          const newMode = exposureMode === 'manual' ? 'continuous' : 'manual';\n          setExposureMode(newMode);\n          console.log(`Toggled exposure mode to: ${newMode}`);\n        },\n        title: `Click to switch to ${exposureMode === 'manual' ? 'auto' : 'manual'} exposure`,\n        children: exposureMode === 'manual' ? 'AUTO' : 'MANUAL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1193,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Format capability value for display\n  const formatCapabilityValue = value => {\n    if (value === undefined || value === null) return 'N/A';\n    if (typeof value === 'object') {\n      if (value.min !== undefined && value.max !== undefined) {\n        return `${value.min} to ${value.max}${value.step ? ` (step: ${value.step})` : ''}`;\n      }\n      return JSON.stringify(value);\n    }\n    if (Array.isArray(value)) {\n      return value.join(', ');\n    }\n    return value.toString();\n  };\n\n  // Render a table of camera capabilities\n  const renderCapabilitiesTable = () => {\n    if (!cameraCapabilities) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No capabilities information available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Filter out common capabilities that are already exposed in the UI\n    const commonCapabilities = ['width', 'height', 'deviceId', 'groupId'];\n    const advancedCapabilities = Object.keys(cameraCapabilities).filter(key => !commonCapabilities.includes(key)).sort();\n    if (advancedCapabilities.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No advanced capabilities exposed by this camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1277,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.capabilitiesTable,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: styles.capabilitiesTitle,\n        children: \"Camera Capabilities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollContainer,\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          style: styles.table,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                style: styles.th,\n                children: \"Parameter\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: styles.th,\n                children: \"Supported Values\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1288,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1286,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: advancedCapabilities.map(key => /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: styles.tr,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: styles.td,\n                children: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1294,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: styles.td,\n                children: formatCapabilityValue(cameraCapabilities[key])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1295,\n                columnNumber: 19\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1293,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Add a dedicated useEffect for periodic forced redraw to ensure line visibility\n  useEffect(() => {\n    if (!isLineDrawn || !isCameraActive) return;\n    console.log('Setting up periodic redraw interval');\n\n    // Force redraw every 500ms as a backup to ensure line remains visible\n    const intervalId = setInterval(() => {\n      if (isLineDrawn && canvasRef.current) {\n        console.log('Forced periodic redraw');\n        drawLine();\n      }\n    }, 500);\n    return () => {\n      console.log('Clearing periodic redraw interval');\n      clearInterval(intervalId);\n    };\n  }, [isLineDrawn, isCameraActive]);\n  const styles = {\n    container: {\n      flex: '0 0 auto',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '5px',\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      padding: '10px',\n      borderRadius: '4px',\n      position: 'relative',\n      border: isResizing ? '1px dashed #4CAF50' : 'none'\n    },\n    title: {\n      margin: '0 0 10px 0',\n      fontSize: '14px'\n    },\n    cameraSelect: {\n      marginBottom: '10px',\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px'\n    },\n    selectLabel: {\n      fontSize: '12px',\n      minWidth: '60px'\n    },\n    select: {\n      flex: 1,\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\n      color: 'white',\n      border: '1px solid rgba(80, 80, 80, 0.5)',\n      borderRadius: '3px',\n      padding: '4px 8px',\n      fontSize: '12px'\n    },\n    cameraView: {\n      width: `${cameraSize.width}px`,\n      height: `${cameraSize.height}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    video: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n      position: 'absolute',\n      top: 0,\n      left: 0\n    },\n    canvas: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      // Allow clicks to pass through to video\n      zIndex: 10\n    },\n    buttonRow: {\n      marginTop: '5px',\n      display: 'flex',\n      gap: '5px',\n      flexWrap: 'wrap'\n    },\n    lineControls: {\n      marginTop: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px',\n      display: isLineDrawn ? 'block' : 'none'\n    },\n    controlRow: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '8px',\n      gap: '8px'\n    },\n    controlLabel: {\n      fontSize: '12px',\n      minWidth: '60px'\n    },\n    slider: {\n      flex: 1\n    },\n    value: {\n      fontSize: '12px',\n      minWidth: '30px',\n      textAlign: 'right'\n    },\n    settingsButton: {\n      marginLeft: 'auto'\n    },\n    cameraSettings: {\n      marginTop: '10px',\n      padding: '8px',\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      borderRadius: '4px',\n      display: showCameraSettings ? 'block' : 'none'\n    },\n    resizeHandle: {\n      position: 'absolute',\n      bottom: '0',\n      right: '0',\n      width: '20px',\n      height: '20px',\n      cursor: 'nwse-resize',\n      zIndex: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\n      borderTopLeftRadius: '4px'\n    },\n    resizeInfo: {\n      position: 'absolute',\n      right: '25px',\n      bottom: '25px',\n      padding: '2px 6px',\n      background: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '3px',\n      fontSize: '11px',\n      zIndex: 100\n    },\n    capabilitiesTable: {\n      marginTop: '10px',\n      borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n      paddingTop: '10px'\n    },\n    capabilitiesTitle: {\n      fontSize: '13px',\n      margin: '0 0 8px 0'\n    },\n    scrollContainer: {\n      maxHeight: '200px',\n      overflowY: 'auto',\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\n      borderRadius: '3px'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'collapse',\n      fontSize: '11px'\n    },\n    th: {\n      padding: '4px 8px',\n      textAlign: 'left',\n      borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n      position: 'sticky',\n      top: 0,\n      backgroundColor: 'rgba(20, 20, 20, 0.8)'\n    },\n    tr: {\n      borderBottom: '1px solid rgba(255, 255, 255, 0.05)'\n    },\n    td: {\n      padding: '4px 8px',\n      maxWidth: '200px',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n    advancedToggle: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: '12px',\n      padding: '6px 0',\n      borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n      cursor: 'pointer',\n      userSelect: 'none'\n    },\n    toggleIcon: {\n      marginRight: '6px',\n      transform: showAdvancedCapabilities ? 'rotate(90deg)' : 'rotate(0deg)',\n      transition: 'transform 0.2s ease'\n    }\n  };\n\n  // Fix the function that handles the Extract button state change\n  const handleExtractToggle = () => {\n    setIsExtracting(!isExtracting);\n\n    // Force redraw the line immediately after toggling extraction\n    // to ensure it remains visible\n    if (isLineDrawn) {\n      setTimeout(() => {\n        console.log('Redrawing line after extraction toggle');\n        drawLine();\n      }, 0);\n    }\n  };\n\n  // Camera controls section\n  const renderCameraControls = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.buttonRow,\n      children: [!isCameraActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonVariants.smallPrimary,\n        onClick: startCamera,\n        disabled: !selectedCamera,\n        children: \"Start Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonVariants.smallSecondary,\n        onClick: stopCamera,\n        children: \"Stop Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1534,\n        columnNumber: 11\n      }, this), isCameraActive && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [isLineDrawn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonVariants.smallSecondary,\n            onClick: clearLine,\n            children: \"Clear Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1546,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              ...buttonVariants.smallSecondary,\n              backgroundColor: isExtracting ? 'rgba(255, 0, 0, 0.5)' : undefined\n            },\n            onClick: handleExtractToggle // Use new handler function\n            ,\n            title: isExtracting ? \"Stop extracting data\" : \"Start extracting data\",\n            children: isExtracting ? \"Stop Extract\" : \"Start Extract\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1552,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonVariants.smallSecondary,\n          disabled: isDrawingLine,\n          title: \"Click and drag on video to draw a line\",\n          children: \"Draw Line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1564,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...buttonVariants.smallSecondary,\n            ...styles.settingsButton,\n            backgroundColor: showCameraSettings ? 'rgba(0, 150, 150, 0.7)' : undefined\n          },\n          onClick: () => setShowCameraSettings(!showCameraSettings),\n          children: \"\\u2699\\uFE0F Camera Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1573,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1524,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: styles.title,\n      children: \"Camera Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1591,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.cameraSelect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.selectLabel,\n        children: \"Camera:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1595,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCamera,\n        onChange: handleCameraChange,\n        style: styles.select,\n        disabled: isCameraActive,\n        children: [availableCameras.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"No cameras found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1603,\n          columnNumber: 13\n        }, this), availableCameras.map(camera => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: camera.deviceId,\n          children: camera.label || `Camera ${camera.deviceId.slice(0, 5)}...`\n        }, camera.deviceId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1606,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1596,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1594,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cameraContainerRef,\n      style: styles.cameraView,\n      onMouseDown: isCameraActive ? startLineDrawing : undefined,\n      onMouseMove: isCameraActive ? updateLineDrawing : undefined,\n      onMouseUp: isCameraActive ? finishLineDrawing : undefined,\n      onMouseLeave: isCameraActive ? finishLineDrawing : undefined,\n      children: [!isCameraActive && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Camera feed will appear here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1623,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        style: {\n          ...styles.video,\n          display: isCameraActive ? 'block' : 'none'\n        },\n        playsInline: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          zIndex: 30,\n          // Increase z-index further\n          pointerEvents: 'none' // Allow clicks to pass through\n        },\n        width: cameraSize.width,\n        height: cameraSize.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1636,\n        columnNumber: 9\n      }, this), isCameraActive && !isLineDrawn && !isDrawingLine && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '8px 12px',\n          borderRadius: '4px',\n          fontSize: '14px',\n          zIndex: 25,\n          pointerEvents: 'none'\n        },\n        children: \"Click and drag to draw a line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1653,\n        columnNumber: 11\n      }, this), isDrawingLine && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '10px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          backgroundColor: 'rgba(255, 255, 0, 0.8)',\n          color: 'black',\n          padding: '4px 8px',\n          borderRadius: '4px',\n          fontSize: '12px',\n          fontWeight: 'bold',\n          zIndex: 25,\n          pointerEvents: 'none'\n        },\n        children: \"Drawing line...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1672,\n        columnNumber: 11\n      }, this), showResizeInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeInfo,\n        children: [cameraSize.width, \" \\xD7 \", cameraSize.height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1692,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.resizeHandle,\n        onMouseDown: handleResizeStart,\n        title: \"Resize camera view\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"12\",\n          height: \"12\",\n          viewBox: \"0 0 12 12\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M9,3 L3,9 M11,5 L5,11 M11,8 L8,11\",\n            stroke: \"white\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1704,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1703,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1698,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1614,\n      columnNumber: 7\n    }, this), renderCameraControls(), isLineDrawn && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.lineControls,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.controlLabel,\n          children: \"Y Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1721,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"-50\",\n          max: \"50\",\n          value: lineYOffset,\n          onChange: handleLineYOffsetChange,\n          style: styles.slider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1722,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.value,\n          children: [lineYOffset, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1730,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1720,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.controlLabel,\n          children: \"X Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1734,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"-50\",\n          max: \"50\",\n          value: lineXOffset,\n          onChange: handleLineXOffsetChange,\n          style: styles.slider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1735,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.value,\n          children: [lineXOffset, \"px\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1743,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1733,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1719,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.cameraSettings,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.controlRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.controlLabel,\n          children: \"Resolution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1751,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: cameraResolution,\n          onChange: e => setCameraResolution(e.target.value),\n          style: styles.select,\n          disabled: isCameraActive,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"320x240\",\n            children: \"320x240\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1758,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"640x480\",\n            children: \"640x480\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1759,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1280x720\",\n            children: \"1280x720 (HD)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1760,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1920x1080\",\n            children: \"1920x1080 (Full HD)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1761,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1752,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1750,\n        columnNumber: 9\n      }, this), renderCapabilitySlider('exposureTime', cameraExposureTime, handleExposureTimeChange, 'Exposure', 'ms'), renderCapabilitySlider('brightness', cameraBrightness, handleBrightnessChange, 'Brightness'), renderCapabilitySlider('exposureCompensation', cameraGain, handleGainChange, 'Gain'), isCameraActive && !(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureTime) && !(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.brightness) && !(cameraCapabilities !== null && cameraCapabilities !== void 0 && cameraCapabilities.exposureCompensation) && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '10px',\n          opacity: 0.7\n        },\n        children: \"No adjustable camera parameters available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1793,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...buttonVariants.smallPrimary,\n          width: '100%',\n          marginTop: '8px'\n        },\n        onClick: applyCameraSettings,\n        disabled: !isCameraActive,\n        children: \"Apply Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1798,\n        columnNumber: 9\n      }, this), isCameraActive && cameraCapabilities && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.advancedToggle,\n        onClick: () => setShowAdvancedCapabilities(!showAdvancedCapabilities),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.toggleIcon,\n          children: \"\\u25B6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1811,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: showAdvancedCapabilities ? \"Hide Camera Capabilities\" : \"Show Camera Capabilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1812,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1807,\n        columnNumber: 11\n      }, this), isCameraActive && showAdvancedCapabilities && renderCapabilitiesTable()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1749,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1590,\n    columnNumber: 5\n  }, this);\n}, \"pBXDS/00dJKm9QYm4YuSKhj0zWg=\", false, function () {\n  return [useButtonStyles];\n})), \"pBXDS/00dJKm9QYm4YuSKhj0zWg=\", false, function () {\n  return [useButtonStyles];\n});\n\n// Add display name for debugging\n_c2 = CameraComponent;\nCameraComponent.displayName = 'CameraComponent';\nexport default CameraComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"CameraComponent$React.forwardRef\");\n$RefreshReg$(_c2, \"CameraComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","useButtonStyles","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraComponent","_s","forwardRef","_c","props","ref","onResize","onLineDataChange","buttonVariants","cameraSize","setCameraSize","width","height","isResizing","setIsResizing","showResizeInfo","setShowResizeInfo","availableCameras","setAvailableCameras","selectedCamera","setSelectedCamera","isCameraActive","setIsCameraActive","showCameraSettings","setShowCameraSettings","showAdvancedCapabilities","setShowAdvancedCapabilities","cameraCapabilities","setCameraCapabilities","exposureMode","setExposureMode","isDrawingLine","setIsDrawingLine","lineStart","setLineStart","x","y","lineEnd","setLineEnd","isLineDrawn","setIsLineDrawn","isExtracting","setIsExtracting","extractedData","setExtractedData","lineYOffset","setLineYOffset","lineXOffset","setLineXOffset","originalLineStart","setOriginalLineStart","originalLineEnd","setOriginalLineEnd","cameraResolution","setCameraResolution","cameraExposureTime","setCameraExposureTime","cameraBrightness","setCameraBrightness","cameraGain","setCameraGain","cameraContainerRef","videoRef","canvasRef","streamRef","animationRequestRef","getSettings","cameraId","resolution","exposureTime","brightness","gain","startCamera","Promise","resolve","applySettings","settings","cameraExists","some","camera","deviceId","setTimeout","undefined","applyCameraSettings","calculateTransformedLinePosition","error","console","getAvailableCameras","stopCamera","current","log","drawLine","animationId","redrawLine","requestAnimationFrame","cancelAnimationFrame","extractLineData","transformedLine","lineData","getPixelsUnderLine","start","end","yOffset","xOffset","pixelData","drawLineFrame","video","handleVideoFrame","addEventListener","removeEventListener","navigator","mediaDevices","getUserMedia","tempStream","getTracks","forEach","track","stop","devices","enumerateDevices","videoDevices","filter","device","kind","length","split","map","Number","constraints","exact","ideal","stream","srcObject","play","videoTrack","getVideoTracks","capabilities","getCapabilities","currentExposure","Math","round","max","min","defaultValue","exposureCompensation","tracks","advanced","newConstraints","newStream","newVideoTrack","applyNonResolutionSettings","handleExposureTimeChange","e","value","parseFloat","target","step","roundedValue","finalValue","toFixed","handleBrightnessChange","handleGainChange","advancedConstraints","_cameraCapabilities$e","microseconds","adjustedValue","includes","allConstraints","applyConstraints","err","warn","constraint","Object","entries","singleConstraint","directConstraint","directErr","newSettings","newExposureMs","handleCameraChange","newCameraId","handleResizeStart","_cameraContainerRef$c","_cameraContainerRef$c2","preventDefault","stopPropagation","startX","clientX","startY","clientY","startWidth","offsetWidth","startHeight","offsetHeight","handleMouseMove","moveEvent","deltaX","deltaY","aspectRatio","newWidth","newHeight","newSize","handleMouseUp","document","startLineDrawing","rect","getBoundingClientRect","left","top","scaleX","scaleY","scaledX","scaledY","boundedX","boundedY","updateLineDrawing","ctx","getContext","clearRect","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","finishLineDrawing","originalStart","originalEnd","font","fillStyle","fillText","clearLine","canvas","lineCap","shadowColor","shadowBlur","arc","PI","fill","textAlign","textBaseline","strokeText","midX","midY","dx","dy","sqrt","perpX","perpY","centerX","centerY","transformedStart","transformedEnd","result","handleLineYOffsetChange","newOffset","parseInt","handleLineXOffsetChange","updateParentLineData","willReadFrequently","tempCanvas","createElement","tempCtx","drawImage","distance","samples","ceil","redValues","greenValues","blueValues","intensityValues","positions","i","t","getImageData","data","r","g","b","intensity","push","remove","timestamp","Date","now","red","green","blue","lineLength","renderCapabilitySlider","capability","onChange","label","unit","_cameraCapabilities$e2","capabilityInfo","showModeIndicator","style","styles","controlRow","children","controlLabel","fontSize","display","color","fileName","_jsxFileName","lineNumber","columnNumber","type","slider","accentColor","disabled","smallIconButton","padding","backgroundColor","onClick","newMode","title","formatCapabilityValue","JSON","stringify","Array","isArray","join","toString","renderCapabilitiesTable","commonCapabilities","advancedCapabilities","keys","key","sort","capabilitiesTable","capabilitiesTitle","scrollContainer","table","th","tr","td","intervalId","setInterval","clearInterval","container","flex","flexDirection","gap","borderRadius","position","border","margin","cameraSelect","marginBottom","alignItems","selectLabel","minWidth","select","cameraView","justifyContent","overflow","objectFit","pointerEvents","zIndex","buttonRow","marginTop","flexWrap","lineControls","settingsButton","marginLeft","cameraSettings","resizeHandle","bottom","right","cursor","borderTop","borderLeft","borderTopLeftRadius","resizeInfo","background","paddingTop","maxHeight","overflowY","borderCollapse","borderBottom","maxWidth","textOverflow","whiteSpace","advancedToggle","userSelect","toggleIcon","marginRight","transform","transition","handleExtractToggle","renderCameraControls","smallPrimary","smallSecondary","slice","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","playsInline","muted","fontWeight","viewBox","d","strokeWidth","strokeLinecap","opacity","_c2","displayName","$RefreshReg$"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/components/Simulation/DetectorComponents/CameraComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from 'react';\r\nimport { useButtonStyles } from '../../../styles/ButtonStyleProvider';\r\n\r\nconst CameraComponent = React.forwardRef((props, ref) => {\r\n  const { onResize, onLineDataChange } = props;\r\n  const buttonVariants = useButtonStyles();\r\n  \r\n  // Camera view state\r\n  const [cameraSize, setCameraSize] = useState({ width: 640, height: 480 });\r\n  const [isResizing, setIsResizing] = useState(false);\r\n  const [showResizeInfo, setShowResizeInfo] = useState(false);\r\n  \r\n  // Camera operation state\r\n  const [availableCameras, setAvailableCameras] = useState([]);\r\n  const [selectedCamera, setSelectedCamera] = useState('');\r\n  const [isCameraActive, setIsCameraActive] = useState(false);\r\n  const [showCameraSettings, setShowCameraSettings] = useState(false);\r\n  const [showAdvancedCapabilities, setShowAdvancedCapabilities] = useState(false);\r\n  const [cameraCapabilities, setCameraCapabilities] = useState(null);\r\n  const [exposureMode, setExposureMode] = useState('continuous');\r\n  \r\n  // Line drawing state\r\n  const [isDrawingLine, setIsDrawingLine] = useState(false);\r\n  const [lineStart, setLineStart] = useState({ x: 0, y: 0 });\r\n  const [lineEnd, setLineEnd] = useState({ x: 0, y: 0 });\r\n  const [isLineDrawn, setIsLineDrawn] = useState(false);\r\n  const [isExtracting, setIsExtracting] = useState(false);\r\n  const [extractedData, setExtractedData] = useState(null);\r\n  \r\n  // Line adjustment state\r\n  const [lineYOffset, setLineYOffset] = useState(0);\r\n  const [lineXOffset, setLineXOffset] = useState(0);\r\n  const [originalLineStart, setOriginalLineStart] = useState({ x: 0, y: 0 });\r\n  const [originalLineEnd, setOriginalLineEnd] = useState({ x: 0, y: 0 });\r\n  \r\n  // Camera settings\r\n  const [cameraResolution, setCameraResolution] = useState('640x480');\r\n  const [cameraExposureTime, setCameraExposureTime] = useState(null); // Exposure time in milliseconds\r\n  const [cameraBrightness, setCameraBrightness] = useState(null); // Brightness value\r\n  const [cameraGain, setCameraGain] = useState(null);\r\n  \r\n  // Refs\r\n  const cameraContainerRef = useRef(null);\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n  const animationRequestRef = useRef(null);\r\n  \r\n  // Expose methods to parent component via ref\r\n  useImperativeHandle(ref, () => ({\r\n    // Get current camera settings\r\n    getSettings: () => {\r\n      return {\r\n        cameraId: selectedCamera,\r\n        resolution: cameraResolution,\r\n        exposureTime: cameraExposureTime,\r\n        brightness: cameraBrightness,\r\n        gain: cameraGain,\r\n        exposureMode: exposureMode,\r\n        // Line drawing settings\r\n        isLineDrawn: isLineDrawn,\r\n        lineStart: originalLineStart,\r\n        lineEnd: originalLineEnd,\r\n        lineYOffset: lineYOffset,\r\n        lineXOffset: lineXOffset\r\n      };\r\n    },\r\n    \r\n    // Expose startCamera method to parent\r\n    startCamera: async () => {\r\n      if (!isCameraActive && selectedCamera) {\r\n        return startCamera();\r\n      }\r\n      return Promise.resolve(false);\r\n    },\r\n    \r\n    // Apply saved camera settings\r\n    applySettings: async (settings) => {\r\n      if (!settings) return false;\r\n      \r\n      try {\r\n        // Apply camera ID and start camera if needed\r\n        if (settings.cameraId) {\r\n          const cameraExists = availableCameras.some(camera => camera.deviceId === settings.cameraId);\r\n          if (cameraExists) {\r\n            setSelectedCamera(settings.cameraId);\r\n            \r\n            // If camera is not active, start it\r\n            if (!isCameraActive) {\r\n              // Short delay to allow state update\r\n              setTimeout(() => startCamera(), 100);\r\n              \r\n              // Wait for camera to start before continuing\r\n              await new Promise(resolve => setTimeout(resolve, 1000));\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Apply resolution\r\n        if (settings.resolution) {\r\n          setCameraResolution(settings.resolution);\r\n        }\r\n        \r\n        // Apply exposure time\r\n        if (settings.exposureTime !== null && settings.exposureTime !== undefined) {\r\n          setCameraExposureTime(settings.exposureTime);\r\n        }\r\n        \r\n        // Apply brightness\r\n        if (settings.brightness !== null && settings.brightness !== undefined) {\r\n          setCameraBrightness(settings.brightness);\r\n        }\r\n        \r\n        // Apply gain\r\n        if (settings.gain !== null && settings.gain !== undefined) {\r\n          setCameraGain(settings.gain);\r\n        }\r\n        \r\n        // Apply exposure mode\r\n        if (settings.exposureMode) {\r\n          setExposureMode(settings.exposureMode);\r\n        }\r\n        \r\n        // Apply settings to camera\r\n        await applyCameraSettings();\r\n        \r\n        // After camera settings are applied, handle line drawing settings\r\n        if (settings.isLineDrawn && settings.lineStart && settings.lineEnd) {\r\n          // Set original line points\r\n          setOriginalLineStart(settings.lineStart);\r\n          setOriginalLineEnd(settings.lineEnd);\r\n          \r\n          // Set current line points (will be adjusted by offset/rotation later)\r\n          setLineStart(settings.lineStart);\r\n          setLineEnd(settings.lineEnd);\r\n          \r\n          // Mark line as drawn\r\n          setIsLineDrawn(true);\r\n          \r\n          // Apply line adjustments\r\n          if (settings.lineYOffset !== undefined) {\r\n            setLineYOffset(settings.lineYOffset);\r\n          }\r\n          \r\n          if (settings.lineXOffset !== undefined) {\r\n            setLineXOffset(settings.lineXOffset);\r\n          }\r\n          \r\n          // Calculate transformed line with adjustments\r\n          calculateTransformedLinePosition();\r\n          \r\n          // Start extraction if needed\r\n          setIsExtracting(true);\r\n        }\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error applying camera settings:', error);\r\n        return false;\r\n      }\r\n    }\r\n  }));\r\n  \r\n  // Get available cameras on component mount\r\n  useEffect(() => {\r\n    getAvailableCameras();\r\n    \r\n    // Cleanup function to stop video stream when component unmounts\r\n    return () => {\r\n      stopCamera();\r\n    };\r\n  }, []);\r\n  \r\n  // Initialize canvas size when video size changes\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      console.log('Setting canvas dimensions to:', cameraSize.width, cameraSize.height);\r\n      canvasRef.current.width = cameraSize.width;\r\n      canvasRef.current.height = cameraSize.height;\r\n      \r\n      // If line is drawn, redraw it when canvas size changes\r\n      if (isLineDrawn) {\r\n        console.log('Redrawing line due to canvas size change');\r\n        \r\n        // Ensure the redraw happens after the canvas size is updated\r\n        // by using a small timeout\r\n        setTimeout(() => {\r\n          drawLine();\r\n          \r\n          // Double-check with another redraw after a slight delay\r\n          setTimeout(() => drawLine(), 100);\r\n        }, 0);\r\n      }\r\n    }\r\n  }, [cameraSize.width, cameraSize.height, isLineDrawn]);\r\n  \r\n  // Add a new effect for continuous redrawing of the line\r\n  useEffect(() => {\r\n    let animationId;\r\n    \r\n    // Function to continuously redraw the line\r\n    const redrawLine = () => {\r\n      if (isLineDrawn && canvasRef.current) {\r\n        drawLine();\r\n      }\r\n      animationId = requestAnimationFrame(redrawLine);\r\n    };\r\n    \r\n    // Start animation if line is drawn\r\n    if (isLineDrawn) {\r\n      console.log('Starting continuous line redraw');\r\n      animationId = requestAnimationFrame(redrawLine);\r\n    }\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n    };\r\n  }, [isLineDrawn, isExtracting, lineYOffset, lineXOffset]);\r\n  \r\n  // Extract line data effect - runs continuously when line is drawn\r\n  useEffect(() => {\r\n    // Function to extract pixel data and process it\r\n    const extractLineData = () => {\r\n      if (isLineDrawn && videoRef.current && canvasRef.current && isCameraActive) {\r\n        const transformedLine = calculateTransformedLinePosition();\r\n        const lineData = getPixelsUnderLine(transformedLine.start, transformedLine.end);\r\n        \r\n        // Set extracted data state\r\n        setExtractedData(lineData);\r\n        \r\n        // Send data to parent component if callback exists\r\n        if (onLineDataChange) {\r\n          onLineDataChange({\r\n            start: transformedLine.start,\r\n            end: transformedLine.end,\r\n            yOffset: lineYOffset,\r\n            xOffset: lineXOffset,\r\n            pixelData: lineData\r\n          });\r\n        }\r\n        \r\n        // Make sure the line remains visible during extraction\r\n        // This ensures data is extracted but line stays visible\r\n        if (isLineDrawn) {\r\n          requestAnimationFrame(() => drawLine());\r\n        }\r\n      }\r\n      \r\n      // Continue extraction loop if still extracting\r\n      if (isExtracting) {\r\n        animationRequestRef.current = requestAnimationFrame(extractLineData);\r\n      }\r\n    };\r\n    \r\n    // Start extraction if conditions are met\r\n    if (isLineDrawn && isCameraActive && isExtracting) {\r\n      animationRequestRef.current = requestAnimationFrame(extractLineData);\r\n    }\r\n    \r\n    // Clean up animation frame on unmount or when dependencies change\r\n    return () => {\r\n      if (animationRequestRef.current) {\r\n        cancelAnimationFrame(animationRequestRef.current);\r\n        animationRequestRef.current = null;\r\n      }\r\n    };\r\n  }, [isLineDrawn, isCameraActive, isExtracting, lineYOffset, lineXOffset]);\r\n  \r\n  // Add a separate dedicated effect for line drawing that runs regardless of extraction state\r\n  useEffect(() => {\r\n    if (!isLineDrawn || !isCameraActive) return;\r\n    \r\n    console.log('Setting up dedicated line drawing effect');\r\n    \r\n    const drawLineFrame = () => {\r\n      if (canvasRef.current && isLineDrawn) {\r\n        drawLine();\r\n      }\r\n      requestAnimationFrame(drawLineFrame);\r\n    };\r\n    \r\n    const animationId = requestAnimationFrame(drawLineFrame);\r\n    \r\n    return () => {\r\n      cancelAnimationFrame(animationId);\r\n    };\r\n  }, [isLineDrawn, isCameraActive]);\r\n  \r\n  // Add an effect to draw the line every time the video frame updates\r\n  useEffect(() => {\r\n    if (!videoRef.current || !isCameraActive || !isLineDrawn) return;\r\n\r\n    const video = videoRef.current;\r\n    \r\n    // Function to handle video frames and redraw the line\r\n    const handleVideoFrame = () => {\r\n      if (isLineDrawn) {\r\n        console.log('Redrawing line on video frame update');\r\n        drawLine();\r\n      }\r\n    };\r\n\r\n    // Add event listeners to ensure line is drawn when video updates\r\n    video.addEventListener('play', handleVideoFrame);\r\n    video.addEventListener('timeupdate', handleVideoFrame);\r\n    \r\n    // Draw immediately\r\n    drawLine();\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      video.removeEventListener('play', handleVideoFrame);\r\n      video.removeEventListener('timeupdate', handleVideoFrame);\r\n    };\r\n  }, [videoRef.current, isCameraActive, isLineDrawn, lineYOffset, lineXOffset]);\r\n  \r\n  // Function to get available cameras\r\n  const getAvailableCameras = async () => {\r\n    try {\r\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n        console.error('MediaDevices API is not supported in this browser');\r\n        return;\r\n      }\r\n      \r\n      // Request permission to camera first\r\n      const tempStream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n      // Stop the temporary stream\r\n      tempStream.getTracks().forEach(track => track.stop());\r\n      \r\n      // Now enumerate devices after getting permission\r\n      const devices = await navigator.mediaDevices.enumerateDevices();\r\n      const videoDevices = devices.filter(device => device.kind === 'videoinput');\r\n      \r\n      setAvailableCameras(videoDevices);\r\n      \r\n      // Select first camera by default if available\r\n      if (videoDevices.length > 0) {\r\n        setSelectedCamera(videoDevices[0].deviceId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error accessing camera devices:', error);\r\n    }\r\n  };\r\n  \r\n  // Start camera stream\r\n  const startCamera = async () => {\r\n    try {\r\n      if (!selectedCamera) return;\r\n      \r\n      // Stop any existing stream\r\n      stopCamera();\r\n      \r\n      // Parse resolution\r\n      const [width, height] = cameraResolution.split('x').map(Number);\r\n      \r\n      // Start new stream with selected camera and resolution\r\n      const constraints = {\r\n        video: { \r\n          deviceId: { exact: selectedCamera },\r\n          width: { ideal: width },\r\n          height: { ideal: height }\r\n        }\r\n      };\r\n      \r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      streamRef.current = stream;\r\n      \r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        // Start playing the video\r\n        await videoRef.current.play();\r\n      }\r\n      \r\n      setIsCameraActive(true);\r\n      \r\n      // Get actual resolution from video track\r\n      const videoTrack = stream.getVideoTracks()[0];\r\n      if (videoTrack) {\r\n        const settings = videoTrack.getSettings();\r\n        if (settings.width && settings.height) {\r\n          setCameraSize({ width: settings.width, height: settings.height });\r\n        }\r\n        \r\n        // Get camera capabilities\r\n        const capabilities = videoTrack.getCapabilities();\r\n        setCameraCapabilities(capabilities);\r\n        console.log('Camera capabilities:', capabilities);\r\n        console.log('Current camera settings:', settings);\r\n        \r\n        // Initialize settings based on capabilities\r\n        if (capabilities.exposureTime) {\r\n          // ExposureTime is in microseconds from the API, convert to milliseconds for UI\r\n          const currentExposure = settings.exposureTime || Math.round((capabilities.exposureTime.max + capabilities.exposureTime.min) / 2);\r\n          console.log('Current exposure time (μs):', currentExposure);\r\n          setCameraExposureTime(currentExposure / 1000); // Convert from μs to ms for UI\r\n          console.log('Set exposure time state (ms):', currentExposure / 1000);\r\n          \r\n          // Set current exposure mode\r\n          if (settings.exposureMode) {\r\n            setExposureMode(settings.exposureMode);\r\n            console.log('Current exposure mode:', settings.exposureMode);\r\n          }\r\n        } else {\r\n          setCameraExposureTime(null);\r\n          console.log('Camera does not support exposureTime');\r\n        }\r\n        \r\n        if (capabilities.brightness) {\r\n          const defaultValue = settings.brightness || (capabilities.brightness.min + capabilities.brightness.max) / 2;\r\n          setCameraBrightness(defaultValue);\r\n        } else {\r\n          setCameraBrightness(null);\r\n        }\r\n        \r\n        if (capabilities.exposureCompensation) {\r\n          const defaultValue = settings.exposureCompensation || (capabilities.exposureCompensation.min + capabilities.exposureCompensation.max) / 2;\r\n          setCameraGain(defaultValue);\r\n        } else {\r\n          setCameraGain(null);\r\n        }\r\n      }\r\n      \r\n      // If a line was previously drawn, redraw it after a short delay to allow video to initialize\r\n      if (isLineDrawn) {\r\n        console.log('Redrawing line after camera start');\r\n        setTimeout(() => {\r\n          drawLine();\r\n        }, 500);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error starting camera:', error);\r\n      setIsCameraActive(false);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Stop camera stream\r\n  const stopCamera = () => {\r\n    if (streamRef.current) {\r\n      const tracks = streamRef.current.getTracks();\r\n      tracks.forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n    \r\n    if (videoRef.current) {\r\n      videoRef.current.srcObject = null;\r\n    }\r\n    \r\n    setIsCameraActive(false);\r\n  };\r\n  \r\n  // Apply camera settings\r\n  const applyCameraSettings = async () => {\r\n    if (!isCameraActive || !streamRef.current) return;\r\n    \r\n    try {\r\n      // Get current track\r\n      const videoTrack = streamRef.current.getVideoTracks()[0];\r\n      if (!videoTrack) return;\r\n      \r\n      // Get capabilities\r\n      const capabilities = videoTrack.getCapabilities();\r\n      \r\n      // Create constraints in proper structure for browser compatibility\r\n      const constraints = { advanced: [] };\r\n      \r\n      // Apply resolution if supported (this often requires stopping and restarting the stream)\r\n      if (cameraResolution && isCameraActive) {\r\n        const [width, height] = cameraResolution.split('x').map(Number);\r\n        console.log('Applying resolution:', width, height);\r\n        \r\n        // For resolution changes, we'll stop and restart the camera with new constraints\r\n        stopCamera();\r\n        \r\n        // Start a new stream with the new resolution\r\n        const newConstraints = {\r\n          video: { \r\n            deviceId: { exact: selectedCamera },\r\n            width: { ideal: width },\r\n            height: { ideal: height }\r\n          }\r\n        };\r\n        \r\n        // Short delay to ensure the previous stream is properly stopped\r\n        setTimeout(async () => {\r\n          try {\r\n            const newStream = await navigator.mediaDevices.getUserMedia(newConstraints);\r\n            streamRef.current = newStream;\r\n            \r\n            if (videoRef.current) {\r\n              videoRef.current.srcObject = newStream;\r\n              await videoRef.current.play();\r\n            }\r\n            \r\n            // Get actual resolution and update state\r\n            const newVideoTrack = newStream.getVideoTracks()[0];\r\n            if (newVideoTrack) {\r\n              const settings = newVideoTrack.getSettings();\r\n              if (settings.width && settings.height) {\r\n                setCameraSize({ width: settings.width, height: settings.height });\r\n              }\r\n              \r\n              // After restart, apply the other settings as well\r\n              applyNonResolutionSettings(newVideoTrack);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error restarting camera with new resolution:', error);\r\n          }\r\n        }, 100);\r\n        \r\n        return; // Exit early since we're restarting the camera\r\n      }\r\n      \r\n      // If we're not changing resolution, apply other settings directly\r\n      applyNonResolutionSettings(videoTrack);\r\n      \r\n    } catch (error) {\r\n      console.error('Error applying camera settings:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle exposure time change\r\n  const handleExposureTimeChange = (e) => {\r\n    if (!cameraCapabilities?.exposureTime) return;\r\n    \r\n    const value = parseFloat(e.target.value);\r\n    const { step = 1 } = cameraCapabilities.exposureTime;\r\n    \r\n    // Ensure the value is divisible by the step size\r\n    const roundedValue = Math.round(value / step) * step;\r\n    // Round to 2 decimal places to avoid floating point issues\r\n    const finalValue = parseFloat(roundedValue.toFixed(2));\r\n    setCameraExposureTime(finalValue);\r\n    \r\n    // Set exposure mode to manual when user adjusts exposure time\r\n    setExposureMode('manual');\r\n    console.log('Changed exposure mode to manual because user adjusted exposure time');\r\n  };\r\n  \r\n  // Handle brightness change\r\n  const handleBrightnessChange = (e) => {\r\n    if (!cameraCapabilities?.brightness) return;\r\n    \r\n    const value = parseFloat(e.target.value);\r\n    const { step = 1 } = cameraCapabilities.brightness;\r\n    \r\n    // Ensure the value is divisible by the step size\r\n    const roundedValue = Math.round(value / step) * step;\r\n    // Round to 2 decimal places to avoid floating point issues\r\n    const finalValue = parseFloat(roundedValue.toFixed(2));\r\n    setCameraBrightness(finalValue);\r\n  };\r\n  \r\n  // Handle gain change\r\n  const handleGainChange = (e) => {\r\n    if (!cameraCapabilities?.exposureCompensation) return;\r\n    \r\n    const value = parseFloat(e.target.value);\r\n    const { step = 1 } = cameraCapabilities.exposureCompensation;\r\n    \r\n    // Ensure the value is divisible by the step size\r\n    const roundedValue = Math.round(value / step) * step;\r\n    // Round to 2 decimal places to avoid floating point issues\r\n    const finalValue = parseFloat(roundedValue.toFixed(2));\r\n    setCameraGain(finalValue);\r\n  };\r\n  \r\n  // Helper function to apply non-resolution settings to a video track\r\n  const applyNonResolutionSettings = async (videoTrack) => {\r\n    if (!videoTrack) return;\r\n    \r\n    try {\r\n      // Object to collect constraints\r\n      const advancedConstraints = {};\r\n      \r\n      // Apply exposure time if available - ensure step size is respected\r\n      if (cameraCapabilities?.exposureTime && cameraExposureTime !== null) {\r\n        const { step = 1, min, max } = cameraCapabilities.exposureTime;\r\n        \r\n        // Convert from milliseconds (UI) to microseconds (API)\r\n        const microseconds = cameraExposureTime * 1000; \r\n        \r\n        // Ensure the value is within valid range and respects step size\r\n        const adjustedValue = Math.max(min, Math.min(max, \r\n          Math.round(microseconds / step) * step));\r\n        \r\n        advancedConstraints.exposureTime = adjustedValue;\r\n        console.log(`Attempting to set exposureTime: ${adjustedValue}μs (from ${cameraExposureTime}ms)`);\r\n        \r\n        // Set exposure mode to manual when applying exposure time\r\n        if (exposureMode === 'manual' && cameraCapabilities.exposureMode?.includes('manual')) {\r\n          advancedConstraints.exposureMode = 'manual';\r\n          console.log('Setting exposure mode to manual');\r\n        }\r\n      }\r\n      \r\n      // Apply brightness if available - ensure step size is respected\r\n      if (cameraCapabilities?.brightness && cameraBrightness !== null) {\r\n        const { step = 1, min, max } = cameraCapabilities.brightness;\r\n        // Ensure value is divisible by step size and within range\r\n        const adjustedValue = Math.max(min, Math.min(max, \r\n          Math.round(cameraBrightness / step) * step));\r\n        advancedConstraints.brightness = adjustedValue;\r\n        console.log(`Attempting to set brightness: ${adjustedValue}`);\r\n      }\r\n      \r\n      // Apply gain if available - ensure step size is respected\r\n      if (cameraCapabilities?.exposureCompensation && cameraGain !== null) {\r\n        const { step = 1, min, max } = cameraCapabilities.exposureCompensation;\r\n        // Ensure value is divisible by step size and within range\r\n        const adjustedValue = Math.max(min, Math.min(max, \r\n          Math.round(cameraGain / step) * step));\r\n        advancedConstraints.exposureCompensation = adjustedValue;\r\n        console.log(`Attempting to set exposureCompensation: ${adjustedValue}`);\r\n      }\r\n      \r\n      // Log what we're trying to apply\r\n      console.log('Applying camera constraints:', advancedConstraints);\r\n      \r\n      // Apply all constraints at once first (this is what most browsers prefer)\r\n      try {\r\n        const allConstraints = { advanced: [{ ...advancedConstraints }] };\r\n        await videoTrack.applyConstraints(allConstraints);\r\n        console.log('Successfully applied all constraints at once');\r\n      } catch (err) {\r\n        console.warn('Failed to apply all constraints at once, trying individually:', err);\r\n        \r\n        // Try applying constraints one by one as fallback\r\n        for (const [constraint, value] of Object.entries(advancedConstraints)) {\r\n          try {\r\n            // Create a constraint object with just this property\r\n            const singleConstraint = {};\r\n            singleConstraint[constraint] = value;\r\n            \r\n            // Some browsers work better with the 'advanced' structure\r\n            await videoTrack.applyConstraints({ advanced: [singleConstraint] });\r\n            console.log(`Successfully applied ${constraint}:`, value);\r\n          } catch (err) {\r\n            // Try direct constraint as a last resort (for some older browsers)\r\n            try {\r\n              const directConstraint = {};\r\n              directConstraint[constraint] = value;\r\n              await videoTrack.applyConstraints(directConstraint);\r\n              console.log(`Applied ${constraint} directly:`, value);\r\n            } catch (directErr) {\r\n              console.warn(`Failed to apply ${constraint}:`, directErr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Get updated settings and log them\r\n      const newSettings = videoTrack.getSettings();\r\n      console.log('New camera settings:', newSettings);\r\n      \r\n      // Update our state based on actual applied settings\r\n      if (newSettings.exposureTime !== undefined) {\r\n        const newExposureMs = newSettings.exposureTime / 1000;\r\n        console.log(`Updating exposureTime state to ${newExposureMs}ms (${newSettings.exposureTime}μs)`);\r\n        setCameraExposureTime(newExposureMs);\r\n      }\r\n      \r\n      if (newSettings.exposureMode !== undefined) {\r\n        setExposureMode(newSettings.exposureMode);\r\n        console.log(`Updating exposureMode to ${newSettings.exposureMode}`);\r\n      }\r\n      \r\n      if (newSettings.brightness !== undefined) {\r\n        setCameraBrightness(newSettings.brightness);\r\n      }\r\n      \r\n      if (newSettings.exposureCompensation !== undefined) {\r\n        setCameraGain(newSettings.exposureCompensation);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error applying non-resolution settings:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle camera selection change\r\n  const handleCameraChange = (e) => {\r\n    const newCameraId = e.target.value;\r\n    setSelectedCamera(newCameraId);\r\n    \r\n    // If camera is already active, restart with new camera\r\n    if (isCameraActive) {\r\n      stopCamera();\r\n      // Small delay to ensure camera is properly stopped\r\n      setTimeout(() => startCamera(), 100);\r\n    }\r\n  };\r\n  \r\n  // Reusable resize functionality adapted from parent component\r\n  const handleResizeStart = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    // Get initial coordinates and size\r\n    const startX = e.clientX;\r\n    const startY = e.clientY;\r\n    const startWidth = cameraContainerRef.current?.offsetWidth || cameraSize.width;\r\n    const startHeight = cameraContainerRef.current?.offsetHeight || cameraSize.height;\r\n    \r\n    // Show resize feedback\r\n    setIsResizing(true);\r\n    setShowResizeInfo(true);\r\n    \r\n    // Define move handler\r\n    function handleMouseMove(moveEvent) {\r\n      const deltaX = moveEvent.clientX - startX;\r\n      const deltaY = moveEvent.clientY - startY;\r\n      \r\n      // Maintain aspect ratio (4:3)\r\n      const aspectRatio = 4 / 3;\r\n      let newWidth = Math.max(200, startWidth + deltaX);\r\n      let newHeight = Math.max(150, newWidth / aspectRatio);\r\n      \r\n      // Update camera size\r\n      const newSize = {\r\n        width: Math.round(newWidth),\r\n        height: Math.round(newHeight)\r\n      };\r\n      \r\n      setCameraSize(newSize);\r\n      \r\n      // Notify parent if needed\r\n      if (onResize) {\r\n        onResize(newSize);\r\n      }\r\n      \r\n      // Prevent default to avoid text selection during resize\r\n      moveEvent.preventDefault();\r\n    }\r\n    \r\n    // Define up handler\r\n    function handleMouseUp() {\r\n      // Clean up\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n      \r\n      setIsResizing(false);\r\n      setTimeout(() => setShowResizeInfo(false), 800);\r\n    }\r\n    \r\n    // Attach handlers to document to capture events outside component\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n  \r\n  // Start drawing a line on the video\r\n  const startLineDrawing = (e) => {\r\n    if (!isCameraActive) return;\r\n    \r\n    const rect = cameraContainerRef.current.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    \r\n    console.log('Mouse down at:', x, y, 'Rectangle:', rect.width, rect.height);\r\n    console.log('Camera size:', cameraSize.width, cameraSize.height);\r\n    \r\n    // Calculate scale factors if the displayed size differs from the canvas size\r\n    const scaleX = cameraSize.width / rect.width;\r\n    const scaleY = cameraSize.height / rect.height;\r\n    \r\n    // Apply scaling\r\n    const scaledX = x * scaleX;\r\n    const scaledY = y * scaleY;\r\n    \r\n    console.log('Scaled position:', scaledX, scaledY);\r\n    \r\n    // Constrain to video bounds\r\n    const boundedX = Math.max(0, Math.min(scaledX, cameraSize.width));\r\n    const boundedY = Math.max(0, Math.min(scaledY, cameraSize.height));\r\n    \r\n    console.log('Setting line start to:', boundedX, boundedY);\r\n    setLineStart({ x: boundedX, y: boundedY });\r\n    setLineEnd({ x: boundedX, y: boundedY }); // Initially same point\r\n    setIsDrawingLine(true);\r\n  };\r\n  \r\n  // Update line end position while dragging\r\n  const updateLineDrawing = (e) => {\r\n    if (!isDrawingLine) return;\r\n    \r\n    const rect = cameraContainerRef.current.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    // We ignore the y position from the mouse\r\n    \r\n    // Calculate scale factors if the displayed size differs from the canvas size\r\n    const scaleX = cameraSize.width / rect.width;\r\n    const scaleY = cameraSize.height / rect.height;\r\n    \r\n    // Apply scaling\r\n    const scaledX = x * scaleX;\r\n    // Use the y-coordinate from the start point\r\n    const scaledY = lineStart.y;\r\n    \r\n    // Constrain to video bounds\r\n    const boundedX = Math.max(0, Math.min(scaledX, cameraSize.width));\r\n    \r\n    setLineEnd({ x: boundedX, y: scaledY });\r\n    \r\n    // Draw the line in real-time while dragging\r\n    if (canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(lineStart.x, lineStart.y);\r\n      ctx.lineTo(boundedX, scaledY);\r\n      ctx.strokeStyle = 'rgba(255, 0, 0, 0.9)'; // Bright red during drawing\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n  \r\n  // Complete line drawing\r\n  const finishLineDrawing = () => {\r\n    if (!isDrawingLine) return;\r\n    \r\n    console.log('Finishing line drawing. Line:', lineStart, lineEnd);\r\n    \r\n    // First store original line positions for transformations\r\n    // Do this before changing isDrawingLine to avoid race conditions\r\n    const originalStart = { ...lineStart };\r\n    const originalEnd = { ...lineEnd };\r\n    \r\n    setOriginalLineStart(originalStart);\r\n    setOriginalLineEnd(originalEnd);\r\n    \r\n    // Draw the line immediately\r\n    if (canvasRef.current) {\r\n      console.log('Drawing final line immediately');\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      \r\n      // Draw a plain line immediately to ensure it's visible\r\n      ctx.beginPath();\r\n      ctx.moveTo(lineStart.x, lineStart.y);\r\n      ctx.lineTo(lineEnd.x, lineEnd.y);\r\n      ctx.strokeStyle = 'red';\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n      \r\n      // Draw some debug text to see if canvas is responsive\r\n      ctx.font = 'bold 20px Arial';\r\n      ctx.fillStyle = 'white';\r\n      ctx.fillText('Line drawn!', 50, 50);\r\n    }\r\n    \r\n    // Then update state\r\n    setIsDrawingLine(false);\r\n    setIsLineDrawn(true);\r\n    setIsExtracting(true); // Start extraction when line is drawn\r\n    \r\n    // Reset transformation values\r\n    setLineYOffset(0);\r\n    setLineXOffset(0);\r\n    \r\n    // Notify parent about line data\r\n    if (onLineDataChange) {\r\n      onLineDataChange({\r\n        start: originalStart,\r\n        end: originalEnd,\r\n        yOffset: 0, // Reset on new line\r\n        xOffset: 0\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Clear the drawn line\r\n  const clearLine = () => {\r\n    console.log('Clearing line');\r\n    setIsLineDrawn(false);\r\n    setIsExtracting(false); // Stop extraction when line is cleared\r\n    \r\n    // Reset all line adjustments\r\n    setLineYOffset(0);\r\n    setLineXOffset(0);\r\n    \r\n    // Clear the canvas\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n    \r\n    // Notify parent about line clearing\r\n    if (onLineDataChange) {\r\n      onLineDataChange(null);\r\n    }\r\n  };\r\n  \r\n  // Draw the line on the canvas with current transformations\r\n  const drawLine = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas || !isLineDrawn) {\r\n      console.log('Cannot draw line - canvas not ready or line not drawn');\r\n      return;\r\n    }\r\n    \r\n    // Log the current state\r\n    console.log('DrawLine called, isLineDrawn:', isLineDrawn, 'isDrawingLine:', isDrawingLine);\r\n    console.log('Canvas size:', canvas.width, canvas.height);\r\n    \r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // Calculate transformed line positions\r\n    const transformedLine = calculateTransformedLinePosition();\r\n    \r\n    console.log('Drawing line from', transformedLine.start, 'to', transformedLine.end);\r\n    \r\n    // Set line style for maximum visibility\r\n    ctx.lineWidth = 1;\r\n    ctx.lineCap = 'round';\r\n    \r\n    // Draw the line with a glow effect for better visibility\r\n    // First draw a wider, blurred line for the glow\r\n    ctx.shadowColor = 'rgba(255, 0, 0, 0.8)';\r\n    ctx.shadowBlur = 10;\r\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.6)';\r\n    ctx.beginPath();\r\n    ctx.moveTo(transformedLine.start.x, transformedLine.start.y);\r\n    ctx.lineTo(transformedLine.end.x, transformedLine.end.y);\r\n    ctx.stroke();\r\n    \r\n    // Then draw the main line on top\r\n    ctx.shadowBlur = 0;\r\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.9)';\r\n    ctx.beginPath();\r\n    ctx.moveTo(transformedLine.start.x, transformedLine.start.y);\r\n    ctx.lineTo(transformedLine.end.x, transformedLine.end.y);\r\n    ctx.stroke();\r\n    \r\n    // Make endpoints more visible with larger circles\r\n    // First draw a halo/glow effect\r\n    ctx.shadowColor = 'rgba(255, 255, 0, 0.8)';\r\n    ctx.shadowBlur = 15;\r\n    ctx.fillStyle = 'rgba(255, 255, 0, 0.7)';\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 10, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 10, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    \r\n    // Then draw the actual points\r\n    ctx.shadowBlur = 0;\r\n    ctx.fillStyle = 'rgba(255, 255, 0, 0.9)';\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 8, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 8, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    \r\n    // Add outline to circles for better visibility\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 2;\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.start.x, transformedLine.start.y, 8, 0, Math.PI * 2);\r\n    ctx.stroke();\r\n    ctx.beginPath();\r\n    ctx.arc(transformedLine.end.x, transformedLine.end.y, 8, 0, Math.PI * 2);\r\n    ctx.stroke();\r\n    \r\n    // Add labels for start/end points\r\n    ctx.fillStyle = 'white';\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 3;\r\n    ctx.font = 'bold 14px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    \r\n    // Draw \"S\" for start with stroke for visibility\r\n    ctx.strokeText('S', transformedLine.start.x, transformedLine.start.y);\r\n    ctx.fillText('S', transformedLine.start.x, transformedLine.start.y);\r\n    \r\n    // Draw \"E\" for end with stroke for visibility\r\n    ctx.strokeText('E', transformedLine.end.x, transformedLine.end.y);\r\n    ctx.fillText('E', transformedLine.end.x, transformedLine.end.y);\r\n    \r\n    // Calculate and draw perpendicular indicator (small line in the middle perpendicular to main line)\r\n    const midX = (transformedLine.start.x + transformedLine.end.x) / 2;\r\n    const midY = (transformedLine.start.y + transformedLine.end.y) / 2;\r\n    \r\n    // Calculate the perpendicular direction\r\n    const dx = transformedLine.end.x - transformedLine.start.x;\r\n    const dy = transformedLine.end.y - transformedLine.start.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    \r\n    if (length > 0) {\r\n      // Normalize and rotate 90 degrees\r\n      const perpX = -dy / length * 20; // Increased length to 20px\r\n      const perpY = dx / length * 20;\r\n      \r\n      // Draw perpendicular line with increased visibility\r\n      ctx.beginPath();\r\n      ctx.moveTo(midX - perpX, midY - perpY);\r\n      ctx.lineTo(midX + perpX, midY + perpY);\r\n      ctx.strokeStyle = 'rgba(0, 255, 255, 0.9)'; // Brighter cyan with higher opacity\r\n      ctx.lineWidth = 3; // Increase width\r\n      ctx.stroke();\r\n    }\r\n  };\r\n  \r\n  // Calculate transformed line position based on sliders\r\n  const calculateTransformedLinePosition = () => {\r\n    if (!isLineDrawn) {\r\n      console.log('Not calculating transformed position - line not drawn');\r\n      return { start: lineStart, end: lineEnd };\r\n    }\r\n    \r\n    console.log('Calculating transformed line position');\r\n    console.log('Original start:', originalLineStart, 'Original end:', originalLineEnd);\r\n    console.log('Offsets:', lineXOffset, lineYOffset);\r\n\r\n    // Calculate the line center\r\n    const centerX = (originalLineStart.x + originalLineEnd.x) / 2;\r\n    const centerY = (originalLineStart.y + originalLineEnd.y) / 2;\r\n    \r\n    // No longer need rotation calculations\r\n    // Apply offsets directly to the original coordinates\r\n    const transformedStart = {\r\n      x: originalLineStart.x + lineXOffset,\r\n      y: originalLineStart.y + lineYOffset\r\n    };\r\n    \r\n    const transformedEnd = {\r\n      x: originalLineEnd.x + lineXOffset,\r\n      y: originalLineEnd.y + lineYOffset\r\n    };\r\n    \r\n    const result = {\r\n      start: transformedStart,\r\n      end: transformedEnd\r\n    };\r\n    \r\n    console.log('Transformed result:', result);\r\n    return result;\r\n  };\r\n  \r\n  // Handle line Y-offset adjustment\r\n  const handleLineYOffsetChange = (e) => {\r\n    const newOffset = parseInt(e.target.value);\r\n    setLineYOffset(newOffset);\r\n    drawLine();\r\n    \r\n    // Notify parent about line data change\r\n    if (onLineDataChange && isLineDrawn) {\r\n      onLineDataChange({\r\n        start: lineStart,\r\n        end: lineEnd,\r\n        yOffset: newOffset,\r\n        xOffset: lineXOffset\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Handle line X-offset adjustment\r\n  const handleLineXOffsetChange = (e) => {\r\n    const newOffset = parseInt(e.target.value);\r\n    setLineXOffset(newOffset);\r\n    drawLine();\r\n    \r\n    // Notify parent about line data change\r\n    if (onLineDataChange && isLineDrawn) {\r\n      onLineDataChange({\r\n        start: lineStart,\r\n        end: lineEnd,\r\n        yOffset: lineYOffset,\r\n        xOffset: newOffset\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Add effect to redraw line when parameters change\r\n  useEffect(() => {\r\n    if (isLineDrawn) {\r\n      drawLine();\r\n    }\r\n  }, [isLineDrawn, lineYOffset, lineXOffset]);\r\n  \r\n  // Helper to update parent component with line data\r\n  const updateParentLineData = () => {\r\n    if (onLineDataChange && isLineDrawn) {\r\n      onLineDataChange({\r\n        start: lineStart,\r\n        end: lineEnd,\r\n        yOffset: lineYOffset,\r\n        xOffset: lineXOffset\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Function to get pixels under the drawn line\r\n  const getPixelsUnderLine = (start, end) => {\r\n    if (!videoRef.current || !canvasRef.current) return null;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d', { willReadFrequently: true });\r\n    \r\n    // Create a temporary hidden canvas to avoid disturbing the main display\r\n    const tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = canvas.width;\r\n    tempCanvas.height = canvas.height;\r\n    const tempCtx = tempCanvas.getContext('2d', { willReadFrequently: true });\r\n    \r\n    // Draw the current video frame to the temp canvas (but don't display it)\r\n    tempCtx.drawImage(videoRef.current, 0, 0, tempCanvas.width, tempCanvas.height);\r\n    \r\n    // Calculate line points to sample\r\n    const dx = end.x - start.x;\r\n    const dy = end.y - start.y;\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n    const samples = Math.max(Math.ceil(distance), 1); // At least 1 sample\r\n    \r\n    // Initialize arrays for color data\r\n    const redValues = [];\r\n    const greenValues = [];\r\n    const blueValues = [];\r\n    const intensityValues = [];\r\n    const positions = [];\r\n    \r\n    try {\r\n      // Sample points along the line\r\n      for (let i = 0; i <= samples; i++) {\r\n        const t = i / samples;\r\n        const x = Math.round(start.x + dx * t);\r\n        const y = Math.round(start.y + dy * t);\r\n        \r\n        // Constrain to canvas boundaries\r\n        const boundedX = Math.max(0, Math.min(x, tempCanvas.width - 1));\r\n        const boundedY = Math.max(0, Math.min(y, tempCanvas.height - 1));\r\n        \r\n        // Get pixel data at this position from the temp canvas\r\n        const pixelData = tempCtx.getImageData(boundedX, boundedY, 1, 1).data;\r\n        const [r, g, b] = pixelData;\r\n        \r\n        // Calculate intensity as simple float average (not weighted)\r\n        const intensity = parseFloat((r + g + b) / 3);\r\n        \r\n        // Store values\r\n        redValues.push(r);\r\n        greenValues.push(g);\r\n        blueValues.push(b);\r\n        intensityValues.push(intensity);\r\n        positions.push(i / samples); // Normalized position along line (0-1)\r\n      }\r\n      \r\n      // Clean up temporary canvas\r\n      tempCanvas.remove();\r\n      \r\n      // Return structured data\r\n      return {\r\n        timestamp: Date.now(),\r\n        positions,\r\n        red: redValues,\r\n        green: greenValues,\r\n        blue: blueValues,\r\n        intensity: intensityValues,\r\n        lineLength: distance\r\n      };\r\n    } catch (error) {\r\n      console.error('Error extracting pixel data:', error);\r\n      tempCanvas.remove();\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Create a slider for a capability\r\n  const renderCapabilitySlider = (capability, value, onChange, label, unit = '') => {\r\n    if (!cameraCapabilities || !cameraCapabilities[capability] || value === null) {\r\n      return null;\r\n    }\r\n    \r\n    const capabilityInfo = cameraCapabilities[capability];\r\n    // Ensure we get the step from capabilities or default to 1\r\n    const { min, max, step = 1 } = capabilityInfo;\r\n    \r\n    // For exposure time, show the current mode\r\n    const showModeIndicator = capability === 'exposureTime';\r\n    \r\n    // Use step attribute directly from capabilities\r\n    return (\r\n      <div style={styles.controlRow}>\r\n        <label style={styles.controlLabel}>\r\n          {label}:\r\n          {showModeIndicator && (\r\n            <span style={{\r\n              fontSize: '9px',\r\n              display: 'block',\r\n              color: exposureMode === 'manual' ? '#ff9800' : '#4CAF50'\r\n            }}>\r\n              {exposureMode === 'manual' ? 'MANUAL' : 'AUTO'}\r\n            </span>\r\n          )}\r\n        </label>\r\n        <input \r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          value={value}\r\n          onChange={onChange}\r\n          style={{\r\n            ...styles.slider,\r\n            accentColor: exposureMode === 'manual' && capability === 'exposureTime' ? '#ff9800' : undefined\r\n          }}\r\n          disabled={!isCameraActive}\r\n        />\r\n        <span style={styles.value}>\r\n          {typeof value === 'number' ? \r\n            step >= 1 ? value.toFixed(0) : value.toFixed(2) : value}\r\n          {unit}\r\n        </span>\r\n        {showModeIndicator && cameraCapabilities.exposureMode?.includes('continuous') && (\r\n          <button\r\n            style={{\r\n              ...buttonVariants.smallIconButton,\r\n              padding: '2px 4px',\r\n              fontSize: '10px',\r\n              backgroundColor: exposureMode === 'manual' ? 'rgba(255, 152, 0, 0.5)' : 'rgba(76, 175, 80, 0.5)'\r\n            }}\r\n            onClick={() => {\r\n              const newMode = exposureMode === 'manual' ? 'continuous' : 'manual';\r\n              setExposureMode(newMode);\r\n              console.log(`Toggled exposure mode to: ${newMode}`);\r\n            }}\r\n            title={`Click to switch to ${exposureMode === 'manual' ? 'auto' : 'manual'} exposure`}\r\n          >\r\n            {exposureMode === 'manual' ? 'AUTO' : 'MANUAL'}\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Format capability value for display\r\n  const formatCapabilityValue = (value) => {\r\n    if (value === undefined || value === null) return 'N/A';\r\n    \r\n    if (typeof value === 'object') {\r\n      if (value.min !== undefined && value.max !== undefined) {\r\n        return `${value.min} to ${value.max}${value.step ? ` (step: ${value.step})` : ''}`;\r\n      }\r\n      return JSON.stringify(value);\r\n    }\r\n    \r\n    if (Array.isArray(value)) {\r\n      return value.join(', ');\r\n    }\r\n    \r\n    return value.toString();\r\n  };\r\n  \r\n  // Render a table of camera capabilities\r\n  const renderCapabilitiesTable = () => {\r\n    if (!cameraCapabilities) {\r\n      return <div>No capabilities information available</div>;\r\n    }\r\n    \r\n    // Filter out common capabilities that are already exposed in the UI\r\n    const commonCapabilities = ['width', 'height', 'deviceId', 'groupId'];\r\n    const advancedCapabilities = Object.keys(cameraCapabilities)\r\n      .filter(key => !commonCapabilities.includes(key))\r\n      .sort();\r\n    \r\n    if (advancedCapabilities.length === 0) {\r\n      return <div>No advanced capabilities exposed by this camera</div>;\r\n    }\r\n    \r\n    return (\r\n      <div style={styles.capabilitiesTable}>\r\n        <h4 style={styles.capabilitiesTitle}>Camera Capabilities</h4>\r\n        <div style={styles.scrollContainer}>\r\n          <table style={styles.table}>\r\n            <thead>\r\n              <tr>\r\n                <th style={styles.th}>Parameter</th>\r\n                <th style={styles.th}>Supported Values</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {advancedCapabilities.map(key => (\r\n                <tr key={key} style={styles.tr}>\r\n                  <td style={styles.td}>{key}</td>\r\n                  <td style={styles.td}>{formatCapabilityValue(cameraCapabilities[key])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Add a dedicated useEffect for periodic forced redraw to ensure line visibility\r\n  useEffect(() => {\r\n    if (!isLineDrawn || !isCameraActive) return;\r\n    \r\n    console.log('Setting up periodic redraw interval');\r\n    \r\n    // Force redraw every 500ms as a backup to ensure line remains visible\r\n    const intervalId = setInterval(() => {\r\n      if (isLineDrawn && canvasRef.current) {\r\n        console.log('Forced periodic redraw');\r\n        drawLine();\r\n      }\r\n    }, 500);\r\n    \r\n    return () => {\r\n      console.log('Clearing periodic redraw interval');\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [isLineDrawn, isCameraActive]);\r\n  \r\n  const styles = {\r\n    container: {\r\n      flex: '0 0 auto',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      gap: '5px',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      position: 'relative',\r\n      border: isResizing ? '1px dashed #4CAF50' : 'none',\r\n    },\r\n    title: {\r\n      margin: '0 0 10px 0',\r\n      fontSize: '14px'\r\n    },\r\n    cameraSelect: {\r\n      marginBottom: '10px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: '8px'\r\n    },\r\n    selectLabel: {\r\n      fontSize: '12px',\r\n      minWidth: '60px'\r\n    },\r\n    select: {\r\n      flex: 1,\r\n      backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n      color: 'white',\r\n      border: '1px solid rgba(80, 80, 80, 0.5)',\r\n      borderRadius: '3px',\r\n      padding: '4px 8px',\r\n      fontSize: '12px'\r\n    },\r\n    cameraView: {\r\n      width: `${cameraSize.width}px`,\r\n      height: `${cameraSize.height}px`,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      position: 'relative',\r\n      overflow: 'hidden'\r\n    },\r\n    video: {\r\n      width: '100%',\r\n      height: '100%',\r\n      objectFit: 'cover',\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0\r\n    },\r\n    canvas: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      pointerEvents: 'none', // Allow clicks to pass through to video\r\n      zIndex: 10\r\n    },\r\n    buttonRow: {\r\n      marginTop: '5px',\r\n      display: 'flex',\r\n      gap: '5px',\r\n      flexWrap: 'wrap'\r\n    },\r\n    lineControls: {\r\n      marginTop: '10px',\r\n      padding: '8px',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n      borderRadius: '4px',\r\n      display: isLineDrawn ? 'block' : 'none'\r\n    },\r\n    controlRow: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: '8px',\r\n      gap: '8px'\r\n    },\r\n    controlLabel: {\r\n      fontSize: '12px',\r\n      minWidth: '60px'\r\n    },\r\n    slider: {\r\n      flex: 1\r\n    },\r\n    value: {\r\n      fontSize: '12px',\r\n      minWidth: '30px',\r\n      textAlign: 'right'\r\n    },\r\n    settingsButton: {\r\n      marginLeft: 'auto'\r\n    },\r\n    cameraSettings: {\r\n      marginTop: '10px',\r\n      padding: '8px',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n      borderRadius: '4px',\r\n      display: showCameraSettings ? 'block' : 'none'\r\n    },\r\n    resizeHandle: {\r\n      position: 'absolute',\r\n      bottom: '0',\r\n      right: '0',\r\n      width: '20px',\r\n      height: '20px',\r\n      cursor: 'nwse-resize',\r\n      zIndex: 100,\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      backgroundColor: 'rgba(60, 60, 60, 0.8)',\r\n      borderTop: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderLeft: '1px solid rgba(180, 180, 180, 0.7)',\r\n      borderTopLeftRadius: '4px',\r\n    },\r\n    resizeInfo: {\r\n      position: 'absolute',\r\n      right: '25px',\r\n      bottom: '25px',\r\n      padding: '2px 6px',\r\n      background: 'rgba(0, 0, 0, 0.7)',\r\n      color: 'white',\r\n      borderRadius: '3px',\r\n      fontSize: '11px',\r\n      zIndex: 100\r\n    },\r\n    capabilitiesTable: {\r\n      marginTop: '10px',\r\n      borderTop: '1px solid rgba(255, 255, 255, 0.1)',\r\n      paddingTop: '10px'\r\n    },\r\n    capabilitiesTitle: {\r\n      fontSize: '13px',\r\n      margin: '0 0 8px 0'\r\n    },\r\n    scrollContainer: {\r\n      maxHeight: '200px',\r\n      overflowY: 'auto',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n      borderRadius: '3px'\r\n    },\r\n    table: {\r\n      width: '100%',\r\n      borderCollapse: 'collapse',\r\n      fontSize: '11px'\r\n    },\r\n    th: {\r\n      padding: '4px 8px',\r\n      textAlign: 'left',\r\n      borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\r\n      position: 'sticky',\r\n      top: 0,\r\n      backgroundColor: 'rgba(20, 20, 20, 0.8)'\r\n    },\r\n    tr: {\r\n      borderBottom: '1px solid rgba(255, 255, 255, 0.05)'\r\n    },\r\n    td: {\r\n      padding: '4px 8px',\r\n      maxWidth: '200px',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      whiteSpace: 'nowrap'\r\n    },\r\n    advancedToggle: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginTop: '12px',\r\n      padding: '6px 0',\r\n      borderTop: '1px solid rgba(255, 255, 255, 0.1)',\r\n      cursor: 'pointer',\r\n      userSelect: 'none'\r\n    },\r\n    toggleIcon: {\r\n      marginRight: '6px',\r\n      transform: showAdvancedCapabilities ? 'rotate(90deg)' : 'rotate(0deg)',\r\n      transition: 'transform 0.2s ease'\r\n    }\r\n  };\r\n  \r\n  // Fix the function that handles the Extract button state change\r\n  const handleExtractToggle = () => {\r\n    setIsExtracting(!isExtracting);\r\n    \r\n    // Force redraw the line immediately after toggling extraction\r\n    // to ensure it remains visible\r\n    if (isLineDrawn) {\r\n      setTimeout(() => {\r\n        console.log('Redrawing line after extraction toggle');\r\n        drawLine();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  // Camera controls section\r\n  const renderCameraControls = () => {\r\n    return (\r\n      <div style={styles.buttonRow}>\r\n        {!isCameraActive ? (\r\n          <button \r\n            style={buttonVariants.smallPrimary}\r\n            onClick={startCamera}\r\n            disabled={!selectedCamera}\r\n          >\r\n            Start Camera\r\n          </button>\r\n        ) : (\r\n          <button \r\n            style={buttonVariants.smallSecondary}\r\n            onClick={stopCamera}\r\n          >\r\n            Stop Camera\r\n          </button>\r\n        )}\r\n        \r\n        {isCameraActive && (\r\n          <>\r\n            {isLineDrawn ? (\r\n              <>\r\n                <button \r\n                  style={buttonVariants.smallSecondary}\r\n                  onClick={clearLine}\r\n                >\r\n                  Clear Line\r\n                </button>\r\n                <button \r\n                  style={{\r\n                    ...buttonVariants.smallSecondary,\r\n                    backgroundColor: isExtracting ? 'rgba(255, 0, 0, 0.5)' : undefined\r\n                  }}\r\n                  onClick={handleExtractToggle} // Use new handler function\r\n                  title={isExtracting ? \"Stop extracting data\" : \"Start extracting data\"}\r\n                >\r\n                  {isExtracting ? \"Stop Extract\" : \"Start Extract\"}\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <button \r\n                style={buttonVariants.smallSecondary}\r\n                disabled={isDrawingLine}\r\n                title=\"Click and drag on video to draw a line\"\r\n              >\r\n                Draw Line\r\n              </button>\r\n            )}\r\n            \r\n            <button \r\n              style={{\r\n                ...buttonVariants.smallSecondary,\r\n                ...styles.settingsButton,\r\n                backgroundColor: showCameraSettings ? 'rgba(0, 150, 150, 0.7)' : undefined\r\n              }}\r\n              onClick={() => setShowCameraSettings(!showCameraSettings)}\r\n            >\r\n              ⚙️ Camera Settings\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div style={styles.container}>\r\n      <h3 style={styles.title}>Camera Feed</h3>\r\n      \r\n      {/* Camera selection */}\r\n      <div style={styles.cameraSelect}>\r\n        <label style={styles.selectLabel}>Camera:</label>\r\n        <select \r\n          value={selectedCamera}\r\n          onChange={handleCameraChange}\r\n          style={styles.select}\r\n          disabled={isCameraActive}\r\n        >\r\n          {availableCameras.length === 0 && (\r\n            <option value=\"\">No cameras found</option>\r\n          )}\r\n          {availableCameras.map(camera => (\r\n            <option key={camera.deviceId} value={camera.deviceId}>\r\n              {camera.label || `Camera ${camera.deviceId.slice(0, 5)}...`}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {/* Camera view with line drawing capability */}\r\n      <div \r\n        ref={cameraContainerRef}\r\n        style={styles.cameraView}\r\n        onMouseDown={isCameraActive ? startLineDrawing : undefined}\r\n        onMouseMove={isCameraActive ? updateLineDrawing : undefined}\r\n        onMouseUp={isCameraActive ? finishLineDrawing : undefined}\r\n        onMouseLeave={isCameraActive ? finishLineDrawing : undefined}\r\n      >\r\n        {!isCameraActive && (\r\n          <div>Camera feed will appear here</div>\r\n        )}\r\n        \r\n        <video \r\n          ref={videoRef}\r\n          style={{\r\n            ...styles.video,\r\n            display: isCameraActive ? 'block' : 'none'\r\n          }}\r\n          playsInline\r\n          muted\r\n        />\r\n        \r\n        <canvas \r\n          ref={canvasRef}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 30, // Increase z-index further\r\n            pointerEvents: 'none' // Allow clicks to pass through\r\n          }}\r\n          width={cameraSize.width}\r\n          height={cameraSize.height}\r\n        />\r\n        \r\n        {/* Drawing mode indicator */}\r\n        {isCameraActive && !isLineDrawn && !isDrawingLine && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n            color: 'white',\r\n            padding: '8px 12px',\r\n            borderRadius: '4px',\r\n            fontSize: '14px',\r\n            zIndex: 25,\r\n            pointerEvents: 'none'\r\n          }}>\r\n            Click and drag to draw a line\r\n          </div>\r\n        )}\r\n        \r\n        {/* Line drawing indicator */}\r\n        {isDrawingLine && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: '10px',\r\n            left: '50%',\r\n            transform: 'translateX(-50%)',\r\n            backgroundColor: 'rgba(255, 255, 0, 0.8)',\r\n            color: 'black',\r\n            padding: '4px 8px',\r\n            borderRadius: '4px',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            zIndex: 25,\r\n            pointerEvents: 'none'\r\n          }}>\r\n            Drawing line...\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize info overlay */}\r\n        {showResizeInfo && (\r\n          <div style={styles.resizeInfo}>\r\n            {cameraSize.width} × {cameraSize.height}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Resize handle */}\r\n        <div \r\n          style={styles.resizeHandle}\r\n          onMouseDown={handleResizeStart}\r\n          title=\"Resize camera view\"\r\n        >\r\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\r\n            <path \r\n              d=\"M9,3 L3,9 M11,5 L5,11 M11,8 L8,11\" \r\n              stroke=\"white\" \r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Camera controls */}\r\n      {renderCameraControls()}\r\n      \r\n      {/* Line adjustment controls */}\r\n      {isLineDrawn && (\r\n        <div style={styles.lineControls}>\r\n          <div style={styles.controlRow}>\r\n            <label style={styles.controlLabel}>Y Offset:</label>\r\n            <input \r\n              type=\"range\"\r\n              min=\"-50\"\r\n              max=\"50\"\r\n              value={lineYOffset}\r\n              onChange={handleLineYOffsetChange}\r\n              style={styles.slider}\r\n            />\r\n            <span style={styles.value}>{lineYOffset}px</span>\r\n          </div>\r\n          \r\n          <div style={styles.controlRow}>\r\n            <label style={styles.controlLabel}>X Offset:</label>\r\n            <input \r\n              type=\"range\"\r\n              min=\"-50\"\r\n              max=\"50\"\r\n              value={lineXOffset}\r\n              onChange={handleLineXOffsetChange}\r\n              style={styles.slider}\r\n            />\r\n            <span style={styles.value}>{lineXOffset}px</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Camera settings */}\r\n      <div style={styles.cameraSettings}>\r\n        <div style={styles.controlRow}>\r\n          <label style={styles.controlLabel}>Resolution:</label>\r\n          <select \r\n            value={cameraResolution}\r\n            onChange={(e) => setCameraResolution(e.target.value)}\r\n            style={styles.select}\r\n            disabled={isCameraActive}\r\n          >\r\n            <option value=\"320x240\">320x240</option>\r\n            <option value=\"640x480\">640x480</option>\r\n            <option value=\"1280x720\">1280x720 (HD)</option>\r\n            <option value=\"1920x1080\">1920x1080 (Full HD)</option>\r\n          </select>\r\n        </div>\r\n        \r\n        {/* Dynamic sliders based on camera capabilities */}\r\n        {renderCapabilitySlider(\r\n          'exposureTime', \r\n          cameraExposureTime, \r\n          handleExposureTimeChange, \r\n          'Exposure', \r\n          'ms'\r\n        )}\r\n        \r\n        {renderCapabilitySlider(\r\n          'brightness', \r\n          cameraBrightness, \r\n          handleBrightnessChange, \r\n          'Brightness'\r\n        )}\r\n        \r\n        {renderCapabilitySlider(\r\n          'exposureCompensation', \r\n          cameraGain, \r\n          handleGainChange, \r\n          'Gain'\r\n        )}\r\n        \r\n        {/* Add a message if no adjustable settings are available */}\r\n        {isCameraActive && \r\n         !cameraCapabilities?.exposureTime && \r\n         !cameraCapabilities?.brightness && \r\n         !cameraCapabilities?.exposureCompensation && (\r\n          <div style={{ textAlign: 'center', padding: '10px', opacity: 0.7 }}>\r\n            No adjustable camera parameters available\r\n          </div>\r\n        )}\r\n        \r\n        <button \r\n          style={{ ...buttonVariants.smallPrimary, width: '100%', marginTop: '8px' }}\r\n          onClick={applyCameraSettings}\r\n          disabled={!isCameraActive}\r\n        >\r\n          Apply Settings\r\n        </button>\r\n        \r\n        {isCameraActive && cameraCapabilities && (\r\n          <div \r\n            style={styles.advancedToggle}\r\n            onClick={() => setShowAdvancedCapabilities(!showAdvancedCapabilities)}\r\n          >\r\n            <span style={styles.toggleIcon}>▶</span>\r\n            <span>{showAdvancedCapabilities ? \"Hide Camera Capabilities\" : \"Show Camera Capabilities\"}</span>\r\n          </div>\r\n        )}\r\n        \r\n        {isCameraActive && showAdvancedCapabilities && renderCapabilitiesTable()}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// Add display name for debugging\r\nCameraComponent.displayName = 'CameraComponent';\r\n\r\nexport default CameraComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}