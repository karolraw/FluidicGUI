{"ast":null,"code":"/**\r\n * Converts physical pump parameters to hardware-specific values\r\n * @param {Object} params - Physical parameters\r\n * @param {number} params.volume - Volume in μL\r\n * @param {number} params.speed - Speed in μL/s\r\n * @param {Object} deviceProperties - Device properties\r\n * @param {number} deviceProperties.diameter - Syringe diameter in mm\r\n * @param {number} deviceProperties.stepsPerRevolution - Steps per revolution\r\n * @param {number} deviceProperties.lead - Lead screw pitch in mm\r\n * @returns {Object} Hardware-specific values\r\n */\nexport const convertToHardwareValuesPump = (params, deviceProperties) => {\n  var _deviceProperties$fin, _deviceProperties$fin2, _deviceProperties$fin3;\n  // Extract device properties with defaults\n  const syringeDiameter = ((_deviceProperties$fin = deviceProperties.find(p => p.name === 'diameter')) === null || _deviceProperties$fin === void 0 ? void 0 : _deviceProperties$fin.default) || 0;\n  const stepsPerRevolution = ((_deviceProperties$fin2 = deviceProperties.find(p => p.name === 'steps per revolution')) === null || _deviceProperties$fin2 === void 0 ? void 0 : _deviceProperties$fin2.default) || 0;\n  const lead = ((_deviceProperties$fin3 = deviceProperties.find(p => p.name === 'lead')) === null || _deviceProperties$fin3 === void 0 ? void 0 : _deviceProperties$fin3.default) || 0;\n\n  // Calculate syringe area in mm²\n  const syringeArea = Math.PI * Math.pow(syringeDiameter / 2, 2);\n\n  // Convert volumetric speed to linear speed (mm/s)\n  const linearSpeed = parseFloat(params.speed) / syringeArea;\n\n  // Calculate steps per mm of linear movement\n  const stepsPerMm = stepsPerRevolution / lead;\n\n  // Calculate steps per second\n  const stepsPerSecond = linearSpeed * stepsPerMm;\n\n  // Calculate delay between steps in microseconds\n  const delayMicroseconds = stepsPerSecond ? Math.round(1000000 / stepsPerSecond / 2) : 0;\n\n  // Calculate total time in microseconds\n  const endTime = Math.round(Math.abs(params.volume / params.speed * 1000000));\n\n  // Calculate direction based on speed sign\n  const direction = Math.sign(params.speed) >= 0 ? 1 : -1;\n  return {\n    delayMicroseconds,\n    endTime,\n    direction,\n    // Additional calculated values that might be useful\n    stepsPerSecond,\n    linearSpeed,\n    syringeArea\n  };\n};\n\n/**\r\n * Creates a pump movement command list\r\n * @param {Object} params - Physical parameters\r\n * @param {number} params.volume - Volume in μL\r\n * @param {number} params.speed - Speed in μL/s\r\n * @param {Object} deviceProperties - Device properties\r\n * @returns {Array} Command list for the pump\r\n */\nexport const createPumpCommand = (params, deviceProperties) => {\n  const {\n    delayMicroseconds,\n    endTime\n  } = convertToHardwareValuesPump(params, deviceProperties);\n  return [[delayMicroseconds, 0],\n  // Start moving at specified speed\n  [0, endTime] // Stop after specified time\n  ];\n};","map":{"version":3,"names":["convertToHardwareValuesPump","params","deviceProperties","_deviceProperties$fin","_deviceProperties$fin2","_deviceProperties$fin3","syringeDiameter","find","p","name","default","stepsPerRevolution","lead","syringeArea","Math","PI","pow","linearSpeed","parseFloat","speed","stepsPerMm","stepsPerSecond","delayMicroseconds","round","endTime","abs","volume","direction","sign","createPumpCommand"],"sources":["E:/flow chemistry/fluidicGUI/frontend/fluidicgui/src/utils/pumpCalculations.js"],"sourcesContent":["/**\r\n * Converts physical pump parameters to hardware-specific values\r\n * @param {Object} params - Physical parameters\r\n * @param {number} params.volume - Volume in μL\r\n * @param {number} params.speed - Speed in μL/s\r\n * @param {Object} deviceProperties - Device properties\r\n * @param {number} deviceProperties.diameter - Syringe diameter in mm\r\n * @param {number} deviceProperties.stepsPerRevolution - Steps per revolution\r\n * @param {number} deviceProperties.lead - Lead screw pitch in mm\r\n * @returns {Object} Hardware-specific values\r\n */\r\nexport const convertToHardwareValuesPump = (params, deviceProperties) => {\r\n  // Extract device properties with defaults\r\n  const syringeDiameter = deviceProperties.find(p => p.name === 'diameter')?.default || 0;\r\n  const stepsPerRevolution = deviceProperties.find(p => p.name === 'steps per revolution')?.default || 0;\r\n  const lead = deviceProperties.find(p => p.name === 'lead')?.default || 0;\r\n\r\n  // Calculate syringe area in mm²\r\n  const syringeArea = Math.PI * Math.pow(syringeDiameter / 2, 2);\r\n\r\n  // Convert volumetric speed to linear speed (mm/s)\r\n  const linearSpeed = (parseFloat(params.speed)) / syringeArea;\r\n\r\n  // Calculate steps per mm of linear movement\r\n  const stepsPerMm = stepsPerRevolution / lead;\r\n\r\n  // Calculate steps per second\r\n  const stepsPerSecond = linearSpeed * stepsPerMm;\r\n\r\n  // Calculate delay between steps in microseconds\r\n  const delayMicroseconds = stepsPerSecond ? Math.round(1000000 / stepsPerSecond / 2) : 0;\r\n\r\n  // Calculate total time in microseconds\r\n  const endTime = Math.round(Math.abs(params.volume / params.speed * 1000000));\r\n\r\n  // Calculate direction based on speed sign\r\n  const direction = Math.sign(params.speed) >= 0 ? 1 : -1;\r\n\r\n  return {\r\n    delayMicroseconds,\r\n    endTime,\r\n    direction,\r\n    // Additional calculated values that might be useful\r\n    stepsPerSecond,\r\n    linearSpeed,\r\n    syringeArea\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a pump movement command list\r\n * @param {Object} params - Physical parameters\r\n * @param {number} params.volume - Volume in μL\r\n * @param {number} params.speed - Speed in μL/s\r\n * @param {Object} deviceProperties - Device properties\r\n * @returns {Array} Command list for the pump\r\n */\r\nexport const createPumpCommand = (params, deviceProperties) => {\r\n  const { delayMicroseconds, endTime } = convertToHardwareValuesPump(params, deviceProperties);\r\n  \r\n  return [\r\n    [delayMicroseconds, 0],      // Start moving at specified speed\r\n    [0, endTime]                 // Stop after specified time\r\n  ];\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,2BAA2B,GAAGA,CAACC,MAAM,EAAEC,gBAAgB,KAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACvE;EACA,MAAMC,eAAe,GAAG,EAAAH,qBAAA,GAAAD,gBAAgB,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,UAAU,CAAC,cAAAN,qBAAA,uBAAjDA,qBAAA,CAAmDO,OAAO,KAAI,CAAC;EACvF,MAAMC,kBAAkB,GAAG,EAAAP,sBAAA,GAAAF,gBAAgB,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,sBAAsB,CAAC,cAAAL,sBAAA,uBAA7DA,sBAAA,CAA+DM,OAAO,KAAI,CAAC;EACtG,MAAME,IAAI,GAAG,EAAAP,sBAAA,GAAAH,gBAAgB,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,MAAM,CAAC,cAAAJ,sBAAA,uBAA7CA,sBAAA,CAA+CK,OAAO,KAAI,CAAC;;EAExE;EACA,MAAMG,WAAW,GAAGC,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG,CAACV,eAAe,GAAG,CAAC,EAAE,CAAC,CAAC;;EAE9D;EACA,MAAMW,WAAW,GAAIC,UAAU,CAACjB,MAAM,CAACkB,KAAK,CAAC,GAAIN,WAAW;;EAE5D;EACA,MAAMO,UAAU,GAAGT,kBAAkB,GAAGC,IAAI;;EAE5C;EACA,MAAMS,cAAc,GAAGJ,WAAW,GAAGG,UAAU;;EAE/C;EACA,MAAME,iBAAiB,GAAGD,cAAc,GAAGP,IAAI,CAACS,KAAK,CAAC,OAAO,GAAGF,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC;;EAEvF;EACA,MAAMG,OAAO,GAAGV,IAAI,CAACS,KAAK,CAACT,IAAI,CAACW,GAAG,CAACxB,MAAM,CAACyB,MAAM,GAAGzB,MAAM,CAACkB,KAAK,GAAG,OAAO,CAAC,CAAC;;EAE5E;EACA,MAAMQ,SAAS,GAAGb,IAAI,CAACc,IAAI,CAAC3B,MAAM,CAACkB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAEvD,OAAO;IACLG,iBAAiB;IACjBE,OAAO;IACPG,SAAS;IACT;IACAN,cAAc;IACdJ,WAAW;IACXJ;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,iBAAiB,GAAGA,CAAC5B,MAAM,EAAEC,gBAAgB,KAAK;EAC7D,MAAM;IAAEoB,iBAAiB;IAAEE;EAAQ,CAAC,GAAGxB,2BAA2B,CAACC,MAAM,EAAEC,gBAAgB,CAAC;EAE5F,OAAO,CACL,CAACoB,iBAAiB,EAAE,CAAC,CAAC;EAAO;EAC7B,CAAC,CAAC,EAAEE,OAAO,CAAC,CAAiB;EAAA,CAC9B;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}